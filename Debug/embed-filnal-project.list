
embed-filnal-project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005360  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f0  08005500  08005500  00015500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058f0  080058f0  000200bc  2**0
                  CONTENTS
  4 .ARM          00000008  080058f0  080058f0  000158f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080058f8  080058f8  000200bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058f8  080058f8  000158f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080058fc  080058fc  000158fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000bc  20000000  08005900  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  200000bc  080059bc  000200bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000188  080059bc  00020188  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000be9c  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a93  00000000  00000000  0002bf88  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c98  00000000  00000000  0002da20  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bc0  00000000  00000000  0002e6b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016624  00000000  00000000  0002f278  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008df2  00000000  00000000  0004589c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008cfb9  00000000  00000000  0004e68e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000db647  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000386c  00000000  00000000  000db6c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000bc 	.word	0x200000bc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080054e8 	.word	0x080054e8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000c0 	.word	0x200000c0
 80001dc:	080054e8 	.word	0x080054e8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <HAL_UART_RxCpltCallback>:
void setForegroundColor(uint8_t color);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  /* here we consume the current value of rx */
  // Debug Blinking
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 8000598:	2201      	movs	r2, #1
 800059a:	2120      	movs	r1, #32
 800059c:	48d3      	ldr	r0, [pc, #844]	; (80008ec <HAL_UART_RxCpltCallback+0x35c>)
 800059e:	f002 f8a5 	bl	80026ec <HAL_GPIO_WritePin>
  	switch (state) {
 80005a2:	4bd3      	ldr	r3, [pc, #844]	; (80008f0 <HAL_UART_RxCpltCallback+0x360>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	2b01      	cmp	r3, #1
 80005a8:	f000 80fc 	beq.w	80007a4 <HAL_UART_RxCpltCallback+0x214>
 80005ac:	2b0a      	cmp	r3, #10
 80005ae:	f000 81bd 	beq.w	800092c <HAL_UART_RxCpltCallback+0x39c>
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	f040 822d 	bne.w	8000a12 <HAL_UART_RxCpltCallback+0x482>
  	case START_SCREEN:
  		switch (rxData[0]) {
 80005b8:	4bce      	ldr	r3, [pc, #824]	; (80008f4 <HAL_UART_RxCpltCallback+0x364>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	3b30      	subs	r3, #48	; 0x30
 80005be:	2b43      	cmp	r3, #67	; 0x43
 80005c0:	f200 8222 	bhi.w	8000a08 <HAL_UART_RxCpltCallback+0x478>
 80005c4:	a201      	add	r2, pc, #4	; (adr r2, 80005cc <HAL_UART_RxCpltCallback+0x3c>)
 80005c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005ca:	bf00      	nop
 80005cc:	08000793 	.word	0x08000793
 80005d0:	08000703 	.word	0x08000703
 80005d4:	08000713 	.word	0x08000713
 80005d8:	08000723 	.word	0x08000723
 80005dc:	08000733 	.word	0x08000733
 80005e0:	08000743 	.word	0x08000743
 80005e4:	08000753 	.word	0x08000753
 80005e8:	08000763 	.word	0x08000763
 80005ec:	08000773 	.word	0x08000773
 80005f0:	08000783 	.word	0x08000783
 80005f4:	08000a09 	.word	0x08000a09
 80005f8:	08000a09 	.word	0x08000a09
 80005fc:	08000a09 	.word	0x08000a09
 8000600:	08000a09 	.word	0x08000a09
 8000604:	08000a09 	.word	0x08000a09
 8000608:	08000a09 	.word	0x08000a09
 800060c:	08000a09 	.word	0x08000a09
 8000610:	08000a09 	.word	0x08000a09
 8000614:	08000a09 	.word	0x08000a09
 8000618:	08000a09 	.word	0x08000a09
 800061c:	08000a09 	.word	0x08000a09
 8000620:	08000a09 	.word	0x08000a09
 8000624:	08000a09 	.word	0x08000a09
 8000628:	08000a09 	.word	0x08000a09
 800062c:	08000a09 	.word	0x08000a09
 8000630:	08000a09 	.word	0x08000a09
 8000634:	08000a09 	.word	0x08000a09
 8000638:	08000a09 	.word	0x08000a09
 800063c:	08000a09 	.word	0x08000a09
 8000640:	08000a09 	.word	0x08000a09
 8000644:	08000a09 	.word	0x08000a09
 8000648:	08000a09 	.word	0x08000a09
 800064c:	08000a09 	.word	0x08000a09
 8000650:	08000a09 	.word	0x08000a09
 8000654:	08000a09 	.word	0x08000a09
 8000658:	080006dd 	.word	0x080006dd
 800065c:	08000a09 	.word	0x08000a09
 8000660:	08000a09 	.word	0x08000a09
 8000664:	08000a09 	.word	0x08000a09
 8000668:	08000a09 	.word	0x08000a09
 800066c:	08000a09 	.word	0x08000a09
 8000670:	08000a09 	.word	0x08000a09
 8000674:	08000a09 	.word	0x08000a09
 8000678:	08000a09 	.word	0x08000a09
 800067c:	08000a09 	.word	0x08000a09
 8000680:	08000a09 	.word	0x08000a09
 8000684:	08000a09 	.word	0x08000a09
 8000688:	08000a09 	.word	0x08000a09
 800068c:	08000a09 	.word	0x08000a09
 8000690:	08000a09 	.word	0x08000a09
 8000694:	08000a09 	.word	0x08000a09
 8000698:	08000a09 	.word	0x08000a09
 800069c:	08000a09 	.word	0x08000a09
 80006a0:	08000a09 	.word	0x08000a09
 80006a4:	08000a09 	.word	0x08000a09
 80006a8:	08000a09 	.word	0x08000a09
 80006ac:	08000a09 	.word	0x08000a09
 80006b0:	08000a09 	.word	0x08000a09
 80006b4:	08000a09 	.word	0x08000a09
 80006b8:	08000a09 	.word	0x08000a09
 80006bc:	08000a09 	.word	0x08000a09
 80006c0:	08000a09 	.word	0x08000a09
 80006c4:	08000a09 	.word	0x08000a09
 80006c8:	08000a09 	.word	0x08000a09
 80006cc:	08000a09 	.word	0x08000a09
 80006d0:	08000a09 	.word	0x08000a09
 80006d4:	08000a09 	.word	0x08000a09
 80006d8:	080006dd 	.word	0x080006dd
  		case 's': case 'S':
  			state = GAME_SCREEN;
 80006dc:	4b84      	ldr	r3, [pc, #528]	; (80008f0 <HAL_UART_RxCpltCallback+0x360>)
 80006de:	2201      	movs	r2, #1
 80006e0:	601a      	str	r2, [r3, #0]

  			// Redraw screen to Start New Game
  			resetPosition();
 80006e2:	f000 fecf 	bl	8001484 <resetPosition>
  			resetScore();
 80006e6:	f000 fef5 	bl	80014d4 <resetScore>
  			isGameStart = 0;
 80006ea:	4b83      	ldr	r3, [pc, #524]	; (80008f8 <HAL_UART_RxCpltCallback+0x368>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	701a      	strb	r2, [r3, #0]
  			isGameEnd = 0;
 80006f0:	4b82      	ldr	r3, [pc, #520]	; (80008fc <HAL_UART_RxCpltCallback+0x36c>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	701a      	strb	r2, [r3, #0]
  			enableRandom = 0;
 80006f6:	4b82      	ldr	r3, [pc, #520]	; (8000900 <HAL_UART_RxCpltCallback+0x370>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	701a      	strb	r2, [r3, #0]
  			initial();
 80006fc:	f000 fc0a 	bl	8000f14 <initial>

  			break;
 8000700:	e04f      	b.n	80007a2 <HAL_UART_RxCpltCallback+0x212>
  		case '1': win_score = 1; tracker = NULL_SCREEN; break;
 8000702:	4b80      	ldr	r3, [pc, #512]	; (8000904 <HAL_UART_RxCpltCallback+0x374>)
 8000704:	2201      	movs	r2, #1
 8000706:	701a      	strb	r2, [r3, #0]
 8000708:	4b7f      	ldr	r3, [pc, #508]	; (8000908 <HAL_UART_RxCpltCallback+0x378>)
 800070a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	e047      	b.n	80007a2 <HAL_UART_RxCpltCallback+0x212>
  		case '2': win_score = 2; tracker = NULL_SCREEN; break;
 8000712:	4b7c      	ldr	r3, [pc, #496]	; (8000904 <HAL_UART_RxCpltCallback+0x374>)
 8000714:	2202      	movs	r2, #2
 8000716:	701a      	strb	r2, [r3, #0]
 8000718:	4b7b      	ldr	r3, [pc, #492]	; (8000908 <HAL_UART_RxCpltCallback+0x378>)
 800071a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	e03f      	b.n	80007a2 <HAL_UART_RxCpltCallback+0x212>
  		case '3': win_score = 3; tracker = NULL_SCREEN; break;
 8000722:	4b78      	ldr	r3, [pc, #480]	; (8000904 <HAL_UART_RxCpltCallback+0x374>)
 8000724:	2203      	movs	r2, #3
 8000726:	701a      	strb	r2, [r3, #0]
 8000728:	4b77      	ldr	r3, [pc, #476]	; (8000908 <HAL_UART_RxCpltCallback+0x378>)
 800072a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	e037      	b.n	80007a2 <HAL_UART_RxCpltCallback+0x212>
  		case '4': win_score = 4; tracker = NULL_SCREEN; break;
 8000732:	4b74      	ldr	r3, [pc, #464]	; (8000904 <HAL_UART_RxCpltCallback+0x374>)
 8000734:	2204      	movs	r2, #4
 8000736:	701a      	strb	r2, [r3, #0]
 8000738:	4b73      	ldr	r3, [pc, #460]	; (8000908 <HAL_UART_RxCpltCallback+0x378>)
 800073a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	e02f      	b.n	80007a2 <HAL_UART_RxCpltCallback+0x212>
  		case '5': win_score = 5; tracker = NULL_SCREEN; break;
 8000742:	4b70      	ldr	r3, [pc, #448]	; (8000904 <HAL_UART_RxCpltCallback+0x374>)
 8000744:	2205      	movs	r2, #5
 8000746:	701a      	strb	r2, [r3, #0]
 8000748:	4b6f      	ldr	r3, [pc, #444]	; (8000908 <HAL_UART_RxCpltCallback+0x378>)
 800074a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	e027      	b.n	80007a2 <HAL_UART_RxCpltCallback+0x212>
  		case '6': win_score = 6; tracker = NULL_SCREEN; break;
 8000752:	4b6c      	ldr	r3, [pc, #432]	; (8000904 <HAL_UART_RxCpltCallback+0x374>)
 8000754:	2206      	movs	r2, #6
 8000756:	701a      	strb	r2, [r3, #0]
 8000758:	4b6b      	ldr	r3, [pc, #428]	; (8000908 <HAL_UART_RxCpltCallback+0x378>)
 800075a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	e01f      	b.n	80007a2 <HAL_UART_RxCpltCallback+0x212>
  		case '7': win_score = 7; tracker = NULL_SCREEN; break;
 8000762:	4b68      	ldr	r3, [pc, #416]	; (8000904 <HAL_UART_RxCpltCallback+0x374>)
 8000764:	2207      	movs	r2, #7
 8000766:	701a      	strb	r2, [r3, #0]
 8000768:	4b67      	ldr	r3, [pc, #412]	; (8000908 <HAL_UART_RxCpltCallback+0x378>)
 800076a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	e017      	b.n	80007a2 <HAL_UART_RxCpltCallback+0x212>
  		case '8': win_score = 8; tracker = NULL_SCREEN; break;
 8000772:	4b64      	ldr	r3, [pc, #400]	; (8000904 <HAL_UART_RxCpltCallback+0x374>)
 8000774:	2208      	movs	r2, #8
 8000776:	701a      	strb	r2, [r3, #0]
 8000778:	4b63      	ldr	r3, [pc, #396]	; (8000908 <HAL_UART_RxCpltCallback+0x378>)
 800077a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	e00f      	b.n	80007a2 <HAL_UART_RxCpltCallback+0x212>
  		case '9': win_score = 9; tracker = NULL_SCREEN; break;
 8000782:	4b60      	ldr	r3, [pc, #384]	; (8000904 <HAL_UART_RxCpltCallback+0x374>)
 8000784:	2209      	movs	r2, #9
 8000786:	701a      	strb	r2, [r3, #0]
 8000788:	4b5f      	ldr	r3, [pc, #380]	; (8000908 <HAL_UART_RxCpltCallback+0x378>)
 800078a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800078e:	601a      	str	r2, [r3, #0]
 8000790:	e007      	b.n	80007a2 <HAL_UART_RxCpltCallback+0x212>
  		case '0': win_score = 10; tracker = NULL_SCREEN; break;
 8000792:	4b5c      	ldr	r3, [pc, #368]	; (8000904 <HAL_UART_RxCpltCallback+0x374>)
 8000794:	220a      	movs	r2, #10
 8000796:	701a      	strb	r2, [r3, #0]
 8000798:	4b5b      	ldr	r3, [pc, #364]	; (8000908 <HAL_UART_RxCpltCallback+0x378>)
 800079a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	bf00      	nop
  		}
  		break;
 80007a2:	e131      	b.n	8000a08 <HAL_UART_RxCpltCallback+0x478>
  	case GAME_SCREEN:
  		// Any key would trigger this
  		isGameStart = 1;
 80007a4:	4b54      	ldr	r3, [pc, #336]	; (80008f8 <HAL_UART_RxCpltCallback+0x368>)
 80007a6:	2201      	movs	r2, #1
 80007a8:	701a      	strb	r2, [r3, #0]
  		switch(rxData[0]) {
 80007aa:	4b52      	ldr	r3, [pc, #328]	; (80008f4 <HAL_UART_RxCpltCallback+0x364>)
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	3b41      	subs	r3, #65	; 0x41
 80007b0:	2b37      	cmp	r3, #55	; 0x37
 80007b2:	f200 812b 	bhi.w	8000a0c <HAL_UART_RxCpltCallback+0x47c>
 80007b6:	a201      	add	r2, pc, #4	; (adr r2, 80007bc <HAL_UART_RxCpltCallback+0x22c>)
 80007b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007bc:	0800089d 	.word	0x0800089d
 80007c0:	080008ad 	.word	0x080008ad
 80007c4:	08000915 	.word	0x08000915
 80007c8:	08000a0d 	.word	0x08000a0d
 80007cc:	08000a0d 	.word	0x08000a0d
 80007d0:	08000a0d 	.word	0x08000a0d
 80007d4:	08000a0d 	.word	0x08000a0d
 80007d8:	08000a0d 	.word	0x08000a0d
 80007dc:	08000a0d 	.word	0x08000a0d
 80007e0:	08000a0d 	.word	0x08000a0d
 80007e4:	08000a0d 	.word	0x08000a0d
 80007e8:	08000a0d 	.word	0x08000a0d
 80007ec:	08000a0d 	.word	0x08000a0d
 80007f0:	08000a0d 	.word	0x08000a0d
 80007f4:	08000a0d 	.word	0x08000a0d
 80007f8:	08000a0d 	.word	0x08000a0d
 80007fc:	08000a0d 	.word	0x08000a0d
 8000800:	08000a0d 	.word	0x08000a0d
 8000804:	08000a0d 	.word	0x08000a0d
 8000808:	08000a0d 	.word	0x08000a0d
 800080c:	08000a0d 	.word	0x08000a0d
 8000810:	08000a0d 	.word	0x08000a0d
 8000814:	08000a0d 	.word	0x08000a0d
 8000818:	080008dd 	.word	0x080008dd
 800081c:	08000a0d 	.word	0x08000a0d
 8000820:	08000a0d 	.word	0x08000a0d
 8000824:	08000a0d 	.word	0x08000a0d
 8000828:	08000a0d 	.word	0x08000a0d
 800082c:	08000a0d 	.word	0x08000a0d
 8000830:	08000a0d 	.word	0x08000a0d
 8000834:	08000a0d 	.word	0x08000a0d
 8000838:	08000a0d 	.word	0x08000a0d
 800083c:	08000a0d 	.word	0x08000a0d
 8000840:	08000a0d 	.word	0x08000a0d
 8000844:	08000915 	.word	0x08000915
 8000848:	08000a0d 	.word	0x08000a0d
 800084c:	08000a0d 	.word	0x08000a0d
 8000850:	08000a0d 	.word	0x08000a0d
 8000854:	08000a0d 	.word	0x08000a0d
 8000858:	08000a0d 	.word	0x08000a0d
 800085c:	08000a0d 	.word	0x08000a0d
 8000860:	08000a0d 	.word	0x08000a0d
 8000864:	08000a0d 	.word	0x08000a0d
 8000868:	08000a0d 	.word	0x08000a0d
 800086c:	08000a0d 	.word	0x08000a0d
 8000870:	08000a0d 	.word	0x08000a0d
 8000874:	08000a0d 	.word	0x08000a0d
 8000878:	08000a0d 	.word	0x08000a0d
 800087c:	08000a0d 	.word	0x08000a0d
 8000880:	08000a0d 	.word	0x08000a0d
 8000884:	080008cd 	.word	0x080008cd
 8000888:	08000a0d 	.word	0x08000a0d
 800088c:	08000a0d 	.word	0x08000a0d
 8000890:	08000a0d 	.word	0x08000a0d
 8000894:	080008bd 	.word	0x080008bd
 8000898:	080008dd 	.word	0x080008dd
		case 'A':
			setPaddlePostion(&paddle1, paddle1.posY-PADDLE_SPEED);
 800089c:	4b1b      	ldr	r3, [pc, #108]	; (800090c <HAL_UART_RxCpltCallback+0x37c>)
 800089e:	691b      	ldr	r3, [r3, #16]
 80008a0:	3b02      	subs	r3, #2
 80008a2:	4619      	mov	r1, r3
 80008a4:	4819      	ldr	r0, [pc, #100]	; (800090c <HAL_UART_RxCpltCallback+0x37c>)
 80008a6:	f000 fe37 	bl	8001518 <setPaddlePostion>
			break;
 80008aa:	e03e      	b.n	800092a <HAL_UART_RxCpltCallback+0x39a>
		case 'B':
			setPaddlePostion(&paddle1, paddle1.posY+PADDLE_SPEED);
 80008ac:	4b17      	ldr	r3, [pc, #92]	; (800090c <HAL_UART_RxCpltCallback+0x37c>)
 80008ae:	691b      	ldr	r3, [r3, #16]
 80008b0:	3302      	adds	r3, #2
 80008b2:	4619      	mov	r1, r3
 80008b4:	4815      	ldr	r0, [pc, #84]	; (800090c <HAL_UART_RxCpltCallback+0x37c>)
 80008b6:	f000 fe2f 	bl	8001518 <setPaddlePostion>
			break;
 80008ba:	e036      	b.n	800092a <HAL_UART_RxCpltCallback+0x39a>
		case 'w':
			setPaddlePostion(&paddle2, paddle2.posY-PADDLE_SPEED);
 80008bc:	4b14      	ldr	r3, [pc, #80]	; (8000910 <HAL_UART_RxCpltCallback+0x380>)
 80008be:	691b      	ldr	r3, [r3, #16]
 80008c0:	3b02      	subs	r3, #2
 80008c2:	4619      	mov	r1, r3
 80008c4:	4812      	ldr	r0, [pc, #72]	; (8000910 <HAL_UART_RxCpltCallback+0x380>)
 80008c6:	f000 fe27 	bl	8001518 <setPaddlePostion>
			break;
 80008ca:	e02e      	b.n	800092a <HAL_UART_RxCpltCallback+0x39a>
		case 's':
			setPaddlePostion(&paddle2, paddle2.posY+PADDLE_SPEED);
 80008cc:	4b10      	ldr	r3, [pc, #64]	; (8000910 <HAL_UART_RxCpltCallback+0x380>)
 80008ce:	691b      	ldr	r3, [r3, #16]
 80008d0:	3302      	adds	r3, #2
 80008d2:	4619      	mov	r1, r3
 80008d4:	480e      	ldr	r0, [pc, #56]	; (8000910 <HAL_UART_RxCpltCallback+0x380>)
 80008d6:	f000 fe1f 	bl	8001518 <setPaddlePostion>
			break;
 80008da:	e026      	b.n	800092a <HAL_UART_RxCpltCallback+0x39a>
		case 'x': case 'X':
			state = START_SCREEN;
 80008dc:	4b04      	ldr	r3, [pc, #16]	; (80008f0 <HAL_UART_RxCpltCallback+0x360>)
 80008de:	2200      	movs	r2, #0
 80008e0:	601a      	str	r2, [r3, #0]

			resetPosition();
 80008e2:	f000 fdcf 	bl	8001484 <resetPosition>
			resetScore();
 80008e6:	f000 fdf5 	bl	80014d4 <resetScore>
			break;
 80008ea:	e01e      	b.n	800092a <HAL_UART_RxCpltCallback+0x39a>
 80008ec:	40020000 	.word	0x40020000
 80008f0:	200000d8 	.word	0x200000d8
 80008f4:	200000f4 	.word	0x200000f4
 80008f8:	200000e4 	.word	0x200000e4
 80008fc:	200000e5 	.word	0x200000e5
 8000900:	200000e6 	.word	0x200000e6
 8000904:	20000004 	.word	0x20000004
 8000908:	20000000 	.word	0x20000000
 800090c:	20000020 	.word	0x20000020
 8000910:	20000034 	.word	0x20000034
		case 'c': case 'C':
			enableRandom = 1;
 8000914:	4b43      	ldr	r3, [pc, #268]	; (8000a24 <HAL_UART_RxCpltCallback+0x494>)
 8000916:	2201      	movs	r2, #1
 8000918:	701a      	strb	r2, [r3, #0]
			set_cursor(65, 24);
 800091a:	2118      	movs	r1, #24
 800091c:	2041      	movs	r0, #65	; 0x41
 800091e:	f000 fe5b 	bl	80015d8 <set_cursor>
			print("Random mode ON!");
 8000922:	4841      	ldr	r0, [pc, #260]	; (8000a28 <HAL_UART_RxCpltCallback+0x498>)
 8000924:	f000 fe3c 	bl	80015a0 <print>
			break;
 8000928:	bf00      	nop
		}
  		break;
 800092a:	e06f      	b.n	8000a0c <HAL_UART_RxCpltCallback+0x47c>
  	case END_SCREEN:
  		switch(rxData[0]) {
 800092c:	4b3f      	ldr	r3, [pc, #252]	; (8000a2c <HAL_UART_RxCpltCallback+0x49c>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	3b52      	subs	r3, #82	; 0x52
 8000932:	2b26      	cmp	r3, #38	; 0x26
 8000934:	d86c      	bhi.n	8000a10 <HAL_UART_RxCpltCallback+0x480>
 8000936:	a201      	add	r2, pc, #4	; (adr r2, 800093c <HAL_UART_RxCpltCallback+0x3ac>)
 8000938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800093c:	080009d9 	.word	0x080009d9
 8000940:	08000a11 	.word	0x08000a11
 8000944:	08000a11 	.word	0x08000a11
 8000948:	08000a11 	.word	0x08000a11
 800094c:	08000a11 	.word	0x08000a11
 8000950:	08000a11 	.word	0x08000a11
 8000954:	080009ff 	.word	0x080009ff
 8000958:	08000a11 	.word	0x08000a11
 800095c:	08000a11 	.word	0x08000a11
 8000960:	08000a11 	.word	0x08000a11
 8000964:	08000a11 	.word	0x08000a11
 8000968:	08000a11 	.word	0x08000a11
 800096c:	08000a11 	.word	0x08000a11
 8000970:	08000a11 	.word	0x08000a11
 8000974:	08000a11 	.word	0x08000a11
 8000978:	08000a11 	.word	0x08000a11
 800097c:	08000a11 	.word	0x08000a11
 8000980:	08000a11 	.word	0x08000a11
 8000984:	08000a11 	.word	0x08000a11
 8000988:	08000a11 	.word	0x08000a11
 800098c:	08000a11 	.word	0x08000a11
 8000990:	08000a11 	.word	0x08000a11
 8000994:	08000a11 	.word	0x08000a11
 8000998:	08000a11 	.word	0x08000a11
 800099c:	08000a11 	.word	0x08000a11
 80009a0:	08000a11 	.word	0x08000a11
 80009a4:	08000a11 	.word	0x08000a11
 80009a8:	08000a11 	.word	0x08000a11
 80009ac:	08000a11 	.word	0x08000a11
 80009b0:	08000a11 	.word	0x08000a11
 80009b4:	08000a11 	.word	0x08000a11
 80009b8:	08000a11 	.word	0x08000a11
 80009bc:	080009d9 	.word	0x080009d9
 80009c0:	08000a11 	.word	0x08000a11
 80009c4:	08000a11 	.word	0x08000a11
 80009c8:	08000a11 	.word	0x08000a11
 80009cc:	08000a11 	.word	0x08000a11
 80009d0:	08000a11 	.word	0x08000a11
 80009d4:	080009ff 	.word	0x080009ff
  		case 'r': case 'R':
  			state = GAME_SCREEN;
 80009d8:	4b15      	ldr	r3, [pc, #84]	; (8000a30 <HAL_UART_RxCpltCallback+0x4a0>)
 80009da:	2201      	movs	r2, #1
 80009dc:	601a      	str	r2, [r3, #0]

			// Redraw screen to Start New Game
			resetPosition();
 80009de:	f000 fd51 	bl	8001484 <resetPosition>
			resetScore();
 80009e2:	f000 fd77 	bl	80014d4 <resetScore>
			isGameStart = 0;
 80009e6:	4b13      	ldr	r3, [pc, #76]	; (8000a34 <HAL_UART_RxCpltCallback+0x4a4>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	701a      	strb	r2, [r3, #0]
			isGameEnd = 0;
 80009ec:	4b12      	ldr	r3, [pc, #72]	; (8000a38 <HAL_UART_RxCpltCallback+0x4a8>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	701a      	strb	r2, [r3, #0]
			enableRandom = 0;
 80009f2:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <HAL_UART_RxCpltCallback+0x494>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	701a      	strb	r2, [r3, #0]
			initial();
 80009f8:	f000 fa8c 	bl	8000f14 <initial>
  			break;
 80009fc:	e003      	b.n	8000a06 <HAL_UART_RxCpltCallback+0x476>
  		case 'x': case 'X':
  			state = START_SCREEN;
 80009fe:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <HAL_UART_RxCpltCallback+0x4a0>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
  			break;
 8000a04:	bf00      	nop
  		}
  		break;
 8000a06:	e003      	b.n	8000a10 <HAL_UART_RxCpltCallback+0x480>
  		break;
 8000a08:	bf00      	nop
 8000a0a:	e002      	b.n	8000a12 <HAL_UART_RxCpltCallback+0x482>
  		break;
 8000a0c:	bf00      	nop
 8000a0e:	e000      	b.n	8000a12 <HAL_UART_RxCpltCallback+0x482>
  		break;
 8000a10:	bf00      	nop
  	}


  /* set up to receive another char */
  HAL_UART_Receive_IT(&huart2, rxData, 1);
 8000a12:	2201      	movs	r2, #1
 8000a14:	4905      	ldr	r1, [pc, #20]	; (8000a2c <HAL_UART_RxCpltCallback+0x49c>)
 8000a16:	4809      	ldr	r0, [pc, #36]	; (8000a3c <HAL_UART_RxCpltCallback+0x4ac>)
 8000a18:	f003 fa7c 	bl	8003f14 <HAL_UART_Receive_IT>
}
 8000a1c:	bf00      	nop
 8000a1e:	3708      	adds	r7, #8
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	200000e6 	.word	0x200000e6
 8000a28:	08005500 	.word	0x08005500
 8000a2c:	200000f4 	.word	0x200000f4
 8000a30:	200000d8 	.word	0x200000d8
 8000a34:	200000e4 	.word	0x200000e4
 8000a38:	200000e5 	.word	0x200000e5
 8000a3c:	20000140 	.word	0x20000140

08000a40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a44:	f001 fb2a 	bl	800209c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a48:	f000 f81a 	bl	8000a80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a4c:	f000 f924 	bl	8000c98 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a50:	f000 f8f8 	bl	8000c44 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000a54:	f000 f87e 	bl	8000b54 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000a58:	2100      	movs	r1, #0
 8000a5a:	4806      	ldr	r0, [pc, #24]	; (8000a74 <main+0x34>)
 8000a5c:	f002 fb46 	bl	80030ec <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 8000a60:	4804      	ldr	r0, [pc, #16]	; (8000a74 <main+0x34>)
 8000a62:	f002 faea 	bl	800303a <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart2, (uint8_t*)rxData, 1);
 8000a66:	2201      	movs	r2, #1
 8000a68:	4903      	ldr	r1, [pc, #12]	; (8000a78 <main+0x38>)
 8000a6a:	4804      	ldr	r0, [pc, #16]	; (8000a7c <main+0x3c>)
 8000a6c:	f003 fa52 	bl	8003f14 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8000a70:	e7fe      	b.n	8000a70 <main+0x30>
 8000a72:	bf00      	nop
 8000a74:	20000100 	.word	0x20000100
 8000a78:	200000f4 	.word	0x200000f4
 8000a7c:	20000140 	.word	0x20000140

08000a80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b094      	sub	sp, #80	; 0x50
 8000a84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a86:	f107 0320 	add.w	r3, r7, #32
 8000a8a:	2230      	movs	r2, #48	; 0x30
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f004 f8bc 	bl	8004c0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a94:	f107 030c 	add.w	r3, r7, #12
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	605a      	str	r2, [r3, #4]
 8000a9e:	609a      	str	r2, [r3, #8]
 8000aa0:	60da      	str	r2, [r3, #12]
 8000aa2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	60bb      	str	r3, [r7, #8]
 8000aa8:	4b28      	ldr	r3, [pc, #160]	; (8000b4c <SystemClock_Config+0xcc>)
 8000aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aac:	4a27      	ldr	r2, [pc, #156]	; (8000b4c <SystemClock_Config+0xcc>)
 8000aae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ab2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab4:	4b25      	ldr	r3, [pc, #148]	; (8000b4c <SystemClock_Config+0xcc>)
 8000ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000abc:	60bb      	str	r3, [r7, #8]
 8000abe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	607b      	str	r3, [r7, #4]
 8000ac4:	4b22      	ldr	r3, [pc, #136]	; (8000b50 <SystemClock_Config+0xd0>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a21      	ldr	r2, [pc, #132]	; (8000b50 <SystemClock_Config+0xd0>)
 8000aca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ace:	6013      	str	r3, [r2, #0]
 8000ad0:	4b1f      	ldr	r3, [pc, #124]	; (8000b50 <SystemClock_Config+0xd0>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ad8:	607b      	str	r3, [r7, #4]
 8000ada:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000adc:	2302      	movs	r3, #2
 8000ade:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ae4:	2310      	movs	r3, #16
 8000ae6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000aec:	2300      	movs	r3, #0
 8000aee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000af0:	2310      	movs	r3, #16
 8000af2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000af4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000af8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000afa:	2304      	movs	r3, #4
 8000afc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000afe:	2304      	movs	r3, #4
 8000b00:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b02:	f107 0320 	add.w	r3, r7, #32
 8000b06:	4618      	mov	r0, r3
 8000b08:	f001 fe0a 	bl	8002720 <HAL_RCC_OscConfig>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000b12:	f001 f933 	bl	8001d7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b16:	230f      	movs	r3, #15
 8000b18:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b26:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b2c:	f107 030c 	add.w	r3, r7, #12
 8000b30:	2102      	movs	r1, #2
 8000b32:	4618      	mov	r0, r3
 8000b34:	f002 f864 	bl	8002c00 <HAL_RCC_ClockConfig>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000b3e:	f001 f91d 	bl	8001d7c <Error_Handler>
  }
}
 8000b42:	bf00      	nop
 8000b44:	3750      	adds	r7, #80	; 0x50
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40023800 	.word	0x40023800
 8000b50:	40007000 	.word	0x40007000

08000b54 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08e      	sub	sp, #56	; 0x38
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000b5e:	2200      	movs	r2, #0
 8000b60:	601a      	str	r2, [r3, #0]
 8000b62:	605a      	str	r2, [r3, #4]
 8000b64:	609a      	str	r2, [r3, #8]
 8000b66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b68:	f107 0320 	add.w	r3, r7, #32
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b72:	1d3b      	adds	r3, r7, #4
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
 8000b7e:	611a      	str	r2, [r3, #16]
 8000b80:	615a      	str	r2, [r3, #20]
 8000b82:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b84:	4b2d      	ldr	r3, [pc, #180]	; (8000c3c <MX_TIM3_Init+0xe8>)
 8000b86:	4a2e      	ldr	r2, [pc, #184]	; (8000c40 <MX_TIM3_Init+0xec>)
 8000b88:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 3500;
 8000b8a:	4b2c      	ldr	r3, [pc, #176]	; (8000c3c <MX_TIM3_Init+0xe8>)
 8000b8c:	f640 52ac 	movw	r2, #3500	; 0xdac
 8000b90:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b92:	4b2a      	ldr	r3, [pc, #168]	; (8000c3c <MX_TIM3_Init+0xe8>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8000b98:	4b28      	ldr	r3, [pc, #160]	; (8000c3c <MX_TIM3_Init+0xe8>)
 8000b9a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b9e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ba0:	4b26      	ldr	r3, [pc, #152]	; (8000c3c <MX_TIM3_Init+0xe8>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ba6:	4b25      	ldr	r3, [pc, #148]	; (8000c3c <MX_TIM3_Init+0xe8>)
 8000ba8:	2280      	movs	r2, #128	; 0x80
 8000baa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000bac:	4823      	ldr	r0, [pc, #140]	; (8000c3c <MX_TIM3_Init+0xe8>)
 8000bae:	f002 fa19 	bl	8002fe4 <HAL_TIM_Base_Init>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000bb8:	f001 f8e0 	bl	8001d7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bc0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000bc2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	481c      	ldr	r0, [pc, #112]	; (8000c3c <MX_TIM3_Init+0xe8>)
 8000bca:	f002 fc8f 	bl	80034ec <HAL_TIM_ConfigClockSource>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000bd4:	f001 f8d2 	bl	8001d7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000bd8:	4818      	ldr	r0, [pc, #96]	; (8000c3c <MX_TIM3_Init+0xe8>)
 8000bda:	f002 fa52 	bl	8003082 <HAL_TIM_PWM_Init>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000be4:	f001 f8ca 	bl	8001d7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000be8:	2300      	movs	r3, #0
 8000bea:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bec:	2300      	movs	r3, #0
 8000bee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000bf0:	f107 0320 	add.w	r3, r7, #32
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4811      	ldr	r0, [pc, #68]	; (8000c3c <MX_TIM3_Init+0xe8>)
 8000bf8:	f003 f824 	bl	8003c44 <HAL_TIMEx_MasterConfigSynchronization>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000c02:	f001 f8bb 	bl	8001d7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c06:	2360      	movs	r3, #96	; 0x60
 8000c08:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c12:	2300      	movs	r3, #0
 8000c14:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c16:	1d3b      	adds	r3, r7, #4
 8000c18:	2200      	movs	r2, #0
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4807      	ldr	r0, [pc, #28]	; (8000c3c <MX_TIM3_Init+0xe8>)
 8000c1e:	f002 fb9f 	bl	8003360 <HAL_TIM_PWM_ConfigChannel>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000c28:	f001 f8a8 	bl	8001d7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000c2c:	4803      	ldr	r0, [pc, #12]	; (8000c3c <MX_TIM3_Init+0xe8>)
 8000c2e:	f001 f8fd 	bl	8001e2c <HAL_TIM_MspPostInit>

}
 8000c32:	bf00      	nop
 8000c34:	3738      	adds	r7, #56	; 0x38
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	20000100 	.word	0x20000100
 8000c40:	40000400 	.word	0x40000400

08000c44 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c48:	4b11      	ldr	r3, [pc, #68]	; (8000c90 <MX_USART2_UART_Init+0x4c>)
 8000c4a:	4a12      	ldr	r2, [pc, #72]	; (8000c94 <MX_USART2_UART_Init+0x50>)
 8000c4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c4e:	4b10      	ldr	r3, [pc, #64]	; (8000c90 <MX_USART2_UART_Init+0x4c>)
 8000c50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c56:	4b0e      	ldr	r3, [pc, #56]	; (8000c90 <MX_USART2_UART_Init+0x4c>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c5c:	4b0c      	ldr	r3, [pc, #48]	; (8000c90 <MX_USART2_UART_Init+0x4c>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c62:	4b0b      	ldr	r3, [pc, #44]	; (8000c90 <MX_USART2_UART_Init+0x4c>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c68:	4b09      	ldr	r3, [pc, #36]	; (8000c90 <MX_USART2_UART_Init+0x4c>)
 8000c6a:	220c      	movs	r2, #12
 8000c6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c6e:	4b08      	ldr	r3, [pc, #32]	; (8000c90 <MX_USART2_UART_Init+0x4c>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c74:	4b06      	ldr	r3, [pc, #24]	; (8000c90 <MX_USART2_UART_Init+0x4c>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c7a:	4805      	ldr	r0, [pc, #20]	; (8000c90 <MX_USART2_UART_Init+0x4c>)
 8000c7c:	f003 f864 	bl	8003d48 <HAL_UART_Init>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c86:	f001 f879 	bl	8001d7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	20000140 	.word	0x20000140
 8000c94:	40004400 	.word	0x40004400

08000c98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b08a      	sub	sp, #40	; 0x28
 8000c9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9e:	f107 0314 	add.w	r3, r7, #20
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]
 8000ca6:	605a      	str	r2, [r3, #4]
 8000ca8:	609a      	str	r2, [r3, #8]
 8000caa:	60da      	str	r2, [r3, #12]
 8000cac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	613b      	str	r3, [r7, #16]
 8000cb2:	4b2d      	ldr	r3, [pc, #180]	; (8000d68 <MX_GPIO_Init+0xd0>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	4a2c      	ldr	r2, [pc, #176]	; (8000d68 <MX_GPIO_Init+0xd0>)
 8000cb8:	f043 0304 	orr.w	r3, r3, #4
 8000cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cbe:	4b2a      	ldr	r3, [pc, #168]	; (8000d68 <MX_GPIO_Init+0xd0>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	f003 0304 	and.w	r3, r3, #4
 8000cc6:	613b      	str	r3, [r7, #16]
 8000cc8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	60fb      	str	r3, [r7, #12]
 8000cce:	4b26      	ldr	r3, [pc, #152]	; (8000d68 <MX_GPIO_Init+0xd0>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	4a25      	ldr	r2, [pc, #148]	; (8000d68 <MX_GPIO_Init+0xd0>)
 8000cd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cda:	4b23      	ldr	r3, [pc, #140]	; (8000d68 <MX_GPIO_Init+0xd0>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ce2:	60fb      	str	r3, [r7, #12]
 8000ce4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60bb      	str	r3, [r7, #8]
 8000cea:	4b1f      	ldr	r3, [pc, #124]	; (8000d68 <MX_GPIO_Init+0xd0>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	4a1e      	ldr	r2, [pc, #120]	; (8000d68 <MX_GPIO_Init+0xd0>)
 8000cf0:	f043 0301 	orr.w	r3, r3, #1
 8000cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf6:	4b1c      	ldr	r3, [pc, #112]	; (8000d68 <MX_GPIO_Init+0xd0>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	60bb      	str	r3, [r7, #8]
 8000d00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	607b      	str	r3, [r7, #4]
 8000d06:	4b18      	ldr	r3, [pc, #96]	; (8000d68 <MX_GPIO_Init+0xd0>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	4a17      	ldr	r2, [pc, #92]	; (8000d68 <MX_GPIO_Init+0xd0>)
 8000d0c:	f043 0302 	orr.w	r3, r3, #2
 8000d10:	6313      	str	r3, [r2, #48]	; 0x30
 8000d12:	4b15      	ldr	r3, [pc, #84]	; (8000d68 <MX_GPIO_Init+0xd0>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	f003 0302 	and.w	r3, r3, #2
 8000d1a:	607b      	str	r3, [r7, #4]
 8000d1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	2120      	movs	r1, #32
 8000d22:	4812      	ldr	r0, [pc, #72]	; (8000d6c <MX_GPIO_Init+0xd4>)
 8000d24:	f001 fce2 	bl	80026ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d2e:	4b10      	ldr	r3, [pc, #64]	; (8000d70 <MX_GPIO_Init+0xd8>)
 8000d30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d36:	f107 0314 	add.w	r3, r7, #20
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	480d      	ldr	r0, [pc, #52]	; (8000d74 <MX_GPIO_Init+0xdc>)
 8000d3e:	f001 fb53 	bl	80023e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d42:	2320      	movs	r3, #32
 8000d44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d46:	2301      	movs	r3, #1
 8000d48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d52:	f107 0314 	add.w	r3, r7, #20
 8000d56:	4619      	mov	r1, r3
 8000d58:	4804      	ldr	r0, [pc, #16]	; (8000d6c <MX_GPIO_Init+0xd4>)
 8000d5a:	f001 fb45 	bl	80023e8 <HAL_GPIO_Init>

}
 8000d5e:	bf00      	nop
 8000d60:	3728      	adds	r7, #40	; 0x28
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	40023800 	.word	0x40023800
 8000d6c:	40020000 	.word	0x40020000
 8000d70:	10210000 	.word	0x10210000
 8000d74:	40020800 	.word	0x40020800

08000d78 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]

	switch (state) {
 8000d80:	4b1c      	ldr	r3, [pc, #112]	; (8000df4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	d00b      	beq.n	8000da0 <HAL_TIM_PeriodElapsedCallback+0x28>
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	dc02      	bgt.n	8000d92 <HAL_TIM_PeriodElapsedCallback+0x1a>
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d004      	beq.n	8000d9a <HAL_TIM_PeriodElapsedCallback+0x22>
 8000d90:	e01d      	b.n	8000dce <HAL_TIM_PeriodElapsedCallback+0x56>
 8000d92:	2b0a      	cmp	r3, #10
 8000d94:	d017      	beq.n	8000dc6 <HAL_TIM_PeriodElapsedCallback+0x4e>
 8000d96:	2b63      	cmp	r3, #99	; 0x63
		break;
	case END_SCREEN:
		gameover();
		break;
	case CREDIT_SCREEN:
		break;
 8000d98:	e019      	b.n	8000dce <HAL_TIM_PeriodElapsedCallback+0x56>
		welcome();
 8000d9a:	f000 f88b 	bl	8000eb4 <welcome>
		break;
 8000d9e:	e016      	b.n	8000dce <HAL_TIM_PeriodElapsedCallback+0x56>
		if (isGameStart) {
 8000da0:	4b15      	ldr	r3, [pc, #84]	; (8000df8 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d011      	beq.n	8000dcc <HAL_TIM_PeriodElapsedCallback+0x54>
			if (!isGameEnd) {
 8000da8:	4b14      	ldr	r3, [pc, #80]	; (8000dfc <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d104      	bne.n	8000dba <HAL_TIM_PeriodElapsedCallback+0x42>
				tick();
 8000db0:	f000 f82a 	bl	8000e08 <tick>
				render();
 8000db4:	f000 f868 	bl	8000e88 <render>
		break;
 8000db8:	e008      	b.n	8000dcc <HAL_TIM_PeriodElapsedCallback+0x54>
				state = END_SCREEN;
 8000dba:	4b0e      	ldr	r3, [pc, #56]	; (8000df4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000dbc:	220a      	movs	r2, #10
 8000dbe:	601a      	str	r2, [r3, #0]
				clrscr();
 8000dc0:	f000 fc30 	bl	8001624 <clrscr>
		break;
 8000dc4:	e002      	b.n	8000dcc <HAL_TIM_PeriodElapsedCallback+0x54>
		gameover();
 8000dc6:	f000 f8d1 	bl	8000f6c <gameover>
		break;
 8000dca:	e000      	b.n	8000dce <HAL_TIM_PeriodElapsedCallback+0x56>
		break;
 8000dcc:	bf00      	nop
	}

	// Change tracker point
	if (tracker != state)
 8000dce:	4b0c      	ldr	r3, [pc, #48]	; (8000e00 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	4b08      	ldr	r3, [pc, #32]	; (8000df4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	429a      	cmp	r2, r3
 8000dd8:	d003      	beq.n	8000de2 <HAL_TIM_PeriodElapsedCallback+0x6a>
		tracker = state;
 8000dda:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a08      	ldr	r2, [pc, #32]	; (8000e00 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000de0:	6013      	str	r3, [r2, #0]

	// Toggle LED
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 8000de2:	2200      	movs	r2, #0
 8000de4:	2120      	movs	r1, #32
 8000de6:	4807      	ldr	r0, [pc, #28]	; (8000e04 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000de8:	f001 fc80 	bl	80026ec <HAL_GPIO_WritePin>
}
 8000dec:	bf00      	nop
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	200000d8 	.word	0x200000d8
 8000df8:	200000e4 	.word	0x200000e4
 8000dfc:	200000e5 	.word	0x200000e5
 8000e00:	20000000 	.word	0x20000000
 8000e04:	40020000 	.word	0x40020000

08000e08 <tick>:
const uint8_t bst = 93;
const uint8_t bed = 226;
uint8_t bc = 93;

// Tick()
void tick() {
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
	// Update Ball Position
	updateBallPosition(&ball);
 8000e0c:	4818      	ldr	r0, [pc, #96]	; (8000e70 <tick+0x68>)
 8000e0e:	f000 fa49 	bl	80012a4 <updateBallPosition>

	// Score's
	switch (checkIfScore()) {
 8000e12:	f000 f8c5 	bl	8000fa0 <checkIfScore>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d002      	beq.n	8000e22 <tick+0x1a>
 8000e1c:	2b02      	cmp	r3, #2
 8000e1e:	d008      	beq.n	8000e32 <tick+0x2a>
		score2++;
		reset();
		break;
	default:
		// Continue;
		break;
 8000e20:	e00f      	b.n	8000e42 <tick+0x3a>
		score1++;
 8000e22:	4b14      	ldr	r3, [pc, #80]	; (8000e74 <tick+0x6c>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	3301      	adds	r3, #1
 8000e28:	4a12      	ldr	r2, [pc, #72]	; (8000e74 <tick+0x6c>)
 8000e2a:	6013      	str	r3, [r2, #0]
		reset();
 8000e2c:	f000 fb64 	bl	80014f8 <reset>
		break;
 8000e30:	e007      	b.n	8000e42 <tick+0x3a>
		score2++;
 8000e32:	4b11      	ldr	r3, [pc, #68]	; (8000e78 <tick+0x70>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	3301      	adds	r3, #1
 8000e38:	4a0f      	ldr	r2, [pc, #60]	; (8000e78 <tick+0x70>)
 8000e3a:	6013      	str	r3, [r2, #0]
		reset();
 8000e3c:	f000 fb5c 	bl	80014f8 <reset>
		break;
 8000e40:	bf00      	nop
	}

	// Game have ended
	if (score1 >= win_score || score2 >= win_score) {
 8000e42:	4b0e      	ldr	r3, [pc, #56]	; (8000e7c <tick+0x74>)
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	461a      	mov	r2, r3
 8000e48:	4b0a      	ldr	r3, [pc, #40]	; (8000e74 <tick+0x6c>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	dd06      	ble.n	8000e5e <tick+0x56>
 8000e50:	4b0a      	ldr	r3, [pc, #40]	; (8000e7c <tick+0x74>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	461a      	mov	r2, r3
 8000e56:	4b08      	ldr	r3, [pc, #32]	; (8000e78 <tick+0x70>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	dc05      	bgt.n	8000e6a <tick+0x62>
		isGameEnd = 1;
 8000e5e:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <tick+0x78>)
 8000e60:	2201      	movs	r2, #1
 8000e62:	701a      	strb	r2, [r3, #0]
		isGameStart = 1;
 8000e64:	4b07      	ldr	r3, [pc, #28]	; (8000e84 <tick+0x7c>)
 8000e66:	2201      	movs	r2, #1
 8000e68:	701a      	strb	r2, [r3, #0]
	}
}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	20000008 	.word	0x20000008
 8000e74:	200000dc 	.word	0x200000dc
 8000e78:	200000e0 	.word	0x200000e0
 8000e7c:	20000004 	.word	0x20000004
 8000e80:	200000e5 	.word	0x200000e5
 8000e84:	200000e4 	.word	0x200000e4

08000e88 <render>:

// Update()
void render() {
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
	drawPaddle(&paddle1, 0);
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	4806      	ldr	r0, [pc, #24]	; (8000ea8 <render+0x20>)
 8000e90:	f000 f8fe 	bl	8001090 <drawPaddle>
	drawPaddle(&paddle2, 0);
 8000e94:	2100      	movs	r1, #0
 8000e96:	4805      	ldr	r0, [pc, #20]	; (8000eac <render+0x24>)
 8000e98:	f000 f8fa 	bl	8001090 <drawPaddle>
	drawBall(&ball);
 8000e9c:	4804      	ldr	r0, [pc, #16]	; (8000eb0 <render+0x28>)
 8000e9e:	f000 f99d 	bl	80011dc <drawBall>
}
 8000ea2:	bf00      	nop
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	20000020 	.word	0x20000020
 8000eac:	20000034 	.word	0x20000034
 8000eb0:	20000008 	.word	0x20000008

08000eb4 <welcome>:

// Complex &
// Screens
void welcome() {
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
	if (tracker == state) return;
 8000eba:	4b13      	ldr	r3, [pc, #76]	; (8000f08 <welcome+0x54>)
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	4b13      	ldr	r3, [pc, #76]	; (8000f0c <welcome+0x58>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	429a      	cmp	r2, r3
 8000ec4:	d01c      	beq.n	8000f00 <welcome+0x4c>

	// Draw Game Screen for being background
	initial();
 8000ec6:	f000 f825 	bl	8000f14 <initial>

	const char buffer[] = "\033[?25l"; // Invisible Cursor
 8000eca:	4a11      	ldr	r2, [pc, #68]	; (8000f10 <welcome+0x5c>)
 8000ecc:	463b      	mov	r3, r7
 8000ece:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ed2:	6018      	str	r0, [r3, #0]
 8000ed4:	3304      	adds	r3, #4
 8000ed6:	8019      	strh	r1, [r3, #0]
 8000ed8:	3302      	adds	r3, #2
 8000eda:	0c0a      	lsrs	r2, r1, #16
 8000edc:	701a      	strb	r2, [r3, #0]

	print(buffer);
 8000ede:	463b      	mov	r3, r7
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f000 fb5d 	bl	80015a0 <print>

	printGameTitle(31, 5);
 8000ee6:	2105      	movs	r1, #5
 8000ee8:	201f      	movs	r0, #31
 8000eea:	f000 fbc7 	bl	800167c <printGameTitle>
	printHTP(25, 15);
 8000eee:	210f      	movs	r1, #15
 8000ef0:	2019      	movs	r0, #25
 8000ef2:	f000 fd11 	bl	8001918 <printHTP>
	printCredit(60, 24);
 8000ef6:	2118      	movs	r1, #24
 8000ef8:	203c      	movs	r0, #60	; 0x3c
 8000efa:	f000 fedf 	bl	8001cbc <printCredit>
 8000efe:	e000      	b.n	8000f02 <welcome+0x4e>
	if (tracker == state) return;
 8000f00:	bf00      	nop
}
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	20000000 	.word	0x20000000
 8000f0c:	200000d8 	.word	0x200000d8
 8000f10:	08005510 	.word	0x08005510

08000f14 <initial>:

void initial() {
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
	clrscr();
 8000f18:	f000 fb84 	bl	8001624 <clrscr>
	drawScoreBar();
 8000f1c:	f000 f868 	bl	8000ff0 <drawScoreBar>
	drawZoneLine();
 8000f20:	f000 f938 	bl	8001194 <drawZoneLine>
	drawPaddle(&paddle1, 1);
 8000f24:	2101      	movs	r1, #1
 8000f26:	480c      	ldr	r0, [pc, #48]	; (8000f58 <initial+0x44>)
 8000f28:	f000 f8b2 	bl	8001090 <drawPaddle>
	drawPaddle(&paddle2, 1);
 8000f2c:	2101      	movs	r1, #1
 8000f2e:	480b      	ldr	r0, [pc, #44]	; (8000f5c <initial+0x48>)
 8000f30:	f000 f8ae 	bl	8001090 <drawPaddle>

	if (enableRandom) {
 8000f34:	4b0a      	ldr	r3, [pc, #40]	; (8000f60 <initial+0x4c>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d006      	beq.n	8000f4a <initial+0x36>
		set_cursor(65, 24);
 8000f3c:	2118      	movs	r1, #24
 8000f3e:	2041      	movs	r0, #65	; 0x41
 8000f40:	f000 fb4a 	bl	80015d8 <set_cursor>
		print("Random mode ON!");
 8000f44:	4807      	ldr	r0, [pc, #28]	; (8000f64 <initial+0x50>)
 8000f46:	f000 fb2b 	bl	80015a0 <print>
	}

	srand(SysTick->VAL);
 8000f4a:	4b07      	ldr	r3, [pc, #28]	; (8000f68 <initial+0x54>)
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f003 fe64 	bl	8004c1c <srand>

	return;
 8000f54:	bf00      	nop
}
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	20000020 	.word	0x20000020
 8000f5c:	20000034 	.word	0x20000034
 8000f60:	200000e6 	.word	0x200000e6
 8000f64:	08005500 	.word	0x08005500
 8000f68:	e000e010 	.word	0xe000e010

08000f6c <gameover>:

void gameover() {
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
	winner = (score1 > score2) ? 1 : 2;
 8000f70:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <gameover+0x28>)
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	4b08      	ldr	r3, [pc, #32]	; (8000f98 <gameover+0x2c>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	dd01      	ble.n	8000f80 <gameover+0x14>
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	e000      	b.n	8000f82 <gameover+0x16>
 8000f80:	2202      	movs	r2, #2
 8000f82:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <gameover+0x30>)
 8000f84:	701a      	strb	r2, [r3, #0]
	printGameOver(22, 9);
 8000f86:	2109      	movs	r1, #9
 8000f88:	2016      	movs	r0, #22
 8000f8a:	f000 fd63 	bl	8001a54 <printGameOver>
}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	200000dc 	.word	0x200000dc
 8000f98:	200000e0 	.word	0x200000e0
 8000f9c:	200000e7 	.word	0x200000e7

08000fa0 <checkIfScore>:

uint8_t checkIfScore() {
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
	struct Ball *b = &ball;
 8000fa6:	4b11      	ldr	r3, [pc, #68]	; (8000fec <checkIfScore+0x4c>)
 8000fa8:	607b      	str	r3, [r7, #4]
	if (b->mvH > 0 && b->posX + b->mvH >= SCREEN_WIDTH) { // Player2 score!
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	691b      	ldr	r3, [r3, #16]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	dd08      	ble.n	8000fc4 <checkIfScore+0x24>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	689a      	ldr	r2, [r3, #8]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	691b      	ldr	r3, [r3, #16]
 8000fba:	4413      	add	r3, r2
 8000fbc:	2b4e      	cmp	r3, #78	; 0x4e
 8000fbe:	dd01      	ble.n	8000fc4 <checkIfScore+0x24>
		return 2;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	e00d      	b.n	8000fe0 <checkIfScore+0x40>
	} else if (b->mvH < 0 && b->posX + b->mvH <= 0) { // Player1 score!
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	691b      	ldr	r3, [r3, #16]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	da08      	bge.n	8000fde <checkIfScore+0x3e>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	689a      	ldr	r2, [r3, #8]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	691b      	ldr	r3, [r3, #16]
 8000fd4:	4413      	add	r3, r2
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	dc01      	bgt.n	8000fde <checkIfScore+0x3e>
		return 1;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e000      	b.n	8000fe0 <checkIfScore+0x40>
	}
	else {
		return 0;
 8000fde:	2300      	movs	r3, #0
	}
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	20000008 	.word	0x20000008

08000ff0 <drawScoreBar>:

// Draw functions
void drawScoreBar() {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
	char buff[16];
	set_cursor(45, 0);
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	202d      	movs	r0, #45	; 0x2d
 8000ffa:	f000 faed 	bl	80015d8 <set_cursor>
	setForegroundColor(COLOR_RED);
 8000ffe:	20c4      	movs	r0, #196	; 0xc4
 8001000:	f000 fe9e 	bl	8001d40 <setForegroundColor>
	HAL_UART_Transmit(&huart2, (uint8_t*)buff, sprintf(buff, "%d", score1), HAL_MAX_DELAY);
 8001004:	4b1c      	ldr	r3, [pc, #112]	; (8001078 <drawScoreBar+0x88>)
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	463b      	mov	r3, r7
 800100a:	491c      	ldr	r1, [pc, #112]	; (800107c <drawScoreBar+0x8c>)
 800100c:	4618      	mov	r0, r3
 800100e:	f003 fe5d 	bl	8004ccc <siprintf>
 8001012:	4603      	mov	r3, r0
 8001014:	b29a      	uxth	r2, r3
 8001016:	4639      	mov	r1, r7
 8001018:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800101c:	4818      	ldr	r0, [pc, #96]	; (8001080 <drawScoreBar+0x90>)
 800101e:	f002 fee0 	bl	8003de2 <HAL_UART_Transmit>
	set_cursor(77, 0);
 8001022:	2100      	movs	r1, #0
 8001024:	204d      	movs	r0, #77	; 0x4d
 8001026:	f000 fad7 	bl	80015d8 <set_cursor>
	print("P1");
 800102a:	4816      	ldr	r0, [pc, #88]	; (8001084 <drawScoreBar+0x94>)
 800102c:	f000 fab8 	bl	80015a0 <print>
	set_cursor(35, 0);
 8001030:	2100      	movs	r1, #0
 8001032:	2023      	movs	r0, #35	; 0x23
 8001034:	f000 fad0 	bl	80015d8 <set_cursor>
	setForegroundColor(COLOR_BLUE);
 8001038:	2015      	movs	r0, #21
 800103a:	f000 fe81 	bl	8001d40 <setForegroundColor>
	HAL_UART_Transmit(&huart2, (uint8_t*)buff, sprintf(buff, "%d", score2), HAL_MAX_DELAY);
 800103e:	4b12      	ldr	r3, [pc, #72]	; (8001088 <drawScoreBar+0x98>)
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	463b      	mov	r3, r7
 8001044:	490d      	ldr	r1, [pc, #52]	; (800107c <drawScoreBar+0x8c>)
 8001046:	4618      	mov	r0, r3
 8001048:	f003 fe40 	bl	8004ccc <siprintf>
 800104c:	4603      	mov	r3, r0
 800104e:	b29a      	uxth	r2, r3
 8001050:	4639      	mov	r1, r7
 8001052:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001056:	480a      	ldr	r0, [pc, #40]	; (8001080 <drawScoreBar+0x90>)
 8001058:	f002 fec3 	bl	8003de2 <HAL_UART_Transmit>
	set_cursor(3, 0);
 800105c:	2100      	movs	r1, #0
 800105e:	2003      	movs	r0, #3
 8001060:	f000 faba 	bl	80015d8 <set_cursor>
	print("P2");
 8001064:	4809      	ldr	r0, [pc, #36]	; (800108c <drawScoreBar+0x9c>)
 8001066:	f000 fa9b 	bl	80015a0 <print>

	setForegroundColor(COLOR_WHITE);
 800106a:	200f      	movs	r0, #15
 800106c:	f000 fe68 	bl	8001d40 <setForegroundColor>
}
 8001070:	bf00      	nop
 8001072:	3710      	adds	r7, #16
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	200000dc 	.word	0x200000dc
 800107c:	08005518 	.word	0x08005518
 8001080:	20000140 	.word	0x20000140
 8001084:	0800551c 	.word	0x0800551c
 8001088:	200000e0 	.word	0x200000e0
 800108c:	08005520 	.word	0x08005520

08001090 <drawPaddle>:

void drawPaddle(struct Paddle* paddle, uint8_t force) {
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	460b      	mov	r3, r1
 800109a:	70fb      	strb	r3, [r7, #3]
	if (!force && paddle->prevX == paddle->posX && paddle->prevY == paddle->posY) return;
 800109c:	78fb      	ldrb	r3, [r7, #3]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d10b      	bne.n	80010ba <drawPaddle+0x2a>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	685a      	ldr	r2, [r3, #4]
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	68db      	ldr	r3, [r3, #12]
 80010aa:	429a      	cmp	r2, r3
 80010ac:	d105      	bne.n	80010ba <drawPaddle+0x2a>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	689a      	ldr	r2, [r3, #8]
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	691b      	ldr	r3, [r3, #16]
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d065      	beq.n	8001186 <drawPaddle+0xf6>

//	char clean = ' ';

	// Clean up Old
	set_cursor(paddle->posX, paddle->prevY-3);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	68db      	ldr	r3, [r3, #12]
 80010be:	b2da      	uxtb	r2, r3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	3b03      	subs	r3, #3
 80010c8:	b2db      	uxtb	r3, r3
 80010ca:	4619      	mov	r1, r3
 80010cc:	4610      	mov	r0, r2
 80010ce:	f000 fa83 	bl	80015d8 <set_cursor>
	setBackgroundColor(COLOR_DEFAULT);
 80010d2:	2000      	movs	r0, #0
 80010d4:	f000 fe16 	bl	8001d04 <setBackgroundColor>
	for (uint8_t j = paddle->prevY-3; j <= paddle->prevY+3; ++j) {
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	3b03      	subs	r3, #3
 80010e0:	73fb      	strb	r3, [r7, #15]
 80010e2:	e00d      	b.n	8001100 <drawPaddle+0x70>
		set_cursor(paddle->posX, j);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	b2db      	uxtb	r3, r3
 80010ea:	7bfa      	ldrb	r2, [r7, #15]
 80010ec:	4611      	mov	r1, r2
 80010ee:	4618      	mov	r0, r3
 80010f0:	f000 fa72 	bl	80015d8 <set_cursor>
		print(" ");
 80010f4:	4826      	ldr	r0, [pc, #152]	; (8001190 <drawPaddle+0x100>)
 80010f6:	f000 fa53 	bl	80015a0 <print>
	for (uint8_t j = paddle->prevY-3; j <= paddle->prevY+3; ++j) {
 80010fa:	7bfb      	ldrb	r3, [r7, #15]
 80010fc:	3301      	adds	r3, #1
 80010fe:	73fb      	strb	r3, [r7, #15]
 8001100:	7bfa      	ldrb	r2, [r7, #15]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	689b      	ldr	r3, [r3, #8]
 8001106:	3303      	adds	r3, #3
 8001108:	429a      	cmp	r2, r3
 800110a:	ddeb      	ble.n	80010e4 <drawPaddle+0x54>
	}

	// Set new values to previous position
	paddle->prevX = paddle->posX;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	68da      	ldr	r2, [r3, #12]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	605a      	str	r2, [r3, #4]
	paddle->prevY = paddle->posY;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	691a      	ldr	r2, [r3, #16]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	609a      	str	r2, [r3, #8]

	// Render New
	set_cursor(paddle->posX, paddle->posY-3);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	b2da      	uxtb	r2, r3
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	691b      	ldr	r3, [r3, #16]
 8001126:	b2db      	uxtb	r3, r3
 8001128:	3b03      	subs	r3, #3
 800112a:	b2db      	uxtb	r3, r3
 800112c:	4619      	mov	r1, r3
 800112e:	4610      	mov	r0, r2
 8001130:	f000 fa52 	bl	80015d8 <set_cursor>
	setBackgroundColor(paddle->id == 1 ? COLOR_RED : COLOR_BLUE);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	2b01      	cmp	r3, #1
 800113a:	d101      	bne.n	8001140 <drawPaddle+0xb0>
 800113c:	23c4      	movs	r3, #196	; 0xc4
 800113e:	e000      	b.n	8001142 <drawPaddle+0xb2>
 8001140:	2315      	movs	r3, #21
 8001142:	4618      	mov	r0, r3
 8001144:	f000 fdde 	bl	8001d04 <setBackgroundColor>
	for (uint8_t j = paddle->posY-3; j <= paddle->posY+3; ++j) {
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	691b      	ldr	r3, [r3, #16]
 800114c:	b2db      	uxtb	r3, r3
 800114e:	3b03      	subs	r3, #3
 8001150:	73bb      	strb	r3, [r7, #14]
 8001152:	e00d      	b.n	8001170 <drawPaddle+0xe0>
		set_cursor(paddle->posX, j);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	b2db      	uxtb	r3, r3
 800115a:	7bba      	ldrb	r2, [r7, #14]
 800115c:	4611      	mov	r1, r2
 800115e:	4618      	mov	r0, r3
 8001160:	f000 fa3a 	bl	80015d8 <set_cursor>
		print(" ");
 8001164:	480a      	ldr	r0, [pc, #40]	; (8001190 <drawPaddle+0x100>)
 8001166:	f000 fa1b 	bl	80015a0 <print>
	for (uint8_t j = paddle->posY-3; j <= paddle->posY+3; ++j) {
 800116a:	7bbb      	ldrb	r3, [r7, #14]
 800116c:	3301      	adds	r3, #1
 800116e:	73bb      	strb	r3, [r7, #14]
 8001170:	7bba      	ldrb	r2, [r7, #14]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	691b      	ldr	r3, [r3, #16]
 8001176:	3303      	adds	r3, #3
 8001178:	429a      	cmp	r2, r3
 800117a:	ddeb      	ble.n	8001154 <drawPaddle+0xc4>
	}

	setBackgroundColor(COLOR_DEFAULT);
 800117c:	2000      	movs	r0, #0
 800117e:	f000 fdc1 	bl	8001d04 <setBackgroundColor>
	return;
 8001182:	bf00      	nop
 8001184:	e000      	b.n	8001188 <drawPaddle+0xf8>
	if (!force && paddle->prevX == paddle->posX && paddle->prevY == paddle->posY) return;
 8001186:	bf00      	nop
}
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	08005524 	.word	0x08005524

08001194 <drawZoneLine>:

void drawZoneLine() {
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
	set_cursor(40, 0);
 800119a:	2100      	movs	r1, #0
 800119c:	2028      	movs	r0, #40	; 0x28
 800119e:	f000 fa1b 	bl	80015d8 <set_cursor>
	setBackgroundColor(COLOR_LIGHT_GREEN);
 80011a2:	2028      	movs	r0, #40	; 0x28
 80011a4:	f000 fdae 	bl	8001d04 <setBackgroundColor>
	for (uint8_t i = 0; i <= SCREEN_HEIGHT; ++i) {
 80011a8:	2300      	movs	r3, #0
 80011aa:	71fb      	strb	r3, [r7, #7]
 80011ac:	e00a      	b.n	80011c4 <drawZoneLine+0x30>
		set_cursor(40, i);
 80011ae:	79fb      	ldrb	r3, [r7, #7]
 80011b0:	4619      	mov	r1, r3
 80011b2:	2028      	movs	r0, #40	; 0x28
 80011b4:	f000 fa10 	bl	80015d8 <set_cursor>
		print(" ");
 80011b8:	4807      	ldr	r0, [pc, #28]	; (80011d8 <drawZoneLine+0x44>)
 80011ba:	f000 f9f1 	bl	80015a0 <print>
	for (uint8_t i = 0; i <= SCREEN_HEIGHT; ++i) {
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	3301      	adds	r3, #1
 80011c2:	71fb      	strb	r3, [r7, #7]
 80011c4:	79fb      	ldrb	r3, [r7, #7]
 80011c6:	2b19      	cmp	r3, #25
 80011c8:	d9f1      	bls.n	80011ae <drawZoneLine+0x1a>
	}
	setBackgroundColor(COLOR_DEFAULT);
 80011ca:	2000      	movs	r0, #0
 80011cc:	f000 fd9a 	bl	8001d04 <setBackgroundColor>
	return;
 80011d0:	bf00      	nop
}
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	08005524 	.word	0x08005524

080011dc <drawBall>:

void drawBall(struct Ball *ball) {
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
	if (ball->prevX == ball->posX && ball->prevY == ball->posY) return;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d105      	bne.n	80011fc <drawBall+0x20>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	685a      	ldr	r2, [r3, #4]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d04b      	beq.n	8001294 <drawBall+0xb8>

	// Clean up Old
	set_cursor(ball->prevX, ball->prevY);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	b2da      	uxtb	r2, r3
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	b2db      	uxtb	r3, r3
 8001208:	4619      	mov	r1, r3
 800120a:	4610      	mov	r0, r2
 800120c:	f000 f9e4 	bl	80015d8 <set_cursor>
	setBackgroundColor(ball->prevX == 40 ? COLOR_LIGHT_GREEN : COLOR_DEFAULT);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2b28      	cmp	r3, #40	; 0x28
 8001216:	d101      	bne.n	800121c <drawBall+0x40>
 8001218:	2328      	movs	r3, #40	; 0x28
 800121a:	e000      	b.n	800121e <drawBall+0x42>
 800121c:	2300      	movs	r3, #0
 800121e:	4618      	mov	r0, r3
 8001220:	f000 fd70 	bl	8001d04 <setBackgroundColor>
	print(" ");
 8001224:	481d      	ldr	r0, [pc, #116]	; (800129c <drawBall+0xc0>)
 8001226:	f000 f9bb 	bl	80015a0 <print>

	// Update previous position
	ball->prevX = ball->posX;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	689a      	ldr	r2, [r3, #8]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	601a      	str	r2, [r3, #0]
	ball->prevY = ball->posY;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	68da      	ldr	r2, [r3, #12]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	605a      	str	r2, [r3, #4]

	// Render New
	set_cursor(ball->posX, ball->posY);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	b2da      	uxtb	r2, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	b2db      	uxtb	r3, r3
 8001246:	4619      	mov	r1, r3
 8001248:	4610      	mov	r0, r2
 800124a:	f000 f9c5 	bl	80015d8 <set_cursor>
	setBackgroundColor(bc++);
 800124e:	4b14      	ldr	r3, [pc, #80]	; (80012a0 <drawBall+0xc4>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	1c5a      	adds	r2, r3, #1
 8001254:	b2d1      	uxtb	r1, r2
 8001256:	4a12      	ldr	r2, [pc, #72]	; (80012a0 <drawBall+0xc4>)
 8001258:	7011      	strb	r1, [r2, #0]
 800125a:	4618      	mov	r0, r3
 800125c:	f000 fd52 	bl	8001d04 <setBackgroundColor>
	bc %= bed;
 8001260:	4b0f      	ldr	r3, [pc, #60]	; (80012a0 <drawBall+0xc4>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	22e2      	movs	r2, #226	; 0xe2
 8001266:	fbb3 f1f2 	udiv	r1, r3, r2
 800126a:	fb02 f201 	mul.w	r2, r2, r1
 800126e:	1a9b      	subs	r3, r3, r2
 8001270:	b2da      	uxtb	r2, r3
 8001272:	4b0b      	ldr	r3, [pc, #44]	; (80012a0 <drawBall+0xc4>)
 8001274:	701a      	strb	r2, [r3, #0]
	if (bc == 0) {
 8001276:	4b0a      	ldr	r3, [pc, #40]	; (80012a0 <drawBall+0xc4>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d102      	bne.n	8001284 <drawBall+0xa8>
		bc = bst;
 800127e:	225d      	movs	r2, #93	; 0x5d
 8001280:	4b07      	ldr	r3, [pc, #28]	; (80012a0 <drawBall+0xc4>)
 8001282:	701a      	strb	r2, [r3, #0]
	}
	print(" ");
 8001284:	4805      	ldr	r0, [pc, #20]	; (800129c <drawBall+0xc0>)
 8001286:	f000 f98b 	bl	80015a0 <print>

	setBackgroundColor(COLOR_DEFAULT);
 800128a:	2000      	movs	r0, #0
 800128c:	f000 fd3a 	bl	8001d04 <setBackgroundColor>
	return;
 8001290:	bf00      	nop
 8001292:	e000      	b.n	8001296 <drawBall+0xba>
	if (ball->prevX == ball->posX && ball->prevY == ball->posY) return;
 8001294:	bf00      	nop
}
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	08005524 	.word	0x08005524
 80012a0:	20000048 	.word	0x20000048

080012a4 <updateBallPosition>:

// update functions
void updateBallPosition(struct Ball *ball) {
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b088      	sub	sp, #32
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]

	struct Paddle *p1 = &paddle1;
 80012ac:	4b71      	ldr	r3, [pc, #452]	; (8001474 <updateBallPosition+0x1d0>)
 80012ae:	61fb      	str	r3, [r7, #28]
	struct Paddle *p2 = &paddle2;
 80012b0:	4b71      	ldr	r3, [pc, #452]	; (8001478 <updateBallPosition+0x1d4>)
 80012b2:	61bb      	str	r3, [r7, #24]

	if (p1 == NULL || p2 == NULL) return;
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	f000 80d8 	beq.w	800146c <updateBallPosition+0x1c8>
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	f000 80d4 	beq.w	800146c <updateBallPosition+0x1c8>

	if ((ball->mvH > 0 && ball->posX + ball->mvH >= p1->posX && (ball->posY + ball->mvV <= p1->posY+PADDLE_SZIE_Y && ball->posY + ball->mvV >= p1->posY-PADDLE_SZIE_Y)) ||
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	691b      	ldr	r3, [r3, #16]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	dd1c      	ble.n	8001306 <updateBallPosition+0x62>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	689a      	ldr	r2, [r3, #8]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	691b      	ldr	r3, [r3, #16]
 80012d4:	441a      	add	r2, r3
 80012d6:	69fb      	ldr	r3, [r7, #28]
 80012d8:	68db      	ldr	r3, [r3, #12]
 80012da:	429a      	cmp	r2, r3
 80012dc:	db13      	blt.n	8001306 <updateBallPosition+0x62>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	68da      	ldr	r2, [r3, #12]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	695b      	ldr	r3, [r3, #20]
 80012e6:	441a      	add	r2, r3
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	691b      	ldr	r3, [r3, #16]
 80012ec:	3303      	adds	r3, #3
 80012ee:	429a      	cmp	r2, r3
 80012f0:	dc09      	bgt.n	8001306 <updateBallPosition+0x62>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	68da      	ldr	r2, [r3, #12]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	695b      	ldr	r3, [r3, #20]
 80012fa:	441a      	add	r2, r3
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	691b      	ldr	r3, [r3, #16]
 8001300:	3b03      	subs	r3, #3
 8001302:	429a      	cmp	r2, r3
 8001304:	da20      	bge.n	8001348 <updateBallPosition+0xa4>
		(ball->mvH < 0 && ball->posX + ball->mvH <= p2->posX && (ball->posY + ball->mvV <= p2->posY+PADDLE_SZIE_Y && ball->posY + ball->mvV >= p2->posY-PADDLE_SZIE_Y)))
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	691b      	ldr	r3, [r3, #16]
	if ((ball->mvH > 0 && ball->posX + ball->mvH >= p1->posX && (ball->posY + ball->mvV <= p1->posY+PADDLE_SZIE_Y && ball->posY + ball->mvV >= p1->posY-PADDLE_SZIE_Y)) ||
 800130a:	2b00      	cmp	r3, #0
 800130c:	da52      	bge.n	80013b4 <updateBallPosition+0x110>
		(ball->mvH < 0 && ball->posX + ball->mvH <= p2->posX && (ball->posY + ball->mvV <= p2->posY+PADDLE_SZIE_Y && ball->posY + ball->mvV >= p2->posY-PADDLE_SZIE_Y)))
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	689a      	ldr	r2, [r3, #8]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	691b      	ldr	r3, [r3, #16]
 8001316:	441a      	add	r2, r3
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	429a      	cmp	r2, r3
 800131e:	dc49      	bgt.n	80013b4 <updateBallPosition+0x110>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	68da      	ldr	r2, [r3, #12]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	695b      	ldr	r3, [r3, #20]
 8001328:	441a      	add	r2, r3
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	691b      	ldr	r3, [r3, #16]
 800132e:	3303      	adds	r3, #3
 8001330:	429a      	cmp	r2, r3
 8001332:	dc3f      	bgt.n	80013b4 <updateBallPosition+0x110>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	68da      	ldr	r2, [r3, #12]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	695b      	ldr	r3, [r3, #20]
 800133c:	441a      	add	r2, r3
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	691b      	ldr	r3, [r3, #16]
 8001342:	3b03      	subs	r3, #3
 8001344:	429a      	cmp	r2, r3
 8001346:	db35      	blt.n	80013b4 <updateBallPosition+0x110>
	{
		if (enableRandom) {
 8001348:	4b4c      	ldr	r3, [pc, #304]	; (800147c <updateBallPosition+0x1d8>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d02c      	beq.n	80013aa <updateBallPosition+0x106>
			uint8_t chance = rand() % 101;
 8001350:	f003 fc88 	bl	8004c64 <rand>
 8001354:	4602      	mov	r2, r0
 8001356:	4b4a      	ldr	r3, [pc, #296]	; (8001480 <updateBallPosition+0x1dc>)
 8001358:	fb83 1302 	smull	r1, r3, r3, r2
 800135c:	1119      	asrs	r1, r3, #4
 800135e:	17d3      	asrs	r3, r2, #31
 8001360:	1acb      	subs	r3, r1, r3
 8001362:	2165      	movs	r1, #101	; 0x65
 8001364:	fb01 f303 	mul.w	r3, r1, r3
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	75fb      	strb	r3, [r7, #23]
			int sign = ball->mvH < 0 ? -1 : 1;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	691b      	ldr	r3, [r3, #16]
 8001370:	2b00      	cmp	r3, #0
 8001372:	da02      	bge.n	800137a <updateBallPosition+0xd6>
 8001374:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001378:	e000      	b.n	800137c <updateBallPosition+0xd8>
 800137a:	2301      	movs	r3, #1
 800137c:	613b      	str	r3, [r7, #16]
			if (chance > 75) {
 800137e:	7dfb      	ldrb	r3, [r7, #23]
 8001380:	2b4b      	cmp	r3, #75	; 0x4b
 8001382:	d904      	bls.n	800138e <updateBallPosition+0xea>
				ball->mvH = 2 * sign;
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	005a      	lsls	r2, r3, #1
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	611a      	str	r2, [r3, #16]
 800138c:	e005      	b.n	800139a <updateBallPosition+0xf6>
			} else {
				ball->mvH = 3 * sign;
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	4613      	mov	r3, r2
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	441a      	add	r2, r3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	611a      	str	r2, [r3, #16]
			}

			if (chance > 50) {
 800139a:	7dfb      	ldrb	r3, [r7, #23]
 800139c:	2b32      	cmp	r3, #50	; 0x32
 800139e:	d904      	bls.n	80013aa <updateBallPosition+0x106>
				ball->mvV = -ball->mvV;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	695b      	ldr	r3, [r3, #20]
 80013a4:	425a      	negs	r2, r3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	615a      	str	r2, [r3, #20]
			}
		}
		ball->mvH = -ball->mvH;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	691b      	ldr	r3, [r3, #16]
 80013ae:	425a      	negs	r2, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	611a      	str	r2, [r3, #16]
	}

	ball->posX = boundMaxMin(ball->posX+ball->mvH, SCREEN_WIDTH, 0);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	689a      	ldr	r2, [r3, #8]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	691b      	ldr	r3, [r3, #16]
 80013bc:	4413      	add	r3, r2
 80013be:	2200      	movs	r2, #0
 80013c0:	214f      	movs	r1, #79	; 0x4f
 80013c2:	4618      	mov	r0, r3
 80013c4:	f000 f8d3 	bl	800156e <boundMaxMin>
 80013c8:	4602      	mov	r2, r0
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	609a      	str	r2, [r3, #8]

	if ((ball->mvV < 0 && ball->posY + ball->mvV <= 0) ||
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	695b      	ldr	r3, [r3, #20]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	da06      	bge.n	80013e4 <updateBallPosition+0x140>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	68da      	ldr	r2, [r3, #12]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	695b      	ldr	r3, [r3, #20]
 80013de:	4413      	add	r3, r2
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	dd0a      	ble.n	80013fa <updateBallPosition+0x156>
		(ball->mvV > 0 && ball->posY + ball->mvV >= SCREEN_HEIGHT)) {
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	695b      	ldr	r3, [r3, #20]
	if ((ball->mvV < 0 && ball->posY + ball->mvV <= 0) ||
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	dd31      	ble.n	8001450 <updateBallPosition+0x1ac>
		(ball->mvV > 0 && ball->posY + ball->mvV >= SCREEN_HEIGHT)) {
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	68da      	ldr	r2, [r3, #12]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	695b      	ldr	r3, [r3, #20]
 80013f4:	4413      	add	r3, r2
 80013f6:	2b18      	cmp	r3, #24
 80013f8:	dd2a      	ble.n	8001450 <updateBallPosition+0x1ac>
		if (enableRandom) {
 80013fa:	4b20      	ldr	r3, [pc, #128]	; (800147c <updateBallPosition+0x1d8>)
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d021      	beq.n	8001446 <updateBallPosition+0x1a2>
			uint8_t chance = rand() % 101;
 8001402:	f003 fc2f 	bl	8004c64 <rand>
 8001406:	4602      	mov	r2, r0
 8001408:	4b1d      	ldr	r3, [pc, #116]	; (8001480 <updateBallPosition+0x1dc>)
 800140a:	fb83 1302 	smull	r1, r3, r3, r2
 800140e:	1119      	asrs	r1, r3, #4
 8001410:	17d3      	asrs	r3, r2, #31
 8001412:	1acb      	subs	r3, r1, r3
 8001414:	2165      	movs	r1, #101	; 0x65
 8001416:	fb01 f303 	mul.w	r3, r1, r3
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	73fb      	strb	r3, [r7, #15]
			int sign = ball->mvV < 0 ? -1 : 1;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	695b      	ldr	r3, [r3, #20]
 8001422:	2b00      	cmp	r3, #0
 8001424:	da02      	bge.n	800142c <updateBallPosition+0x188>
 8001426:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800142a:	e000      	b.n	800142e <updateBallPosition+0x18a>
 800142c:	2301      	movs	r3, #1
 800142e:	60bb      	str	r3, [r7, #8]
			if (chance > 20) {
 8001430:	7bfb      	ldrb	r3, [r7, #15]
 8001432:	2b14      	cmp	r3, #20
 8001434:	d903      	bls.n	800143e <updateBallPosition+0x19a>
				ball->mvV = 1 * sign;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	68ba      	ldr	r2, [r7, #8]
 800143a:	615a      	str	r2, [r3, #20]
 800143c:	e003      	b.n	8001446 <updateBallPosition+0x1a2>
			} else {
				ball->mvV = 2 * sign;
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	005a      	lsls	r2, r3, #1
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	615a      	str	r2, [r3, #20]
			}
		}
		ball->mvV = -ball->mvV;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	695b      	ldr	r3, [r3, #20]
 800144a:	425a      	negs	r2, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	615a      	str	r2, [r3, #20]
	}

	ball->posY = boundMaxMin(ball->posY+ball->mvV, SCREEN_HEIGHT, 0);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	68da      	ldr	r2, [r3, #12]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	695b      	ldr	r3, [r3, #20]
 8001458:	4413      	add	r3, r2
 800145a:	2200      	movs	r2, #0
 800145c:	2119      	movs	r1, #25
 800145e:	4618      	mov	r0, r3
 8001460:	f000 f885 	bl	800156e <boundMaxMin>
 8001464:	4602      	mov	r2, r0
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	60da      	str	r2, [r3, #12]
 800146a:	e000      	b.n	800146e <updateBallPosition+0x1ca>
	if (p1 == NULL || p2 == NULL) return;
 800146c:	bf00      	nop
}
 800146e:	3720      	adds	r7, #32
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	20000020 	.word	0x20000020
 8001478:	20000034 	.word	0x20000034
 800147c:	200000e6 	.word	0x200000e6
 8001480:	288df0cb 	.word	0x288df0cb

08001484 <resetPosition>:

void resetPosition() {
 8001484:	b580      	push	{r7, lr}
 8001486:	af00      	add	r7, sp, #0
	// Reset Position Paddle
	setPaddlePostion(&paddle1, 12);
 8001488:	210c      	movs	r1, #12
 800148a:	4807      	ldr	r0, [pc, #28]	; (80014a8 <resetPosition+0x24>)
 800148c:	f000 f844 	bl	8001518 <setPaddlePostion>
	setPaddlePostion(&paddle2, 12);
 8001490:	210c      	movs	r1, #12
 8001492:	4806      	ldr	r0, [pc, #24]	; (80014ac <resetPosition+0x28>)
 8001494:	f000 f840 	bl	8001518 <setPaddlePostion>
	// reset Postion Ball
	setBallPosition(&ball, 40, 12);
 8001498:	220c      	movs	r2, #12
 800149a:	2128      	movs	r1, #40	; 0x28
 800149c:	4804      	ldr	r0, [pc, #16]	; (80014b0 <resetPosition+0x2c>)
 800149e:	f000 f84c 	bl	800153a <setBallPosition>
}
 80014a2:	bf00      	nop
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	20000020 	.word	0x20000020
 80014ac:	20000034 	.word	0x20000034
 80014b0:	20000008 	.word	0x20000008

080014b4 <resetVelocity>:

void resetVelocity() {
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
	ball.mvH = 2;
 80014b8:	4b05      	ldr	r3, [pc, #20]	; (80014d0 <resetVelocity+0x1c>)
 80014ba:	2202      	movs	r2, #2
 80014bc:	611a      	str	r2, [r3, #16]
	ball.mvV = 1;
 80014be:	4b04      	ldr	r3, [pc, #16]	; (80014d0 <resetVelocity+0x1c>)
 80014c0:	2201      	movs	r2, #1
 80014c2:	615a      	str	r2, [r3, #20]
}
 80014c4:	bf00      	nop
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	20000008 	.word	0x20000008

080014d4 <resetScore>:

void resetScore() {
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
	score1 = score2 = 0;
 80014d8:	4b05      	ldr	r3, [pc, #20]	; (80014f0 <resetScore+0x1c>)
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	4b04      	ldr	r3, [pc, #16]	; (80014f0 <resetScore+0x1c>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a04      	ldr	r2, [pc, #16]	; (80014f4 <resetScore+0x20>)
 80014e4:	6013      	str	r3, [r2, #0]
}
 80014e6:	bf00      	nop
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	200000e0 	.word	0x200000e0
 80014f4:	200000dc 	.word	0x200000dc

080014f8 <reset>:

void reset() {
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
	resetPosition();
 80014fc:	f7ff ffc2 	bl	8001484 <resetPosition>
	resetVelocity();
 8001500:	f7ff ffd8 	bl	80014b4 <resetVelocity>
	// No reset Score <-- the difference

	// Stop the game til user input any
	isGameStart = 0;
 8001504:	4b03      	ldr	r3, [pc, #12]	; (8001514 <reset+0x1c>)
 8001506:	2200      	movs	r2, #0
 8001508:	701a      	strb	r2, [r3, #0]

	// Re draw all
	initial();
 800150a:	f7ff fd03 	bl	8000f14 <initial>
}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	200000e4 	.word	0x200000e4

08001518 <setPaddlePostion>:

// Handle User's input functions
void setPaddlePostion(struct Paddle* paddle, int value) {
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	6039      	str	r1, [r7, #0]
	paddle->posY = boundMaxMin(value, SCREEN_HEIGHT-3, 4);
 8001522:	2204      	movs	r2, #4
 8001524:	2116      	movs	r1, #22
 8001526:	6838      	ldr	r0, [r7, #0]
 8001528:	f000 f821 	bl	800156e <boundMaxMin>
 800152c:	4602      	mov	r2, r0
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	611a      	str	r2, [r3, #16]
}
 8001532:	bf00      	nop
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <setBallPosition>:

void setBallPosition(struct Ball *ball, int col, int row) {
 800153a:	b580      	push	{r7, lr}
 800153c:	b084      	sub	sp, #16
 800153e:	af00      	add	r7, sp, #0
 8001540:	60f8      	str	r0, [r7, #12]
 8001542:	60b9      	str	r1, [r7, #8]
 8001544:	607a      	str	r2, [r7, #4]
	ball->posX = boundMaxMin(col, SCREEN_WIDTH, 0);
 8001546:	2200      	movs	r2, #0
 8001548:	214f      	movs	r1, #79	; 0x4f
 800154a:	68b8      	ldr	r0, [r7, #8]
 800154c:	f000 f80f 	bl	800156e <boundMaxMin>
 8001550:	4602      	mov	r2, r0
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	609a      	str	r2, [r3, #8]
	ball->posY = boundMaxMin(row, SCREEN_HEIGHT, 0);
 8001556:	2200      	movs	r2, #0
 8001558:	2119      	movs	r1, #25
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f000 f807 	bl	800156e <boundMaxMin>
 8001560:	4602      	mov	r2, r0
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	60da      	str	r2, [r3, #12]
}
 8001566:	bf00      	nop
 8001568:	3710      	adds	r7, #16
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <boundMaxMin>:

// Utillity functions
int boundMaxMin(int value, int max, int min) {
 800156e:	b480      	push	{r7}
 8001570:	b085      	sub	sp, #20
 8001572:	af00      	add	r7, sp, #0
 8001574:	60f8      	str	r0, [r7, #12]
 8001576:	60b9      	str	r1, [r7, #8]
 8001578:	607a      	str	r2, [r7, #4]
	value = value > max ? max : value;
 800157a:	68fa      	ldr	r2, [r7, #12]
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	4293      	cmp	r3, r2
 8001580:	bfa8      	it	ge
 8001582:	4613      	movge	r3, r2
 8001584:	60fb      	str	r3, [r7, #12]
	value = value < min ? min : value;
 8001586:	68fa      	ldr	r2, [r7, #12]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	4293      	cmp	r3, r2
 800158c:	bfb8      	it	lt
 800158e:	4613      	movlt	r3, r2
 8001590:	60fb      	str	r3, [r7, #12]
	return value;
 8001592:	68fb      	ldr	r3, [r7, #12]
}
 8001594:	4618      	mov	r0, r3
 8001596:	3714      	adds	r7, #20
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <print>:

void print(const char *str) {
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b090      	sub	sp, #64	; 0x40
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
	char buffer[55];
	HAL_UART_Transmit(&huart2, buffer, sprintf(buffer, "%s", str), HAL_MAX_DELAY);
 80015a8:	f107 0308 	add.w	r3, r7, #8
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	4908      	ldr	r1, [pc, #32]	; (80015d0 <print+0x30>)
 80015b0:	4618      	mov	r0, r3
 80015b2:	f003 fb8b 	bl	8004ccc <siprintf>
 80015b6:	4603      	mov	r3, r0
 80015b8:	b29a      	uxth	r2, r3
 80015ba:	f107 0108 	add.w	r1, r7, #8
 80015be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015c2:	4804      	ldr	r0, [pc, #16]	; (80015d4 <print+0x34>)
 80015c4:	f002 fc0d 	bl	8003de2 <HAL_UART_Transmit>
	return;
 80015c8:	bf00      	nop
}
 80015ca:	3740      	adds	r7, #64	; 0x40
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	08005528 	.word	0x08005528
 80015d4:	20000140 	.word	0x20000140

080015d8 <set_cursor>:

void set_cursor(uint8_t col, uint8_t row) {
 80015d8:	b580      	push	{r7, lr}
 80015da:	b090      	sub	sp, #64	; 0x40
 80015dc:	af00      	add	r7, sp, #0
 80015de:	4603      	mov	r3, r0
 80015e0:	460a      	mov	r2, r1
 80015e2:	71fb      	strb	r3, [r7, #7]
 80015e4:	4613      	mov	r3, r2
 80015e6:	71bb      	strb	r3, [r7, #6]
	char cmd[50];
	sprintf(cmd, "\033[%d;%dH", row, col); // [{row};{col}H
 80015e8:	79ba      	ldrb	r2, [r7, #6]
 80015ea:	79fb      	ldrb	r3, [r7, #7]
 80015ec:	f107 000c 	add.w	r0, r7, #12
 80015f0:	490a      	ldr	r1, [pc, #40]	; (800161c <set_cursor+0x44>)
 80015f2:	f003 fb6b 	bl	8004ccc <siprintf>
	HAL_UART_Transmit(&huart2, (uint8_t*)cmd, strlen(cmd), HAL_MAX_DELAY);
 80015f6:	f107 030c 	add.w	r3, r7, #12
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7fe fdf0 	bl	80001e0 <strlen>
 8001600:	4603      	mov	r3, r0
 8001602:	b29a      	uxth	r2, r3
 8001604:	f107 010c 	add.w	r1, r7, #12
 8001608:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800160c:	4804      	ldr	r0, [pc, #16]	; (8001620 <set_cursor+0x48>)
 800160e:	f002 fbe8 	bl	8003de2 <HAL_UART_Transmit>
}
 8001612:	bf00      	nop
 8001614:	3740      	adds	r7, #64	; 0x40
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	0800552c 	.word	0x0800552c
 8001620:	20000140 	.word	0x20000140

08001624 <clrscr>:

void clrscr(void) {
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
	const char clear[] = "\033[2J";
 800162a:	4a11      	ldr	r2, [pc, #68]	; (8001670 <clrscr+0x4c>)
 800162c:	f107 0308 	add.w	r3, r7, #8
 8001630:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001634:	6018      	str	r0, [r3, #0]
 8001636:	3304      	adds	r3, #4
 8001638:	7019      	strb	r1, [r3, #0]
	const char jump_to_home[] = "\033[H\r";
 800163a:	4a0e      	ldr	r2, [pc, #56]	; (8001674 <clrscr+0x50>)
 800163c:	463b      	mov	r3, r7
 800163e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001642:	6018      	str	r0, [r3, #0]
 8001644:	3304      	adds	r3, #4
 8001646:	7019      	strb	r1, [r3, #0]
	HAL_UART_Transmit(&huart2, (uint8_t*)clear, sizeof(clear), HAL_MAX_DELAY);
 8001648:	f107 0108 	add.w	r1, r7, #8
 800164c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001650:	2205      	movs	r2, #5
 8001652:	4809      	ldr	r0, [pc, #36]	; (8001678 <clrscr+0x54>)
 8001654:	f002 fbc5 	bl	8003de2 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)jump_to_home, sizeof(jump_to_home), HAL_MAX_DELAY);
 8001658:	4639      	mov	r1, r7
 800165a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800165e:	2205      	movs	r2, #5
 8001660:	4805      	ldr	r0, [pc, #20]	; (8001678 <clrscr+0x54>)
 8001662:	f002 fbbe 	bl	8003de2 <HAL_UART_Transmit>
}
 8001666:	bf00      	nop
 8001668:	3710      	adds	r7, #16
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	08005538 	.word	0x08005538
 8001674:	08005540 	.word	0x08005540
 8001678:	20000140 	.word	0x20000140

0800167c <printGameTitle>:

void printGameTitle(uint8_t start_col, uint8_t start_row) {
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	4603      	mov	r3, r0
 8001684:	460a      	mov	r2, r1
 8001686:	71fb      	strb	r3, [r7, #7]
 8001688:	4613      	mov	r3, r2
 800168a:	71bb      	strb	r3, [r7, #6]
	uint8_t col = start_col, row = start_row;
 800168c:	79fb      	ldrb	r3, [r7, #7]
 800168e:	73fb      	strb	r3, [r7, #15]
 8001690:	79bb      	ldrb	r3, [r7, #6]
 8001692:	73bb      	strb	r3, [r7, #14]
	// Print P
	set_cursor(col, row);
 8001694:	7bba      	ldrb	r2, [r7, #14]
 8001696:	7bfb      	ldrb	r3, [r7, #15]
 8001698:	4611      	mov	r1, r2
 800169a:	4618      	mov	r0, r3
 800169c:	f7ff ff9c 	bl	80015d8 <set_cursor>
	setForegroundColor(COLOR_RED);
 80016a0:	20c4      	movs	r0, #196	; 0xc4
 80016a2:	f000 fb4d 	bl	8001d40 <setForegroundColor>
	print("## "); set_cursor(col, row+1);
 80016a6:	4892      	ldr	r0, [pc, #584]	; (80018f0 <printGameTitle+0x274>)
 80016a8:	f7ff ff7a 	bl	80015a0 <print>
 80016ac:	7bbb      	ldrb	r3, [r7, #14]
 80016ae:	3301      	adds	r3, #1
 80016b0:	b2da      	uxtb	r2, r3
 80016b2:	7bfb      	ldrb	r3, [r7, #15]
 80016b4:	4611      	mov	r1, r2
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff ff8e 	bl	80015d8 <set_cursor>
	print("# #"); set_cursor(col, row+2);
 80016bc:	488d      	ldr	r0, [pc, #564]	; (80018f4 <printGameTitle+0x278>)
 80016be:	f7ff ff6f 	bl	80015a0 <print>
 80016c2:	7bbb      	ldrb	r3, [r7, #14]
 80016c4:	3302      	adds	r3, #2
 80016c6:	b2da      	uxtb	r2, r3
 80016c8:	7bfb      	ldrb	r3, [r7, #15]
 80016ca:	4611      	mov	r1, r2
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff ff83 	bl	80015d8 <set_cursor>
	print("## "); set_cursor(col, row+3);
 80016d2:	4887      	ldr	r0, [pc, #540]	; (80018f0 <printGameTitle+0x274>)
 80016d4:	f7ff ff64 	bl	80015a0 <print>
 80016d8:	7bbb      	ldrb	r3, [r7, #14]
 80016da:	3303      	adds	r3, #3
 80016dc:	b2da      	uxtb	r2, r3
 80016de:	7bfb      	ldrb	r3, [r7, #15]
 80016e0:	4611      	mov	r1, r2
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7ff ff78 	bl	80015d8 <set_cursor>
	print("#  "); set_cursor(col, row+4);
 80016e8:	4883      	ldr	r0, [pc, #524]	; (80018f8 <printGameTitle+0x27c>)
 80016ea:	f7ff ff59 	bl	80015a0 <print>
 80016ee:	7bbb      	ldrb	r3, [r7, #14]
 80016f0:	3304      	adds	r3, #4
 80016f2:	b2da      	uxtb	r2, r3
 80016f4:	7bfb      	ldrb	r3, [r7, #15]
 80016f6:	4611      	mov	r1, r2
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff ff6d 	bl	80015d8 <set_cursor>
	print("#  "); set_cursor(col, row+5);
 80016fe:	487e      	ldr	r0, [pc, #504]	; (80018f8 <printGameTitle+0x27c>)
 8001700:	f7ff ff4e 	bl	80015a0 <print>
 8001704:	7bbb      	ldrb	r3, [r7, #14]
 8001706:	3305      	adds	r3, #5
 8001708:	b2da      	uxtb	r2, r3
 800170a:	7bfb      	ldrb	r3, [r7, #15]
 800170c:	4611      	mov	r1, r2
 800170e:	4618      	mov	r0, r3
 8001710:	f7ff ff62 	bl	80015d8 <set_cursor>
	// Print O
	set_cursor(col+4, row);
 8001714:	7bfb      	ldrb	r3, [r7, #15]
 8001716:	3304      	adds	r3, #4
 8001718:	b2db      	uxtb	r3, r3
 800171a:	7bba      	ldrb	r2, [r7, #14]
 800171c:	4611      	mov	r1, r2
 800171e:	4618      	mov	r0, r3
 8001720:	f7ff ff5a 	bl	80015d8 <set_cursor>
	setForegroundColor(COLOR_YELLOW);
 8001724:	20e2      	movs	r0, #226	; 0xe2
 8001726:	f000 fb0b 	bl	8001d40 <setForegroundColor>
	print(" ## "); set_cursor(col+4, row+1);
 800172a:	4874      	ldr	r0, [pc, #464]	; (80018fc <printGameTitle+0x280>)
 800172c:	f7ff ff38 	bl	80015a0 <print>
 8001730:	7bfb      	ldrb	r3, [r7, #15]
 8001732:	3304      	adds	r3, #4
 8001734:	b2da      	uxtb	r2, r3
 8001736:	7bbb      	ldrb	r3, [r7, #14]
 8001738:	3301      	adds	r3, #1
 800173a:	b2db      	uxtb	r3, r3
 800173c:	4619      	mov	r1, r3
 800173e:	4610      	mov	r0, r2
 8001740:	f7ff ff4a 	bl	80015d8 <set_cursor>
	print("#  #"); set_cursor(col+4, row+2);
 8001744:	486e      	ldr	r0, [pc, #440]	; (8001900 <printGameTitle+0x284>)
 8001746:	f7ff ff2b 	bl	80015a0 <print>
 800174a:	7bfb      	ldrb	r3, [r7, #15]
 800174c:	3304      	adds	r3, #4
 800174e:	b2da      	uxtb	r2, r3
 8001750:	7bbb      	ldrb	r3, [r7, #14]
 8001752:	3302      	adds	r3, #2
 8001754:	b2db      	uxtb	r3, r3
 8001756:	4619      	mov	r1, r3
 8001758:	4610      	mov	r0, r2
 800175a:	f7ff ff3d 	bl	80015d8 <set_cursor>
	print("#  #"); set_cursor(col+4, row+3);
 800175e:	4868      	ldr	r0, [pc, #416]	; (8001900 <printGameTitle+0x284>)
 8001760:	f7ff ff1e 	bl	80015a0 <print>
 8001764:	7bfb      	ldrb	r3, [r7, #15]
 8001766:	3304      	adds	r3, #4
 8001768:	b2da      	uxtb	r2, r3
 800176a:	7bbb      	ldrb	r3, [r7, #14]
 800176c:	3303      	adds	r3, #3
 800176e:	b2db      	uxtb	r3, r3
 8001770:	4619      	mov	r1, r3
 8001772:	4610      	mov	r0, r2
 8001774:	f7ff ff30 	bl	80015d8 <set_cursor>
	print("#  #"); set_cursor(col+4, row+4);
 8001778:	4861      	ldr	r0, [pc, #388]	; (8001900 <printGameTitle+0x284>)
 800177a:	f7ff ff11 	bl	80015a0 <print>
 800177e:	7bfb      	ldrb	r3, [r7, #15]
 8001780:	3304      	adds	r3, #4
 8001782:	b2da      	uxtb	r2, r3
 8001784:	7bbb      	ldrb	r3, [r7, #14]
 8001786:	3304      	adds	r3, #4
 8001788:	b2db      	uxtb	r3, r3
 800178a:	4619      	mov	r1, r3
 800178c:	4610      	mov	r0, r2
 800178e:	f7ff ff23 	bl	80015d8 <set_cursor>
	print(" ## "); set_cursor(col+4, row+5);
 8001792:	485a      	ldr	r0, [pc, #360]	; (80018fc <printGameTitle+0x280>)
 8001794:	f7ff ff04 	bl	80015a0 <print>
 8001798:	7bfb      	ldrb	r3, [r7, #15]
 800179a:	3304      	adds	r3, #4
 800179c:	b2da      	uxtb	r2, r3
 800179e:	7bbb      	ldrb	r3, [r7, #14]
 80017a0:	3305      	adds	r3, #5
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	4619      	mov	r1, r3
 80017a6:	4610      	mov	r0, r2
 80017a8:	f7ff ff16 	bl	80015d8 <set_cursor>
	set_cursor(col+9, row);
 80017ac:	7bfb      	ldrb	r3, [r7, #15]
 80017ae:	3309      	adds	r3, #9
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	7bba      	ldrb	r2, [r7, #14]
 80017b4:	4611      	mov	r1, r2
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7ff ff0e 	bl	80015d8 <set_cursor>
	setForegroundColor(COLOR_LIGHT_GREEN);
 80017bc:	2028      	movs	r0, #40	; 0x28
 80017be:	f000 fabf 	bl	8001d40 <setForegroundColor>
	print("#   #"); set_cursor(col+9, row+1);
 80017c2:	4850      	ldr	r0, [pc, #320]	; (8001904 <printGameTitle+0x288>)
 80017c4:	f7ff feec 	bl	80015a0 <print>
 80017c8:	7bfb      	ldrb	r3, [r7, #15]
 80017ca:	3309      	adds	r3, #9
 80017cc:	b2da      	uxtb	r2, r3
 80017ce:	7bbb      	ldrb	r3, [r7, #14]
 80017d0:	3301      	adds	r3, #1
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	4619      	mov	r1, r3
 80017d6:	4610      	mov	r0, r2
 80017d8:	f7ff fefe 	bl	80015d8 <set_cursor>
	print("##  #"); set_cursor(col+9, row+2);
 80017dc:	484a      	ldr	r0, [pc, #296]	; (8001908 <printGameTitle+0x28c>)
 80017de:	f7ff fedf 	bl	80015a0 <print>
 80017e2:	7bfb      	ldrb	r3, [r7, #15]
 80017e4:	3309      	adds	r3, #9
 80017e6:	b2da      	uxtb	r2, r3
 80017e8:	7bbb      	ldrb	r3, [r7, #14]
 80017ea:	3302      	adds	r3, #2
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	4619      	mov	r1, r3
 80017f0:	4610      	mov	r0, r2
 80017f2:	f7ff fef1 	bl	80015d8 <set_cursor>
	print("# # #"); set_cursor(col+9, row+3);
 80017f6:	4845      	ldr	r0, [pc, #276]	; (800190c <printGameTitle+0x290>)
 80017f8:	f7ff fed2 	bl	80015a0 <print>
 80017fc:	7bfb      	ldrb	r3, [r7, #15]
 80017fe:	3309      	adds	r3, #9
 8001800:	b2da      	uxtb	r2, r3
 8001802:	7bbb      	ldrb	r3, [r7, #14]
 8001804:	3303      	adds	r3, #3
 8001806:	b2db      	uxtb	r3, r3
 8001808:	4619      	mov	r1, r3
 800180a:	4610      	mov	r0, r2
 800180c:	f7ff fee4 	bl	80015d8 <set_cursor>
	print("#  ##"); set_cursor(col+9, row+4);
 8001810:	483f      	ldr	r0, [pc, #252]	; (8001910 <printGameTitle+0x294>)
 8001812:	f7ff fec5 	bl	80015a0 <print>
 8001816:	7bfb      	ldrb	r3, [r7, #15]
 8001818:	3309      	adds	r3, #9
 800181a:	b2da      	uxtb	r2, r3
 800181c:	7bbb      	ldrb	r3, [r7, #14]
 800181e:	3304      	adds	r3, #4
 8001820:	b2db      	uxtb	r3, r3
 8001822:	4619      	mov	r1, r3
 8001824:	4610      	mov	r0, r2
 8001826:	f7ff fed7 	bl	80015d8 <set_cursor>
	print("#   #"); set_cursor(col+9, row+5);
 800182a:	4836      	ldr	r0, [pc, #216]	; (8001904 <printGameTitle+0x288>)
 800182c:	f7ff feb8 	bl	80015a0 <print>
 8001830:	7bfb      	ldrb	r3, [r7, #15]
 8001832:	3309      	adds	r3, #9
 8001834:	b2da      	uxtb	r2, r3
 8001836:	7bbb      	ldrb	r3, [r7, #14]
 8001838:	3305      	adds	r3, #5
 800183a:	b2db      	uxtb	r3, r3
 800183c:	4619      	mov	r1, r3
 800183e:	4610      	mov	r0, r2
 8001840:	f7ff feca 	bl	80015d8 <set_cursor>
	set_cursor(col+15, row);
 8001844:	7bfb      	ldrb	r3, [r7, #15]
 8001846:	330f      	adds	r3, #15
 8001848:	b2db      	uxtb	r3, r3
 800184a:	7bba      	ldrb	r2, [r7, #14]
 800184c:	4611      	mov	r1, r2
 800184e:	4618      	mov	r0, r3
 8001850:	f7ff fec2 	bl	80015d8 <set_cursor>
	setForegroundColor(COLOR_PURPLE);
 8001854:	2063      	movs	r0, #99	; 0x63
 8001856:	f000 fa73 	bl	8001d40 <setForegroundColor>
	print(" ## "); set_cursor(col+15, row+1);
 800185a:	4828      	ldr	r0, [pc, #160]	; (80018fc <printGameTitle+0x280>)
 800185c:	f7ff fea0 	bl	80015a0 <print>
 8001860:	7bfb      	ldrb	r3, [r7, #15]
 8001862:	330f      	adds	r3, #15
 8001864:	b2da      	uxtb	r2, r3
 8001866:	7bbb      	ldrb	r3, [r7, #14]
 8001868:	3301      	adds	r3, #1
 800186a:	b2db      	uxtb	r3, r3
 800186c:	4619      	mov	r1, r3
 800186e:	4610      	mov	r0, r2
 8001870:	f7ff feb2 	bl	80015d8 <set_cursor>
	print("#  #"); set_cursor(col+15, row+2);
 8001874:	4822      	ldr	r0, [pc, #136]	; (8001900 <printGameTitle+0x284>)
 8001876:	f7ff fe93 	bl	80015a0 <print>
 800187a:	7bfb      	ldrb	r3, [r7, #15]
 800187c:	330f      	adds	r3, #15
 800187e:	b2da      	uxtb	r2, r3
 8001880:	7bbb      	ldrb	r3, [r7, #14]
 8001882:	3302      	adds	r3, #2
 8001884:	b2db      	uxtb	r3, r3
 8001886:	4619      	mov	r1, r3
 8001888:	4610      	mov	r0, r2
 800188a:	f7ff fea5 	bl	80015d8 <set_cursor>
	print("# ##"); set_cursor(col+15, row+3);
 800188e:	4821      	ldr	r0, [pc, #132]	; (8001914 <printGameTitle+0x298>)
 8001890:	f7ff fe86 	bl	80015a0 <print>
 8001894:	7bfb      	ldrb	r3, [r7, #15]
 8001896:	330f      	adds	r3, #15
 8001898:	b2da      	uxtb	r2, r3
 800189a:	7bbb      	ldrb	r3, [r7, #14]
 800189c:	3303      	adds	r3, #3
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	4619      	mov	r1, r3
 80018a2:	4610      	mov	r0, r2
 80018a4:	f7ff fe98 	bl	80015d8 <set_cursor>
	print("#  #"); set_cursor(col+15, row+4);
 80018a8:	4815      	ldr	r0, [pc, #84]	; (8001900 <printGameTitle+0x284>)
 80018aa:	f7ff fe79 	bl	80015a0 <print>
 80018ae:	7bfb      	ldrb	r3, [r7, #15]
 80018b0:	330f      	adds	r3, #15
 80018b2:	b2da      	uxtb	r2, r3
 80018b4:	7bbb      	ldrb	r3, [r7, #14]
 80018b6:	3304      	adds	r3, #4
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	4619      	mov	r1, r3
 80018bc:	4610      	mov	r0, r2
 80018be:	f7ff fe8b 	bl	80015d8 <set_cursor>
	print(" ## "); set_cursor(col+15, row+5);
 80018c2:	480e      	ldr	r0, [pc, #56]	; (80018fc <printGameTitle+0x280>)
 80018c4:	f7ff fe6c 	bl	80015a0 <print>
 80018c8:	7bfb      	ldrb	r3, [r7, #15]
 80018ca:	330f      	adds	r3, #15
 80018cc:	b2da      	uxtb	r2, r3
 80018ce:	7bbb      	ldrb	r3, [r7, #14]
 80018d0:	3305      	adds	r3, #5
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	4619      	mov	r1, r3
 80018d6:	4610      	mov	r0, r2
 80018d8:	f7ff fe7e 	bl	80015d8 <set_cursor>
	// Print N
	// Print G

	setBackgroundColor(COLOR_DEFAULT);
 80018dc:	2000      	movs	r0, #0
 80018de:	f000 fa11 	bl	8001d04 <setBackgroundColor>
	setForegroundColor(COLOR_WHITE);
 80018e2:	200f      	movs	r0, #15
 80018e4:	f000 fa2c 	bl	8001d40 <setForegroundColor>
}
 80018e8:	bf00      	nop
 80018ea:	3710      	adds	r7, #16
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	08005548 	.word	0x08005548
 80018f4:	0800554c 	.word	0x0800554c
 80018f8:	08005550 	.word	0x08005550
 80018fc:	08005554 	.word	0x08005554
 8001900:	0800555c 	.word	0x0800555c
 8001904:	08005564 	.word	0x08005564
 8001908:	0800556c 	.word	0x0800556c
 800190c:	08005574 	.word	0x08005574
 8001910:	0800557c 	.word	0x0800557c
 8001914:	08005584 	.word	0x08005584

08001918 <printHTP>:

void printHTP(uint8_t start_col, uint8_t start_row) {
 8001918:	b580      	push	{r7, lr}
 800191a:	b090      	sub	sp, #64	; 0x40
 800191c:	af00      	add	r7, sp, #0
 800191e:	4603      	mov	r3, r0
 8001920:	460a      	mov	r2, r1
 8001922:	71fb      	strb	r3, [r7, #7]
 8001924:	4613      	mov	r3, r2
 8001926:	71bb      	strb	r3, [r7, #6]
	uint8_t col = start_col, row = start_row;
 8001928:	79fb      	ldrb	r3, [r7, #7]
 800192a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800192e:	79bb      	ldrb	r3, [r7, #6]
 8001930:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	setForegroundColor(COLOR_RED);
 8001934:	20c4      	movs	r0, #196	; 0xc4
 8001936:	f000 fa03 	bl	8001d40 <setForegroundColor>
	set_cursor(col, row++);
 800193a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800193e:	1c5a      	adds	r2, r3, #1
 8001940:	f887 203e 	strb.w	r2, [r7, #62]	; 0x3e
 8001944:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8001948:	4619      	mov	r1, r3
 800194a:	4610      	mov	r0, r2
 800194c:	f7ff fe44 	bl	80015d8 <set_cursor>
	print("*Note, Do not hold the button!");
 8001950:	4839      	ldr	r0, [pc, #228]	; (8001a38 <printHTP+0x120>)
 8001952:	f7ff fe25 	bl	80015a0 <print>
	set_cursor(col, row++);
 8001956:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800195a:	1c5a      	adds	r2, r3, #1
 800195c:	f887 203e 	strb.w	r2, [r7, #62]	; 0x3e
 8001960:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8001964:	4619      	mov	r1, r3
 8001966:	4610      	mov	r0, r2
 8001968:	f7ff fe36 	bl	80015d8 <set_cursor>
	print("   Use SPAMING instead...");
 800196c:	4833      	ldr	r0, [pc, #204]	; (8001a3c <printHTP+0x124>)
 800196e:	f7ff fe17 	bl	80015a0 <print>
	set_cursor(col, row++);
 8001972:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001976:	1c5a      	adds	r2, r3, #1
 8001978:	f887 203e 	strb.w	r2, [r7, #62]	; 0x3e
 800197c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8001980:	4619      	mov	r1, r3
 8001982:	4610      	mov	r0, r2
 8001984:	f7ff fe28 	bl	80015d8 <set_cursor>
	set_cursor(col, row++);
 8001988:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800198c:	1c5a      	adds	r2, r3, #1
 800198e:	f887 203e 	strb.w	r2, [r7, #62]	; 0x3e
 8001992:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8001996:	4619      	mov	r1, r3
 8001998:	4610      	mov	r0, r2
 800199a:	f7ff fe1d 	bl	80015d8 <set_cursor>
	setForegroundColor(COLOR_YELLOW);
 800199e:	20e2      	movs	r0, #226	; 0xe2
 80019a0:	f000 f9ce 	bl	8001d40 <setForegroundColor>
	char buffer[50];
	sprintf(buffer, "Who got %d point before, win!", win_score);
 80019a4:	4b26      	ldr	r3, [pc, #152]	; (8001a40 <printHTP+0x128>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	461a      	mov	r2, r3
 80019aa:	f107 030c 	add.w	r3, r7, #12
 80019ae:	4925      	ldr	r1, [pc, #148]	; (8001a44 <printHTP+0x12c>)
 80019b0:	4618      	mov	r0, r3
 80019b2:	f003 f98b 	bl	8004ccc <siprintf>
	print(buffer);
 80019b6:	f107 030c 	add.w	r3, r7, #12
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7ff fdf0 	bl	80015a0 <print>
	set_cursor(col, row++);
 80019c0:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80019c4:	1c5a      	adds	r2, r3, #1
 80019c6:	f887 203e 	strb.w	r2, [r7, #62]	; 0x3e
 80019ca:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80019ce:	4619      	mov	r1, r3
 80019d0:	4610      	mov	r0, r2
 80019d2:	f7ff fe01 	bl	80015d8 <set_cursor>
	print("paddle 1 (right) use arrow \'up\' & \'down\'");
 80019d6:	481c      	ldr	r0, [pc, #112]	; (8001a48 <printHTP+0x130>)
 80019d8:	f7ff fde2 	bl	80015a0 <print>
	set_cursor(col, row++);
 80019dc:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80019e0:	1c5a      	adds	r2, r3, #1
 80019e2:	f887 203e 	strb.w	r2, [r7, #62]	; 0x3e
 80019e6:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80019ea:	4619      	mov	r1, r3
 80019ec:	4610      	mov	r0, r2
 80019ee:	f7ff fdf3 	bl	80015d8 <set_cursor>
	print("paddle 2 (left) use key \'w\' & \'s\'");
 80019f2:	4816      	ldr	r0, [pc, #88]	; (8001a4c <printHTP+0x134>)
 80019f4:	f7ff fdd4 	bl	80015a0 <print>
	set_cursor(col, row++);
 80019f8:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80019fc:	1c5a      	adds	r2, r3, #1
 80019fe:	f887 203e 	strb.w	r2, [r7, #62]	; 0x3e
 8001a02:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8001a06:	4619      	mov	r1, r3
 8001a08:	4610      	mov	r0, r2
 8001a0a:	f7ff fde5 	bl	80015d8 <set_cursor>
	set_cursor(col, row++);
 8001a0e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001a12:	1c5a      	adds	r2, r3, #1
 8001a14:	f887 203e 	strb.w	r2, [r7, #62]	; 0x3e
 8001a18:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4610      	mov	r0, r2
 8001a20:	f7ff fdda 	bl	80015d8 <set_cursor>
	setForegroundColor(COLOR_WHITE);
 8001a24:	200f      	movs	r0, #15
 8001a26:	f000 f98b 	bl	8001d40 <setForegroundColor>
	print("Press 's' to start the game");
 8001a2a:	4809      	ldr	r0, [pc, #36]	; (8001a50 <printHTP+0x138>)
 8001a2c:	f7ff fdb8 	bl	80015a0 <print>
}
 8001a30:	bf00      	nop
 8001a32:	3740      	adds	r7, #64	; 0x40
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	0800558c 	.word	0x0800558c
 8001a3c:	080055ac 	.word	0x080055ac
 8001a40:	20000004 	.word	0x20000004
 8001a44:	080055c8 	.word	0x080055c8
 8001a48:	080055e8 	.word	0x080055e8
 8001a4c:	08005614 	.word	0x08005614
 8001a50:	08005638 	.word	0x08005638

08001a54 <printGameOver>:

void printGameOver(uint8_t start_col, uint8_t start_row) {
 8001a54:	b5b0      	push	{r4, r5, r7, lr}
 8001a56:	b08e      	sub	sp, #56	; 0x38
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	460a      	mov	r2, r1
 8001a5e:	71fb      	strb	r3, [r7, #7]
 8001a60:	4613      	mov	r3, r2
 8001a62:	71bb      	strb	r3, [r7, #6]
	const uint8_t colors[] = { 40, 81, 220, 202, 127 };
	uint8_t col = start_col, row = start_row;
 8001a64:	79fb      	ldrb	r3, [r7, #7]
 8001a66:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001a6a:	79bb      	ldrb	r3, [r7, #6]
 8001a6c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	char *msg1[5] = {
 8001a70:	4b8c      	ldr	r3, [pc, #560]	; (8001ca4 <printGameOver+0x250>)
 8001a72:	f107 0420 	add.w	r4, r7, #32
 8001a76:	461d      	mov	r5, r3
 8001a78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a7c:	682b      	ldr	r3, [r5, #0]
 8001a7e:	6023      	str	r3, [r4, #0]
			"#   #  #  ##  # ##  # #    #  #   ###   ",
			"# # #  #  # # # # # # #### ###      #   ",
			"## ##  #  #  ## #  ## #    #  #     #   ",
			"#   # ### #   # #   # #### #  #    ###  "
	};
	char *msg2[5] = {
 8001a80:	4b89      	ldr	r3, [pc, #548]	; (8001ca8 <printGameOver+0x254>)
 8001a82:	f107 040c 	add.w	r4, r7, #12
 8001a86:	461d      	mov	r5, r3
 8001a88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a8c:	682b      	ldr	r3, [r5, #0]
 8001a8e:	6023      	str	r3, [r4, #0]
			"# # #  #  # # # # # # #### ###    ###   ",
			"## ##  #  #  ## #  ## #    #  #   #     ",
			"#   # ### #   # #   # #### #  #   ###   "
		};

	set_cursor(col, row++); print("Press 'x' go to START SCREEN");
 8001a90:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001a94:	1c5a      	adds	r2, r3, #1
 8001a96:	f887 2036 	strb.w	r2, [r7, #54]	; 0x36
 8001a9a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	4610      	mov	r0, r2
 8001aa2:	f7ff fd99 	bl	80015d8 <set_cursor>
 8001aa6:	4881      	ldr	r0, [pc, #516]	; (8001cac <printGameOver+0x258>)
 8001aa8:	f7ff fd7a 	bl	80015a0 <print>
	set_cursor(col, row++); print("Press 'r' restart the match!");
 8001aac:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001ab0:	1c5a      	adds	r2, r3, #1
 8001ab2:	f887 2036 	strb.w	r2, [r7, #54]	; 0x36
 8001ab6:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001aba:	4619      	mov	r1, r3
 8001abc:	4610      	mov	r0, r2
 8001abe:	f7ff fd8b 	bl	80015d8 <set_cursor>
 8001ac2:	487b      	ldr	r0, [pc, #492]	; (8001cb0 <printGameOver+0x25c>)
 8001ac4:	f7ff fd6c 	bl	80015a0 <print>

	set_cursor(col, row++); set_cursor(col, row++);
 8001ac8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001acc:	1c5a      	adds	r2, r3, #1
 8001ace:	f887 2036 	strb.w	r2, [r7, #54]	; 0x36
 8001ad2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	4610      	mov	r0, r2
 8001ada:	f7ff fd7d 	bl	80015d8 <set_cursor>
 8001ade:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001ae2:	1c5a      	adds	r2, r3, #1
 8001ae4:	f887 2036 	strb.w	r2, [r7, #54]	; 0x36
 8001ae8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001aec:	4619      	mov	r1, r3
 8001aee:	4610      	mov	r0, r2
 8001af0:	f7ff fd72 	bl	80015d8 <set_cursor>

	switch (winner) {
 8001af4:	4b6f      	ldr	r3, [pc, #444]	; (8001cb4 <printGameOver+0x260>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d002      	beq.n	8001b02 <printGameOver+0xae>
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d065      	beq.n	8001bcc <printGameOver+0x178>
 8001b00:	e0c9      	b.n	8001c96 <printGameOver+0x242>
	case 1:
		setForegroundColor(colors[0]); set_cursor(col, row++); print(msg1[0]);
 8001b02:	4b6d      	ldr	r3, [pc, #436]	; (8001cb8 <printGameOver+0x264>)
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f000 f91a 	bl	8001d40 <setForegroundColor>
 8001b0c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001b10:	1c5a      	adds	r2, r3, #1
 8001b12:	f887 2036 	strb.w	r2, [r7, #54]	; 0x36
 8001b16:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	4610      	mov	r0, r2
 8001b1e:	f7ff fd5b 	bl	80015d8 <set_cursor>
 8001b22:	6a3b      	ldr	r3, [r7, #32]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7ff fd3b 	bl	80015a0 <print>
		setForegroundColor(colors[1]); set_cursor(col, row++); print(msg1[1]);
 8001b2a:	4b63      	ldr	r3, [pc, #396]	; (8001cb8 <printGameOver+0x264>)
 8001b2c:	785b      	ldrb	r3, [r3, #1]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f000 f906 	bl	8001d40 <setForegroundColor>
 8001b34:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001b38:	1c5a      	adds	r2, r3, #1
 8001b3a:	f887 2036 	strb.w	r2, [r7, #54]	; 0x36
 8001b3e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001b42:	4619      	mov	r1, r3
 8001b44:	4610      	mov	r0, r2
 8001b46:	f7ff fd47 	bl	80015d8 <set_cursor>
 8001b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff fd27 	bl	80015a0 <print>
		setForegroundColor(colors[2]); set_cursor(col, row++); print(msg1[2]);
 8001b52:	4b59      	ldr	r3, [pc, #356]	; (8001cb8 <printGameOver+0x264>)
 8001b54:	789b      	ldrb	r3, [r3, #2]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f000 f8f2 	bl	8001d40 <setForegroundColor>
 8001b5c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001b60:	1c5a      	adds	r2, r3, #1
 8001b62:	f887 2036 	strb.w	r2, [r7, #54]	; 0x36
 8001b66:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	4610      	mov	r0, r2
 8001b6e:	f7ff fd33 	bl	80015d8 <set_cursor>
 8001b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff fd13 	bl	80015a0 <print>
		setForegroundColor(colors[3]); set_cursor(col, row++); print(msg1[3]);
 8001b7a:	4b4f      	ldr	r3, [pc, #316]	; (8001cb8 <printGameOver+0x264>)
 8001b7c:	78db      	ldrb	r3, [r3, #3]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f000 f8de 	bl	8001d40 <setForegroundColor>
 8001b84:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001b88:	1c5a      	adds	r2, r3, #1
 8001b8a:	f887 2036 	strb.w	r2, [r7, #54]	; 0x36
 8001b8e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001b92:	4619      	mov	r1, r3
 8001b94:	4610      	mov	r0, r2
 8001b96:	f7ff fd1f 	bl	80015d8 <set_cursor>
 8001b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff fcff 	bl	80015a0 <print>
		setForegroundColor(colors[4]); set_cursor(col, row++); print(msg1[4]);
 8001ba2:	4b45      	ldr	r3, [pc, #276]	; (8001cb8 <printGameOver+0x264>)
 8001ba4:	791b      	ldrb	r3, [r3, #4]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f000 f8ca 	bl	8001d40 <setForegroundColor>
 8001bac:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001bb0:	1c5a      	adds	r2, r3, #1
 8001bb2:	f887 2036 	strb.w	r2, [r7, #54]	; 0x36
 8001bb6:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4610      	mov	r0, r2
 8001bbe:	f7ff fd0b 	bl	80015d8 <set_cursor>
 8001bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff fceb 	bl	80015a0 <print>
		break;
 8001bca:	e064      	b.n	8001c96 <printGameOver+0x242>
	case 2:
		setForegroundColor(colors[0]); set_cursor(col, row++); print(msg2[0]);
 8001bcc:	4b3a      	ldr	r3, [pc, #232]	; (8001cb8 <printGameOver+0x264>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f000 f8b5 	bl	8001d40 <setForegroundColor>
 8001bd6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001bda:	1c5a      	adds	r2, r3, #1
 8001bdc:	f887 2036 	strb.w	r2, [r7, #54]	; 0x36
 8001be0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001be4:	4619      	mov	r1, r3
 8001be6:	4610      	mov	r0, r2
 8001be8:	f7ff fcf6 	bl	80015d8 <set_cursor>
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7ff fcd6 	bl	80015a0 <print>
		setForegroundColor(colors[1]); set_cursor(col, row++); print(msg2[1]);
 8001bf4:	4b30      	ldr	r3, [pc, #192]	; (8001cb8 <printGameOver+0x264>)
 8001bf6:	785b      	ldrb	r3, [r3, #1]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f000 f8a1 	bl	8001d40 <setForegroundColor>
 8001bfe:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001c02:	1c5a      	adds	r2, r3, #1
 8001c04:	f887 2036 	strb.w	r2, [r7, #54]	; 0x36
 8001c08:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	4610      	mov	r0, r2
 8001c10:	f7ff fce2 	bl	80015d8 <set_cursor>
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7ff fcc2 	bl	80015a0 <print>
		setForegroundColor(colors[2]); set_cursor(col, row++); print(msg2[2]);
 8001c1c:	4b26      	ldr	r3, [pc, #152]	; (8001cb8 <printGameOver+0x264>)
 8001c1e:	789b      	ldrb	r3, [r3, #2]
 8001c20:	4618      	mov	r0, r3
 8001c22:	f000 f88d 	bl	8001d40 <setForegroundColor>
 8001c26:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001c2a:	1c5a      	adds	r2, r3, #1
 8001c2c:	f887 2036 	strb.w	r2, [r7, #54]	; 0x36
 8001c30:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001c34:	4619      	mov	r1, r3
 8001c36:	4610      	mov	r0, r2
 8001c38:	f7ff fcce 	bl	80015d8 <set_cursor>
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f7ff fcae 	bl	80015a0 <print>
		setForegroundColor(colors[3]); set_cursor(col, row++); print(msg2[3]);
 8001c44:	4b1c      	ldr	r3, [pc, #112]	; (8001cb8 <printGameOver+0x264>)
 8001c46:	78db      	ldrb	r3, [r3, #3]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f000 f879 	bl	8001d40 <setForegroundColor>
 8001c4e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001c52:	1c5a      	adds	r2, r3, #1
 8001c54:	f887 2036 	strb.w	r2, [r7, #54]	; 0x36
 8001c58:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	4610      	mov	r0, r2
 8001c60:	f7ff fcba 	bl	80015d8 <set_cursor>
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7ff fc9a 	bl	80015a0 <print>
		setForegroundColor(colors[4]); set_cursor(col, row++); print(msg2[4]);
 8001c6c:	4b12      	ldr	r3, [pc, #72]	; (8001cb8 <printGameOver+0x264>)
 8001c6e:	791b      	ldrb	r3, [r3, #4]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f000 f865 	bl	8001d40 <setForegroundColor>
 8001c76:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001c7a:	1c5a      	adds	r2, r3, #1
 8001c7c:	f887 2036 	strb.w	r2, [r7, #54]	; 0x36
 8001c80:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001c84:	4619      	mov	r1, r3
 8001c86:	4610      	mov	r0, r2
 8001c88:	f7ff fca6 	bl	80015d8 <set_cursor>
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7ff fc86 	bl	80015a0 <print>
		break;
 8001c94:	bf00      	nop
	}

	setForegroundColor(COLOR_WHITE);
 8001c96:	200f      	movs	r0, #15
 8001c98:	f000 f852 	bl	8001d40 <setForegroundColor>
	return;
 8001c9c:	bf00      	nop
}
 8001c9e:	3738      	adds	r7, #56	; 0x38
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bdb0      	pop	{r4, r5, r7, pc}
 8001ca4:	08005770 	.word	0x08005770
 8001ca8:	08005860 	.word	0x08005860
 8001cac:	08005654 	.word	0x08005654
 8001cb0:	08005674 	.word	0x08005674
 8001cb4:	200000e7 	.word	0x200000e7
 8001cb8:	0800589c 	.word	0x0800589c

08001cbc <printCredit>:

void printCredit(uint8_t start_col, uint8_t start_row) {
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	460a      	mov	r2, r1
 8001cc6:	71fb      	strb	r3, [r7, #7]
 8001cc8:	4613      	mov	r3, r2
 8001cca:	71bb      	strb	r3, [r7, #6]
	set_cursor(start_col, start_row);
 8001ccc:	79ba      	ldrb	r2, [r7, #6]
 8001cce:	79fb      	ldrb	r3, [r7, #7]
 8001cd0:	4611      	mov	r1, r2
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7ff fc80 	bl	80015d8 <set_cursor>
	char cpr = 184;
 8001cd8:	23b8      	movs	r3, #184	; 0xb8
 8001cda:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart2, &cpr, 1, HAL_MAX_DELAY);
 8001cdc:	f107 010f 	add.w	r1, r7, #15
 8001ce0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	4805      	ldr	r0, [pc, #20]	; (8001cfc <printCredit+0x40>)
 8001ce8:	f002 f87b 	bl	8003de2 <HAL_UART_Transmit>
	print("2020 KoFeeBriAN");
 8001cec:	4804      	ldr	r0, [pc, #16]	; (8001d00 <printCredit+0x44>)
 8001cee:	f7ff fc57 	bl	80015a0 <print>
}
 8001cf2:	bf00      	nop
 8001cf4:	3710      	adds	r7, #16
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	20000140 	.word	0x20000140
 8001d00:	08005874 	.word	0x08005874

08001d04 <setBackgroundColor>:
/* USER CODE END 4 */

void setBackgroundColor(uint8_t color) {
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b090      	sub	sp, #64	; 0x40
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	71fb      	strb	r3, [r7, #7]
	char buffer[50];
	HAL_UART_Transmit(&huart2, buffer, sprintf(buffer, "\033[48:5:%dm", color), HAL_MAX_DELAY);
 8001d0e:	79fa      	ldrb	r2, [r7, #7]
 8001d10:	f107 030c 	add.w	r3, r7, #12
 8001d14:	4908      	ldr	r1, [pc, #32]	; (8001d38 <setBackgroundColor+0x34>)
 8001d16:	4618      	mov	r0, r3
 8001d18:	f002 ffd8 	bl	8004ccc <siprintf>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	b29a      	uxth	r2, r3
 8001d20:	f107 010c 	add.w	r1, r7, #12
 8001d24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d28:	4804      	ldr	r0, [pc, #16]	; (8001d3c <setBackgroundColor+0x38>)
 8001d2a:	f002 f85a 	bl	8003de2 <HAL_UART_Transmit>
	return;
 8001d2e:	bf00      	nop
}
 8001d30:	3740      	adds	r7, #64	; 0x40
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	08005884 	.word	0x08005884
 8001d3c:	20000140 	.word	0x20000140

08001d40 <setForegroundColor>:

void setForegroundColor(uint8_t color) {
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b090      	sub	sp, #64	; 0x40
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	71fb      	strb	r3, [r7, #7]
	char buffer[50];
	HAL_UART_Transmit(&huart2, buffer, sprintf(buffer, "\033[38:5:%dm", color), HAL_MAX_DELAY);
 8001d4a:	79fa      	ldrb	r2, [r7, #7]
 8001d4c:	f107 030c 	add.w	r3, r7, #12
 8001d50:	4908      	ldr	r1, [pc, #32]	; (8001d74 <setForegroundColor+0x34>)
 8001d52:	4618      	mov	r0, r3
 8001d54:	f002 ffba 	bl	8004ccc <siprintf>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	b29a      	uxth	r2, r3
 8001d5c:	f107 010c 	add.w	r1, r7, #12
 8001d60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d64:	4804      	ldr	r0, [pc, #16]	; (8001d78 <setForegroundColor+0x38>)
 8001d66:	f002 f83c 	bl	8003de2 <HAL_UART_Transmit>
	return;
 8001d6a:	bf00      	nop
}
 8001d6c:	3740      	adds	r7, #64	; 0x40
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	08005890 	.word	0x08005890
 8001d78:	20000140 	.word	0x20000140

08001d7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001d80:	bf00      	nop
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
	...

08001d8c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d92:	2300      	movs	r3, #0
 8001d94:	607b      	str	r3, [r7, #4]
 8001d96:	4b10      	ldr	r3, [pc, #64]	; (8001dd8 <HAL_MspInit+0x4c>)
 8001d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d9a:	4a0f      	ldr	r2, [pc, #60]	; (8001dd8 <HAL_MspInit+0x4c>)
 8001d9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001da0:	6453      	str	r3, [r2, #68]	; 0x44
 8001da2:	4b0d      	ldr	r3, [pc, #52]	; (8001dd8 <HAL_MspInit+0x4c>)
 8001da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001daa:	607b      	str	r3, [r7, #4]
 8001dac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dae:	2300      	movs	r3, #0
 8001db0:	603b      	str	r3, [r7, #0]
 8001db2:	4b09      	ldr	r3, [pc, #36]	; (8001dd8 <HAL_MspInit+0x4c>)
 8001db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db6:	4a08      	ldr	r2, [pc, #32]	; (8001dd8 <HAL_MspInit+0x4c>)
 8001db8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dbc:	6413      	str	r3, [r2, #64]	; 0x40
 8001dbe:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <HAL_MspInit+0x4c>)
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc6:	603b      	str	r3, [r7, #0]
 8001dc8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8001dca:	2005      	movs	r0, #5
 8001dcc:	f000 faa8 	bl	8002320 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dd0:	bf00      	nop
 8001dd2:	3708      	adds	r7, #8
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	40023800 	.word	0x40023800

08001ddc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a0e      	ldr	r2, [pc, #56]	; (8001e24 <HAL_TIM_Base_MspInit+0x48>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d115      	bne.n	8001e1a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001dee:	2300      	movs	r3, #0
 8001df0:	60fb      	str	r3, [r7, #12]
 8001df2:	4b0d      	ldr	r3, [pc, #52]	; (8001e28 <HAL_TIM_Base_MspInit+0x4c>)
 8001df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df6:	4a0c      	ldr	r2, [pc, #48]	; (8001e28 <HAL_TIM_Base_MspInit+0x4c>)
 8001df8:	f043 0302 	orr.w	r3, r3, #2
 8001dfc:	6413      	str	r3, [r2, #64]	; 0x40
 8001dfe:	4b0a      	ldr	r3, [pc, #40]	; (8001e28 <HAL_TIM_Base_MspInit+0x4c>)
 8001e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e02:	f003 0302 	and.w	r3, r3, #2
 8001e06:	60fb      	str	r3, [r7, #12]
 8001e08:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	201d      	movs	r0, #29
 8001e10:	f000 fa91 	bl	8002336 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001e14:	201d      	movs	r0, #29
 8001e16:	f000 faaa 	bl	800236e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001e1a:	bf00      	nop
 8001e1c:	3710      	adds	r7, #16
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	40000400 	.word	0x40000400
 8001e28:	40023800 	.word	0x40023800

08001e2c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b088      	sub	sp, #32
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e34:	f107 030c 	add.w	r3, r7, #12
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]
 8001e3c:	605a      	str	r2, [r3, #4]
 8001e3e:	609a      	str	r2, [r3, #8]
 8001e40:	60da      	str	r2, [r3, #12]
 8001e42:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a12      	ldr	r2, [pc, #72]	; (8001e94 <HAL_TIM_MspPostInit+0x68>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d11d      	bne.n	8001e8a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e4e:	2300      	movs	r3, #0
 8001e50:	60bb      	str	r3, [r7, #8]
 8001e52:	4b11      	ldr	r3, [pc, #68]	; (8001e98 <HAL_TIM_MspPostInit+0x6c>)
 8001e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e56:	4a10      	ldr	r2, [pc, #64]	; (8001e98 <HAL_TIM_MspPostInit+0x6c>)
 8001e58:	f043 0301 	orr.w	r3, r3, #1
 8001e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e5e:	4b0e      	ldr	r3, [pc, #56]	; (8001e98 <HAL_TIM_MspPostInit+0x6c>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	60bb      	str	r3, [r7, #8]
 8001e68:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PA6     ------> TIM3_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001e6a:	2340      	movs	r3, #64	; 0x40
 8001e6c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e6e:	2302      	movs	r3, #2
 8001e70:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e72:	2300      	movs	r3, #0
 8001e74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e76:	2300      	movs	r3, #0
 8001e78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e7e:	f107 030c 	add.w	r3, r7, #12
 8001e82:	4619      	mov	r1, r3
 8001e84:	4805      	ldr	r0, [pc, #20]	; (8001e9c <HAL_TIM_MspPostInit+0x70>)
 8001e86:	f000 faaf 	bl	80023e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001e8a:	bf00      	nop
 8001e8c:	3720      	adds	r7, #32
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	40000400 	.word	0x40000400
 8001e98:	40023800 	.word	0x40023800
 8001e9c:	40020000 	.word	0x40020000

08001ea0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b08a      	sub	sp, #40	; 0x28
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea8:	f107 0314 	add.w	r3, r7, #20
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	605a      	str	r2, [r3, #4]
 8001eb2:	609a      	str	r2, [r3, #8]
 8001eb4:	60da      	str	r2, [r3, #12]
 8001eb6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a1d      	ldr	r2, [pc, #116]	; (8001f34 <HAL_UART_MspInit+0x94>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d133      	bne.n	8001f2a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	613b      	str	r3, [r7, #16]
 8001ec6:	4b1c      	ldr	r3, [pc, #112]	; (8001f38 <HAL_UART_MspInit+0x98>)
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eca:	4a1b      	ldr	r2, [pc, #108]	; (8001f38 <HAL_UART_MspInit+0x98>)
 8001ecc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ed0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ed2:	4b19      	ldr	r3, [pc, #100]	; (8001f38 <HAL_UART_MspInit+0x98>)
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eda:	613b      	str	r3, [r7, #16]
 8001edc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ede:	2300      	movs	r3, #0
 8001ee0:	60fb      	str	r3, [r7, #12]
 8001ee2:	4b15      	ldr	r3, [pc, #84]	; (8001f38 <HAL_UART_MspInit+0x98>)
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee6:	4a14      	ldr	r2, [pc, #80]	; (8001f38 <HAL_UART_MspInit+0x98>)
 8001ee8:	f043 0301 	orr.w	r3, r3, #1
 8001eec:	6313      	str	r3, [r2, #48]	; 0x30
 8001eee:	4b12      	ldr	r3, [pc, #72]	; (8001f38 <HAL_UART_MspInit+0x98>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	60fb      	str	r3, [r7, #12]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001efa:	230c      	movs	r3, #12
 8001efc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efe:	2302      	movs	r3, #2
 8001f00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f02:	2300      	movs	r3, #0
 8001f04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f06:	2303      	movs	r3, #3
 8001f08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f0a:	2307      	movs	r3, #7
 8001f0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f0e:	f107 0314 	add.w	r3, r7, #20
 8001f12:	4619      	mov	r1, r3
 8001f14:	4809      	ldr	r0, [pc, #36]	; (8001f3c <HAL_UART_MspInit+0x9c>)
 8001f16:	f000 fa67 	bl	80023e8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	2101      	movs	r1, #1
 8001f1e:	2026      	movs	r0, #38	; 0x26
 8001f20:	f000 fa09 	bl	8002336 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f24:	2026      	movs	r0, #38	; 0x26
 8001f26:	f000 fa22 	bl	800236e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f2a:	bf00      	nop
 8001f2c:	3728      	adds	r7, #40	; 0x28
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	40004400 	.word	0x40004400
 8001f38:	40023800 	.word	0x40023800
 8001f3c:	40020000 	.word	0x40020000

08001f40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001f44:	bf00      	nop
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr

08001f4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f52:	e7fe      	b.n	8001f52 <HardFault_Handler+0x4>

08001f54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f58:	e7fe      	b.n	8001f58 <MemManage_Handler+0x4>

08001f5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f5e:	e7fe      	b.n	8001f5e <BusFault_Handler+0x4>

08001f60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f64:	e7fe      	b.n	8001f64 <UsageFault_Handler+0x4>

08001f66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f66:	b480      	push	{r7}
 8001f68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f6a:	bf00      	nop
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f78:	bf00      	nop
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr

08001f82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f82:	b480      	push	{r7}
 8001f84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f86:	bf00      	nop
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f94:	f000 f8d4 	bl	8002140 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f98:	bf00      	nop
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001fa0:	4802      	ldr	r0, [pc, #8]	; (8001fac <TIM3_IRQHandler+0x10>)
 8001fa2:	f001 f8d5 	bl	8003150 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001fa6:	bf00      	nop
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	20000100 	.word	0x20000100

08001fb0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001fb4:	4802      	ldr	r0, [pc, #8]	; (8001fc0 <USART2_IRQHandler+0x10>)
 8001fb6:	f002 f803 	bl	8003fc0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001fba:	bf00      	nop
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	20000140 	.word	0x20000140

08001fc4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001fcc:	4b11      	ldr	r3, [pc, #68]	; (8002014 <_sbrk+0x50>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d102      	bne.n	8001fda <_sbrk+0x16>
		heap_end = &end;
 8001fd4:	4b0f      	ldr	r3, [pc, #60]	; (8002014 <_sbrk+0x50>)
 8001fd6:	4a10      	ldr	r2, [pc, #64]	; (8002018 <_sbrk+0x54>)
 8001fd8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001fda:	4b0e      	ldr	r3, [pc, #56]	; (8002014 <_sbrk+0x50>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001fe0:	4b0c      	ldr	r3, [pc, #48]	; (8002014 <_sbrk+0x50>)
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	466a      	mov	r2, sp
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d907      	bls.n	8001ffe <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001fee:	f002 fde3 	bl	8004bb8 <__errno>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	230c      	movs	r3, #12
 8001ff6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001ff8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ffc:	e006      	b.n	800200c <_sbrk+0x48>
	}

	heap_end += incr;
 8001ffe:	4b05      	ldr	r3, [pc, #20]	; (8002014 <_sbrk+0x50>)
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4413      	add	r3, r2
 8002006:	4a03      	ldr	r2, [pc, #12]	; (8002014 <_sbrk+0x50>)
 8002008:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800200a:	68fb      	ldr	r3, [r7, #12]
}
 800200c:	4618      	mov	r0, r3
 800200e:	3710      	adds	r7, #16
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	200000e8 	.word	0x200000e8
 8002018:	20000188 	.word	0x20000188

0800201c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002020:	4b08      	ldr	r3, [pc, #32]	; (8002044 <SystemInit+0x28>)
 8002022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002026:	4a07      	ldr	r2, [pc, #28]	; (8002044 <SystemInit+0x28>)
 8002028:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800202c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002030:	4b04      	ldr	r3, [pc, #16]	; (8002044 <SystemInit+0x28>)
 8002032:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002036:	609a      	str	r2, [r3, #8]
#endif
}
 8002038:	bf00      	nop
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	e000ed00 	.word	0xe000ed00

08002048 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002048:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002080 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800204c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800204e:	e003      	b.n	8002058 <LoopCopyDataInit>

08002050 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002050:	4b0c      	ldr	r3, [pc, #48]	; (8002084 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002052:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002054:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002056:	3104      	adds	r1, #4

08002058 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002058:	480b      	ldr	r0, [pc, #44]	; (8002088 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800205a:	4b0c      	ldr	r3, [pc, #48]	; (800208c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800205c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800205e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002060:	d3f6      	bcc.n	8002050 <CopyDataInit>
  ldr  r2, =_sbss
 8002062:	4a0b      	ldr	r2, [pc, #44]	; (8002090 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002064:	e002      	b.n	800206c <LoopFillZerobss>

08002066 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002066:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002068:	f842 3b04 	str.w	r3, [r2], #4

0800206c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800206c:	4b09      	ldr	r3, [pc, #36]	; (8002094 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800206e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002070:	d3f9      	bcc.n	8002066 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002072:	f7ff ffd3 	bl	800201c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002076:	f002 fda5 	bl	8004bc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800207a:	f7fe fce1 	bl	8000a40 <main>
  bx  lr    
 800207e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002080:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002084:	08005900 	.word	0x08005900
  ldr  r0, =_sdata
 8002088:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800208c:	200000bc 	.word	0x200000bc
  ldr  r2, =_sbss
 8002090:	200000bc 	.word	0x200000bc
  ldr  r3, = _ebss
 8002094:	20000188 	.word	0x20000188

08002098 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002098:	e7fe      	b.n	8002098 <ADC_IRQHandler>
	...

0800209c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020a0:	4b0e      	ldr	r3, [pc, #56]	; (80020dc <HAL_Init+0x40>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a0d      	ldr	r2, [pc, #52]	; (80020dc <HAL_Init+0x40>)
 80020a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020ac:	4b0b      	ldr	r3, [pc, #44]	; (80020dc <HAL_Init+0x40>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a0a      	ldr	r2, [pc, #40]	; (80020dc <HAL_Init+0x40>)
 80020b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020b8:	4b08      	ldr	r3, [pc, #32]	; (80020dc <HAL_Init+0x40>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a07      	ldr	r2, [pc, #28]	; (80020dc <HAL_Init+0x40>)
 80020be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020c4:	2003      	movs	r0, #3
 80020c6:	f000 f92b 	bl	8002320 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020ca:	2000      	movs	r0, #0
 80020cc:	f000 f808 	bl	80020e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020d0:	f7ff fe5c 	bl	8001d8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	40023c00 	.word	0x40023c00

080020e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020e8:	4b12      	ldr	r3, [pc, #72]	; (8002134 <HAL_InitTick+0x54>)
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	4b12      	ldr	r3, [pc, #72]	; (8002138 <HAL_InitTick+0x58>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	4619      	mov	r1, r3
 80020f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80020fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80020fe:	4618      	mov	r0, r3
 8002100:	f000 f943 	bl	800238a <HAL_SYSTICK_Config>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e00e      	b.n	800212c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2b0f      	cmp	r3, #15
 8002112:	d80a      	bhi.n	800212a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002114:	2200      	movs	r2, #0
 8002116:	6879      	ldr	r1, [r7, #4]
 8002118:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800211c:	f000 f90b 	bl	8002336 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002120:	4a06      	ldr	r2, [pc, #24]	; (800213c <HAL_InitTick+0x5c>)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002126:	2300      	movs	r3, #0
 8002128:	e000      	b.n	800212c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
}
 800212c:	4618      	mov	r0, r3
 800212e:	3708      	adds	r7, #8
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	2000004c 	.word	0x2000004c
 8002138:	20000054 	.word	0x20000054
 800213c:	20000050 	.word	0x20000050

08002140 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002144:	4b06      	ldr	r3, [pc, #24]	; (8002160 <HAL_IncTick+0x20>)
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	461a      	mov	r2, r3
 800214a:	4b06      	ldr	r3, [pc, #24]	; (8002164 <HAL_IncTick+0x24>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4413      	add	r3, r2
 8002150:	4a04      	ldr	r2, [pc, #16]	; (8002164 <HAL_IncTick+0x24>)
 8002152:	6013      	str	r3, [r2, #0]
}
 8002154:	bf00      	nop
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	20000054 	.word	0x20000054
 8002164:	20000180 	.word	0x20000180

08002168 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  return uwTick;
 800216c:	4b03      	ldr	r3, [pc, #12]	; (800217c <HAL_GetTick+0x14>)
 800216e:	681b      	ldr	r3, [r3, #0]
}
 8002170:	4618      	mov	r0, r3
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	20000180 	.word	0x20000180

08002180 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002180:	b480      	push	{r7}
 8002182:	b085      	sub	sp, #20
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f003 0307 	and.w	r3, r3, #7
 800218e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002190:	4b0c      	ldr	r3, [pc, #48]	; (80021c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002196:	68ba      	ldr	r2, [r7, #8]
 8002198:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800219c:	4013      	ands	r3, r2
 800219e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021b2:	4a04      	ldr	r2, [pc, #16]	; (80021c4 <__NVIC_SetPriorityGrouping+0x44>)
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	60d3      	str	r3, [r2, #12]
}
 80021b8:	bf00      	nop
 80021ba:	3714      	adds	r7, #20
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr
 80021c4:	e000ed00 	.word	0xe000ed00

080021c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021cc:	4b04      	ldr	r3, [pc, #16]	; (80021e0 <__NVIC_GetPriorityGrouping+0x18>)
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	0a1b      	lsrs	r3, r3, #8
 80021d2:	f003 0307 	and.w	r3, r3, #7
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr
 80021e0:	e000ed00 	.word	0xe000ed00

080021e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	4603      	mov	r3, r0
 80021ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	db0b      	blt.n	800220e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021f6:	79fb      	ldrb	r3, [r7, #7]
 80021f8:	f003 021f 	and.w	r2, r3, #31
 80021fc:	4907      	ldr	r1, [pc, #28]	; (800221c <__NVIC_EnableIRQ+0x38>)
 80021fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002202:	095b      	lsrs	r3, r3, #5
 8002204:	2001      	movs	r0, #1
 8002206:	fa00 f202 	lsl.w	r2, r0, r2
 800220a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800220e:	bf00      	nop
 8002210:	370c      	adds	r7, #12
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	e000e100 	.word	0xe000e100

08002220 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	4603      	mov	r3, r0
 8002228:	6039      	str	r1, [r7, #0]
 800222a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800222c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002230:	2b00      	cmp	r3, #0
 8002232:	db0a      	blt.n	800224a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	b2da      	uxtb	r2, r3
 8002238:	490c      	ldr	r1, [pc, #48]	; (800226c <__NVIC_SetPriority+0x4c>)
 800223a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223e:	0112      	lsls	r2, r2, #4
 8002240:	b2d2      	uxtb	r2, r2
 8002242:	440b      	add	r3, r1
 8002244:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002248:	e00a      	b.n	8002260 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	b2da      	uxtb	r2, r3
 800224e:	4908      	ldr	r1, [pc, #32]	; (8002270 <__NVIC_SetPriority+0x50>)
 8002250:	79fb      	ldrb	r3, [r7, #7]
 8002252:	f003 030f 	and.w	r3, r3, #15
 8002256:	3b04      	subs	r3, #4
 8002258:	0112      	lsls	r2, r2, #4
 800225a:	b2d2      	uxtb	r2, r2
 800225c:	440b      	add	r3, r1
 800225e:	761a      	strb	r2, [r3, #24]
}
 8002260:	bf00      	nop
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr
 800226c:	e000e100 	.word	0xe000e100
 8002270:	e000ed00 	.word	0xe000ed00

08002274 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002274:	b480      	push	{r7}
 8002276:	b089      	sub	sp, #36	; 0x24
 8002278:	af00      	add	r7, sp, #0
 800227a:	60f8      	str	r0, [r7, #12]
 800227c:	60b9      	str	r1, [r7, #8]
 800227e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	f003 0307 	and.w	r3, r3, #7
 8002286:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	f1c3 0307 	rsb	r3, r3, #7
 800228e:	2b04      	cmp	r3, #4
 8002290:	bf28      	it	cs
 8002292:	2304      	movcs	r3, #4
 8002294:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	3304      	adds	r3, #4
 800229a:	2b06      	cmp	r3, #6
 800229c:	d902      	bls.n	80022a4 <NVIC_EncodePriority+0x30>
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	3b03      	subs	r3, #3
 80022a2:	e000      	b.n	80022a6 <NVIC_EncodePriority+0x32>
 80022a4:	2300      	movs	r3, #0
 80022a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80022ac:	69bb      	ldr	r3, [r7, #24]
 80022ae:	fa02 f303 	lsl.w	r3, r2, r3
 80022b2:	43da      	mvns	r2, r3
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	401a      	ands	r2, r3
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	fa01 f303 	lsl.w	r3, r1, r3
 80022c6:	43d9      	mvns	r1, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022cc:	4313      	orrs	r3, r2
         );
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3724      	adds	r7, #36	; 0x24
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
	...

080022dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b082      	sub	sp, #8
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	3b01      	subs	r3, #1
 80022e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022ec:	d301      	bcc.n	80022f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022ee:	2301      	movs	r3, #1
 80022f0:	e00f      	b.n	8002312 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022f2:	4a0a      	ldr	r2, [pc, #40]	; (800231c <SysTick_Config+0x40>)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	3b01      	subs	r3, #1
 80022f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022fa:	210f      	movs	r1, #15
 80022fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002300:	f7ff ff8e 	bl	8002220 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002304:	4b05      	ldr	r3, [pc, #20]	; (800231c <SysTick_Config+0x40>)
 8002306:	2200      	movs	r2, #0
 8002308:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800230a:	4b04      	ldr	r3, [pc, #16]	; (800231c <SysTick_Config+0x40>)
 800230c:	2207      	movs	r2, #7
 800230e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3708      	adds	r7, #8
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	e000e010 	.word	0xe000e010

08002320 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f7ff ff29 	bl	8002180 <__NVIC_SetPriorityGrouping>
}
 800232e:	bf00      	nop
 8002330:	3708      	adds	r7, #8
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002336:	b580      	push	{r7, lr}
 8002338:	b086      	sub	sp, #24
 800233a:	af00      	add	r7, sp, #0
 800233c:	4603      	mov	r3, r0
 800233e:	60b9      	str	r1, [r7, #8]
 8002340:	607a      	str	r2, [r7, #4]
 8002342:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002344:	2300      	movs	r3, #0
 8002346:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002348:	f7ff ff3e 	bl	80021c8 <__NVIC_GetPriorityGrouping>
 800234c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	68b9      	ldr	r1, [r7, #8]
 8002352:	6978      	ldr	r0, [r7, #20]
 8002354:	f7ff ff8e 	bl	8002274 <NVIC_EncodePriority>
 8002358:	4602      	mov	r2, r0
 800235a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800235e:	4611      	mov	r1, r2
 8002360:	4618      	mov	r0, r3
 8002362:	f7ff ff5d 	bl	8002220 <__NVIC_SetPriority>
}
 8002366:	bf00      	nop
 8002368:	3718      	adds	r7, #24
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}

0800236e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800236e:	b580      	push	{r7, lr}
 8002370:	b082      	sub	sp, #8
 8002372:	af00      	add	r7, sp, #0
 8002374:	4603      	mov	r3, r0
 8002376:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237c:	4618      	mov	r0, r3
 800237e:	f7ff ff31 	bl	80021e4 <__NVIC_EnableIRQ>
}
 8002382:	bf00      	nop
 8002384:	3708      	adds	r7, #8
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}

0800238a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800238a:	b580      	push	{r7, lr}
 800238c:	b082      	sub	sp, #8
 800238e:	af00      	add	r7, sp, #0
 8002390:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f7ff ffa2 	bl	80022dc <SysTick_Config>
 8002398:	4603      	mov	r3, r0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}

080023a2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80023a2:	b480      	push	{r7}
 80023a4:	b083      	sub	sp, #12
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d004      	beq.n	80023c0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2280      	movs	r2, #128	; 0x80
 80023ba:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e00c      	b.n	80023da <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2205      	movs	r2, #5
 80023c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f022 0201 	bic.w	r2, r2, #1
 80023d6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	370c      	adds	r7, #12
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr
	...

080023e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b089      	sub	sp, #36	; 0x24
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023f2:	2300      	movs	r3, #0
 80023f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023f6:	2300      	movs	r3, #0
 80023f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023fa:	2300      	movs	r3, #0
 80023fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023fe:	2300      	movs	r3, #0
 8002400:	61fb      	str	r3, [r7, #28]
 8002402:	e159      	b.n	80026b8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002404:	2201      	movs	r2, #1
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	697a      	ldr	r2, [r7, #20]
 8002414:	4013      	ands	r3, r2
 8002416:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002418:	693a      	ldr	r2, [r7, #16]
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	429a      	cmp	r2, r3
 800241e:	f040 8148 	bne.w	80026b2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	2b01      	cmp	r3, #1
 8002428:	d00b      	beq.n	8002442 <HAL_GPIO_Init+0x5a>
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	2b02      	cmp	r3, #2
 8002430:	d007      	beq.n	8002442 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002436:	2b11      	cmp	r3, #17
 8002438:	d003      	beq.n	8002442 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	2b12      	cmp	r3, #18
 8002440:	d130      	bne.n	80024a4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	689b      	ldr	r3, [r3, #8]
 8002446:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	2203      	movs	r2, #3
 800244e:	fa02 f303 	lsl.w	r3, r2, r3
 8002452:	43db      	mvns	r3, r3
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	4013      	ands	r3, r2
 8002458:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	68da      	ldr	r2, [r3, #12]
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	fa02 f303 	lsl.w	r3, r2, r3
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	4313      	orrs	r3, r2
 800246a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002478:	2201      	movs	r2, #1
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	fa02 f303 	lsl.w	r3, r2, r3
 8002480:	43db      	mvns	r3, r3
 8002482:	69ba      	ldr	r2, [r7, #24]
 8002484:	4013      	ands	r3, r2
 8002486:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	091b      	lsrs	r3, r3, #4
 800248e:	f003 0201 	and.w	r2, r3, #1
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	fa02 f303 	lsl.w	r3, r2, r3
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	4313      	orrs	r3, r2
 800249c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	69ba      	ldr	r2, [r7, #24]
 80024a2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	005b      	lsls	r3, r3, #1
 80024ae:	2203      	movs	r2, #3
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	43db      	mvns	r3, r3
 80024b6:	69ba      	ldr	r2, [r7, #24]
 80024b8:	4013      	ands	r3, r2
 80024ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	689a      	ldr	r2, [r3, #8]
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d003      	beq.n	80024e4 <HAL_GPIO_Init+0xfc>
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	2b12      	cmp	r3, #18
 80024e2:	d123      	bne.n	800252c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	08da      	lsrs	r2, r3, #3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	3208      	adds	r2, #8
 80024ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	f003 0307 	and.w	r3, r3, #7
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	220f      	movs	r2, #15
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	43db      	mvns	r3, r3
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	4013      	ands	r3, r2
 8002506:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	691a      	ldr	r2, [r3, #16]
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	f003 0307 	and.w	r3, r3, #7
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	4313      	orrs	r3, r2
 800251c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	08da      	lsrs	r2, r3, #3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	3208      	adds	r2, #8
 8002526:	69b9      	ldr	r1, [r7, #24]
 8002528:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	2203      	movs	r2, #3
 8002538:	fa02 f303 	lsl.w	r3, r2, r3
 800253c:	43db      	mvns	r3, r3
 800253e:	69ba      	ldr	r2, [r7, #24]
 8002540:	4013      	ands	r3, r2
 8002542:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f003 0203 	and.w	r2, r3, #3
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	fa02 f303 	lsl.w	r3, r2, r3
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	4313      	orrs	r3, r2
 8002558:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002568:	2b00      	cmp	r3, #0
 800256a:	f000 80a2 	beq.w	80026b2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800256e:	2300      	movs	r3, #0
 8002570:	60fb      	str	r3, [r7, #12]
 8002572:	4b56      	ldr	r3, [pc, #344]	; (80026cc <HAL_GPIO_Init+0x2e4>)
 8002574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002576:	4a55      	ldr	r2, [pc, #340]	; (80026cc <HAL_GPIO_Init+0x2e4>)
 8002578:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800257c:	6453      	str	r3, [r2, #68]	; 0x44
 800257e:	4b53      	ldr	r3, [pc, #332]	; (80026cc <HAL_GPIO_Init+0x2e4>)
 8002580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002582:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002586:	60fb      	str	r3, [r7, #12]
 8002588:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800258a:	4a51      	ldr	r2, [pc, #324]	; (80026d0 <HAL_GPIO_Init+0x2e8>)
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	089b      	lsrs	r3, r3, #2
 8002590:	3302      	adds	r3, #2
 8002592:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002596:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	f003 0303 	and.w	r3, r3, #3
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	220f      	movs	r2, #15
 80025a2:	fa02 f303 	lsl.w	r3, r2, r3
 80025a6:	43db      	mvns	r3, r3
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	4013      	ands	r3, r2
 80025ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a48      	ldr	r2, [pc, #288]	; (80026d4 <HAL_GPIO_Init+0x2ec>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d019      	beq.n	80025ea <HAL_GPIO_Init+0x202>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4a47      	ldr	r2, [pc, #284]	; (80026d8 <HAL_GPIO_Init+0x2f0>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d013      	beq.n	80025e6 <HAL_GPIO_Init+0x1fe>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a46      	ldr	r2, [pc, #280]	; (80026dc <HAL_GPIO_Init+0x2f4>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d00d      	beq.n	80025e2 <HAL_GPIO_Init+0x1fa>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	4a45      	ldr	r2, [pc, #276]	; (80026e0 <HAL_GPIO_Init+0x2f8>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d007      	beq.n	80025de <HAL_GPIO_Init+0x1f6>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a44      	ldr	r2, [pc, #272]	; (80026e4 <HAL_GPIO_Init+0x2fc>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d101      	bne.n	80025da <HAL_GPIO_Init+0x1f2>
 80025d6:	2304      	movs	r3, #4
 80025d8:	e008      	b.n	80025ec <HAL_GPIO_Init+0x204>
 80025da:	2307      	movs	r3, #7
 80025dc:	e006      	b.n	80025ec <HAL_GPIO_Init+0x204>
 80025de:	2303      	movs	r3, #3
 80025e0:	e004      	b.n	80025ec <HAL_GPIO_Init+0x204>
 80025e2:	2302      	movs	r3, #2
 80025e4:	e002      	b.n	80025ec <HAL_GPIO_Init+0x204>
 80025e6:	2301      	movs	r3, #1
 80025e8:	e000      	b.n	80025ec <HAL_GPIO_Init+0x204>
 80025ea:	2300      	movs	r3, #0
 80025ec:	69fa      	ldr	r2, [r7, #28]
 80025ee:	f002 0203 	and.w	r2, r2, #3
 80025f2:	0092      	lsls	r2, r2, #2
 80025f4:	4093      	lsls	r3, r2
 80025f6:	69ba      	ldr	r2, [r7, #24]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025fc:	4934      	ldr	r1, [pc, #208]	; (80026d0 <HAL_GPIO_Init+0x2e8>)
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	089b      	lsrs	r3, r3, #2
 8002602:	3302      	adds	r3, #2
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800260a:	4b37      	ldr	r3, [pc, #220]	; (80026e8 <HAL_GPIO_Init+0x300>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	43db      	mvns	r3, r3
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	4013      	ands	r3, r2
 8002618:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d003      	beq.n	800262e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002626:	69ba      	ldr	r2, [r7, #24]
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	4313      	orrs	r3, r2
 800262c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800262e:	4a2e      	ldr	r2, [pc, #184]	; (80026e8 <HAL_GPIO_Init+0x300>)
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002634:	4b2c      	ldr	r3, [pc, #176]	; (80026e8 <HAL_GPIO_Init+0x300>)
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	43db      	mvns	r3, r3
 800263e:	69ba      	ldr	r2, [r7, #24]
 8002640:	4013      	ands	r3, r2
 8002642:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d003      	beq.n	8002658 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	4313      	orrs	r3, r2
 8002656:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002658:	4a23      	ldr	r2, [pc, #140]	; (80026e8 <HAL_GPIO_Init+0x300>)
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800265e:	4b22      	ldr	r3, [pc, #136]	; (80026e8 <HAL_GPIO_Init+0x300>)
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	43db      	mvns	r3, r3
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	4013      	ands	r3, r2
 800266c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d003      	beq.n	8002682 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800267a:	69ba      	ldr	r2, [r7, #24]
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	4313      	orrs	r3, r2
 8002680:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002682:	4a19      	ldr	r2, [pc, #100]	; (80026e8 <HAL_GPIO_Init+0x300>)
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002688:	4b17      	ldr	r3, [pc, #92]	; (80026e8 <HAL_GPIO_Init+0x300>)
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	43db      	mvns	r3, r3
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	4013      	ands	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d003      	beq.n	80026ac <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026ac:	4a0e      	ldr	r2, [pc, #56]	; (80026e8 <HAL_GPIO_Init+0x300>)
 80026ae:	69bb      	ldr	r3, [r7, #24]
 80026b0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	3301      	adds	r3, #1
 80026b6:	61fb      	str	r3, [r7, #28]
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	2b0f      	cmp	r3, #15
 80026bc:	f67f aea2 	bls.w	8002404 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026c0:	bf00      	nop
 80026c2:	3724      	adds	r7, #36	; 0x24
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr
 80026cc:	40023800 	.word	0x40023800
 80026d0:	40013800 	.word	0x40013800
 80026d4:	40020000 	.word	0x40020000
 80026d8:	40020400 	.word	0x40020400
 80026dc:	40020800 	.word	0x40020800
 80026e0:	40020c00 	.word	0x40020c00
 80026e4:	40021000 	.word	0x40021000
 80026e8:	40013c00 	.word	0x40013c00

080026ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	460b      	mov	r3, r1
 80026f6:	807b      	strh	r3, [r7, #2]
 80026f8:	4613      	mov	r3, r2
 80026fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026fc:	787b      	ldrb	r3, [r7, #1]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d003      	beq.n	800270a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002702:	887a      	ldrh	r2, [r7, #2]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002708:	e003      	b.n	8002712 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800270a:	887b      	ldrh	r3, [r7, #2]
 800270c:	041a      	lsls	r2, r3, #16
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	619a      	str	r2, [r3, #24]
}
 8002712:	bf00      	nop
 8002714:	370c      	adds	r7, #12
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
	...

08002720 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b086      	sub	sp, #24
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d101      	bne.n	8002732 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e25b      	b.n	8002bea <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0301 	and.w	r3, r3, #1
 800273a:	2b00      	cmp	r3, #0
 800273c:	d075      	beq.n	800282a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800273e:	4ba3      	ldr	r3, [pc, #652]	; (80029cc <HAL_RCC_OscConfig+0x2ac>)
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f003 030c 	and.w	r3, r3, #12
 8002746:	2b04      	cmp	r3, #4
 8002748:	d00c      	beq.n	8002764 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800274a:	4ba0      	ldr	r3, [pc, #640]	; (80029cc <HAL_RCC_OscConfig+0x2ac>)
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002752:	2b08      	cmp	r3, #8
 8002754:	d112      	bne.n	800277c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002756:	4b9d      	ldr	r3, [pc, #628]	; (80029cc <HAL_RCC_OscConfig+0x2ac>)
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800275e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002762:	d10b      	bne.n	800277c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002764:	4b99      	ldr	r3, [pc, #612]	; (80029cc <HAL_RCC_OscConfig+0x2ac>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d05b      	beq.n	8002828 <HAL_RCC_OscConfig+0x108>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d157      	bne.n	8002828 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e236      	b.n	8002bea <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002784:	d106      	bne.n	8002794 <HAL_RCC_OscConfig+0x74>
 8002786:	4b91      	ldr	r3, [pc, #580]	; (80029cc <HAL_RCC_OscConfig+0x2ac>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a90      	ldr	r2, [pc, #576]	; (80029cc <HAL_RCC_OscConfig+0x2ac>)
 800278c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002790:	6013      	str	r3, [r2, #0]
 8002792:	e01d      	b.n	80027d0 <HAL_RCC_OscConfig+0xb0>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800279c:	d10c      	bne.n	80027b8 <HAL_RCC_OscConfig+0x98>
 800279e:	4b8b      	ldr	r3, [pc, #556]	; (80029cc <HAL_RCC_OscConfig+0x2ac>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a8a      	ldr	r2, [pc, #552]	; (80029cc <HAL_RCC_OscConfig+0x2ac>)
 80027a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027a8:	6013      	str	r3, [r2, #0]
 80027aa:	4b88      	ldr	r3, [pc, #544]	; (80029cc <HAL_RCC_OscConfig+0x2ac>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a87      	ldr	r2, [pc, #540]	; (80029cc <HAL_RCC_OscConfig+0x2ac>)
 80027b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027b4:	6013      	str	r3, [r2, #0]
 80027b6:	e00b      	b.n	80027d0 <HAL_RCC_OscConfig+0xb0>
 80027b8:	4b84      	ldr	r3, [pc, #528]	; (80029cc <HAL_RCC_OscConfig+0x2ac>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a83      	ldr	r2, [pc, #524]	; (80029cc <HAL_RCC_OscConfig+0x2ac>)
 80027be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027c2:	6013      	str	r3, [r2, #0]
 80027c4:	4b81      	ldr	r3, [pc, #516]	; (80029cc <HAL_RCC_OscConfig+0x2ac>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a80      	ldr	r2, [pc, #512]	; (80029cc <HAL_RCC_OscConfig+0x2ac>)
 80027ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d013      	beq.n	8002800 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d8:	f7ff fcc6 	bl	8002168 <HAL_GetTick>
 80027dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027de:	e008      	b.n	80027f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027e0:	f7ff fcc2 	bl	8002168 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b64      	cmp	r3, #100	; 0x64
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e1fb      	b.n	8002bea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027f2:	4b76      	ldr	r3, [pc, #472]	; (80029cc <HAL_RCC_OscConfig+0x2ac>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d0f0      	beq.n	80027e0 <HAL_RCC_OscConfig+0xc0>
 80027fe:	e014      	b.n	800282a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002800:	f7ff fcb2 	bl	8002168 <HAL_GetTick>
 8002804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002806:	e008      	b.n	800281a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002808:	f7ff fcae 	bl	8002168 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b64      	cmp	r3, #100	; 0x64
 8002814:	d901      	bls.n	800281a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e1e7      	b.n	8002bea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800281a:	4b6c      	ldr	r3, [pc, #432]	; (80029cc <HAL_RCC_OscConfig+0x2ac>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d1f0      	bne.n	8002808 <HAL_RCC_OscConfig+0xe8>
 8002826:	e000      	b.n	800282a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002828:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0302 	and.w	r3, r3, #2
 8002832:	2b00      	cmp	r3, #0
 8002834:	d063      	beq.n	80028fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002836:	4b65      	ldr	r3, [pc, #404]	; (80029cc <HAL_RCC_OscConfig+0x2ac>)
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f003 030c 	and.w	r3, r3, #12
 800283e:	2b00      	cmp	r3, #0
 8002840:	d00b      	beq.n	800285a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002842:	4b62      	ldr	r3, [pc, #392]	; (80029cc <HAL_RCC_OscConfig+0x2ac>)
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800284a:	2b08      	cmp	r3, #8
 800284c:	d11c      	bne.n	8002888 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800284e:	4b5f      	ldr	r3, [pc, #380]	; (80029cc <HAL_RCC_OscConfig+0x2ac>)
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d116      	bne.n	8002888 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800285a:	4b5c      	ldr	r3, [pc, #368]	; (80029cc <HAL_RCC_OscConfig+0x2ac>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0302 	and.w	r3, r3, #2
 8002862:	2b00      	cmp	r3, #0
 8002864:	d005      	beq.n	8002872 <HAL_RCC_OscConfig+0x152>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d001      	beq.n	8002872 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e1bb      	b.n	8002bea <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002872:	4b56      	ldr	r3, [pc, #344]	; (80029cc <HAL_RCC_OscConfig+0x2ac>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	00db      	lsls	r3, r3, #3
 8002880:	4952      	ldr	r1, [pc, #328]	; (80029cc <HAL_RCC_OscConfig+0x2ac>)
 8002882:	4313      	orrs	r3, r2
 8002884:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002886:	e03a      	b.n	80028fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d020      	beq.n	80028d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002890:	4b4f      	ldr	r3, [pc, #316]	; (80029d0 <HAL_RCC_OscConfig+0x2b0>)
 8002892:	2201      	movs	r2, #1
 8002894:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002896:	f7ff fc67 	bl	8002168 <HAL_GetTick>
 800289a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800289c:	e008      	b.n	80028b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800289e:	f7ff fc63 	bl	8002168 <HAL_GetTick>
 80028a2:	4602      	mov	r2, r0
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d901      	bls.n	80028b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e19c      	b.n	8002bea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028b0:	4b46      	ldr	r3, [pc, #280]	; (80029cc <HAL_RCC_OscConfig+0x2ac>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0302 	and.w	r3, r3, #2
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d0f0      	beq.n	800289e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028bc:	4b43      	ldr	r3, [pc, #268]	; (80029cc <HAL_RCC_OscConfig+0x2ac>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	00db      	lsls	r3, r3, #3
 80028ca:	4940      	ldr	r1, [pc, #256]	; (80029cc <HAL_RCC_OscConfig+0x2ac>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	600b      	str	r3, [r1, #0]
 80028d0:	e015      	b.n	80028fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028d2:	4b3f      	ldr	r3, [pc, #252]	; (80029d0 <HAL_RCC_OscConfig+0x2b0>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d8:	f7ff fc46 	bl	8002168 <HAL_GetTick>
 80028dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028de:	e008      	b.n	80028f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028e0:	f7ff fc42 	bl	8002168 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e17b      	b.n	8002bea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028f2:	4b36      	ldr	r3, [pc, #216]	; (80029cc <HAL_RCC_OscConfig+0x2ac>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d1f0      	bne.n	80028e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0308 	and.w	r3, r3, #8
 8002906:	2b00      	cmp	r3, #0
 8002908:	d030      	beq.n	800296c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	695b      	ldr	r3, [r3, #20]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d016      	beq.n	8002940 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002912:	4b30      	ldr	r3, [pc, #192]	; (80029d4 <HAL_RCC_OscConfig+0x2b4>)
 8002914:	2201      	movs	r2, #1
 8002916:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002918:	f7ff fc26 	bl	8002168 <HAL_GetTick>
 800291c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800291e:	e008      	b.n	8002932 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002920:	f7ff fc22 	bl	8002168 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b02      	cmp	r3, #2
 800292c:	d901      	bls.n	8002932 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e15b      	b.n	8002bea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002932:	4b26      	ldr	r3, [pc, #152]	; (80029cc <HAL_RCC_OscConfig+0x2ac>)
 8002934:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	2b00      	cmp	r3, #0
 800293c:	d0f0      	beq.n	8002920 <HAL_RCC_OscConfig+0x200>
 800293e:	e015      	b.n	800296c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002940:	4b24      	ldr	r3, [pc, #144]	; (80029d4 <HAL_RCC_OscConfig+0x2b4>)
 8002942:	2200      	movs	r2, #0
 8002944:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002946:	f7ff fc0f 	bl	8002168 <HAL_GetTick>
 800294a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800294c:	e008      	b.n	8002960 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800294e:	f7ff fc0b 	bl	8002168 <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	2b02      	cmp	r3, #2
 800295a:	d901      	bls.n	8002960 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	e144      	b.n	8002bea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002960:	4b1a      	ldr	r3, [pc, #104]	; (80029cc <HAL_RCC_OscConfig+0x2ac>)
 8002962:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002964:	f003 0302 	and.w	r3, r3, #2
 8002968:	2b00      	cmp	r3, #0
 800296a:	d1f0      	bne.n	800294e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0304 	and.w	r3, r3, #4
 8002974:	2b00      	cmp	r3, #0
 8002976:	f000 80a0 	beq.w	8002aba <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800297a:	2300      	movs	r3, #0
 800297c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800297e:	4b13      	ldr	r3, [pc, #76]	; (80029cc <HAL_RCC_OscConfig+0x2ac>)
 8002980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d10f      	bne.n	80029aa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800298a:	2300      	movs	r3, #0
 800298c:	60bb      	str	r3, [r7, #8]
 800298e:	4b0f      	ldr	r3, [pc, #60]	; (80029cc <HAL_RCC_OscConfig+0x2ac>)
 8002990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002992:	4a0e      	ldr	r2, [pc, #56]	; (80029cc <HAL_RCC_OscConfig+0x2ac>)
 8002994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002998:	6413      	str	r3, [r2, #64]	; 0x40
 800299a:	4b0c      	ldr	r3, [pc, #48]	; (80029cc <HAL_RCC_OscConfig+0x2ac>)
 800299c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029a2:	60bb      	str	r3, [r7, #8]
 80029a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029a6:	2301      	movs	r3, #1
 80029a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029aa:	4b0b      	ldr	r3, [pc, #44]	; (80029d8 <HAL_RCC_OscConfig+0x2b8>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d121      	bne.n	80029fa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029b6:	4b08      	ldr	r3, [pc, #32]	; (80029d8 <HAL_RCC_OscConfig+0x2b8>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a07      	ldr	r2, [pc, #28]	; (80029d8 <HAL_RCC_OscConfig+0x2b8>)
 80029bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029c2:	f7ff fbd1 	bl	8002168 <HAL_GetTick>
 80029c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029c8:	e011      	b.n	80029ee <HAL_RCC_OscConfig+0x2ce>
 80029ca:	bf00      	nop
 80029cc:	40023800 	.word	0x40023800
 80029d0:	42470000 	.word	0x42470000
 80029d4:	42470e80 	.word	0x42470e80
 80029d8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029dc:	f7ff fbc4 	bl	8002168 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e0fd      	b.n	8002bea <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029ee:	4b81      	ldr	r3, [pc, #516]	; (8002bf4 <HAL_RCC_OscConfig+0x4d4>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d0f0      	beq.n	80029dc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d106      	bne.n	8002a10 <HAL_RCC_OscConfig+0x2f0>
 8002a02:	4b7d      	ldr	r3, [pc, #500]	; (8002bf8 <HAL_RCC_OscConfig+0x4d8>)
 8002a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a06:	4a7c      	ldr	r2, [pc, #496]	; (8002bf8 <HAL_RCC_OscConfig+0x4d8>)
 8002a08:	f043 0301 	orr.w	r3, r3, #1
 8002a0c:	6713      	str	r3, [r2, #112]	; 0x70
 8002a0e:	e01c      	b.n	8002a4a <HAL_RCC_OscConfig+0x32a>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	2b05      	cmp	r3, #5
 8002a16:	d10c      	bne.n	8002a32 <HAL_RCC_OscConfig+0x312>
 8002a18:	4b77      	ldr	r3, [pc, #476]	; (8002bf8 <HAL_RCC_OscConfig+0x4d8>)
 8002a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a1c:	4a76      	ldr	r2, [pc, #472]	; (8002bf8 <HAL_RCC_OscConfig+0x4d8>)
 8002a1e:	f043 0304 	orr.w	r3, r3, #4
 8002a22:	6713      	str	r3, [r2, #112]	; 0x70
 8002a24:	4b74      	ldr	r3, [pc, #464]	; (8002bf8 <HAL_RCC_OscConfig+0x4d8>)
 8002a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a28:	4a73      	ldr	r2, [pc, #460]	; (8002bf8 <HAL_RCC_OscConfig+0x4d8>)
 8002a2a:	f043 0301 	orr.w	r3, r3, #1
 8002a2e:	6713      	str	r3, [r2, #112]	; 0x70
 8002a30:	e00b      	b.n	8002a4a <HAL_RCC_OscConfig+0x32a>
 8002a32:	4b71      	ldr	r3, [pc, #452]	; (8002bf8 <HAL_RCC_OscConfig+0x4d8>)
 8002a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a36:	4a70      	ldr	r2, [pc, #448]	; (8002bf8 <HAL_RCC_OscConfig+0x4d8>)
 8002a38:	f023 0301 	bic.w	r3, r3, #1
 8002a3c:	6713      	str	r3, [r2, #112]	; 0x70
 8002a3e:	4b6e      	ldr	r3, [pc, #440]	; (8002bf8 <HAL_RCC_OscConfig+0x4d8>)
 8002a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a42:	4a6d      	ldr	r2, [pc, #436]	; (8002bf8 <HAL_RCC_OscConfig+0x4d8>)
 8002a44:	f023 0304 	bic.w	r3, r3, #4
 8002a48:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d015      	beq.n	8002a7e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a52:	f7ff fb89 	bl	8002168 <HAL_GetTick>
 8002a56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a58:	e00a      	b.n	8002a70 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a5a:	f7ff fb85 	bl	8002168 <HAL_GetTick>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d901      	bls.n	8002a70 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	e0bc      	b.n	8002bea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a70:	4b61      	ldr	r3, [pc, #388]	; (8002bf8 <HAL_RCC_OscConfig+0x4d8>)
 8002a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a74:	f003 0302 	and.w	r3, r3, #2
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d0ee      	beq.n	8002a5a <HAL_RCC_OscConfig+0x33a>
 8002a7c:	e014      	b.n	8002aa8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a7e:	f7ff fb73 	bl	8002168 <HAL_GetTick>
 8002a82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a84:	e00a      	b.n	8002a9c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a86:	f7ff fb6f 	bl	8002168 <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d901      	bls.n	8002a9c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002a98:	2303      	movs	r3, #3
 8002a9a:	e0a6      	b.n	8002bea <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a9c:	4b56      	ldr	r3, [pc, #344]	; (8002bf8 <HAL_RCC_OscConfig+0x4d8>)
 8002a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa0:	f003 0302 	and.w	r3, r3, #2
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d1ee      	bne.n	8002a86 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002aa8:	7dfb      	ldrb	r3, [r7, #23]
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d105      	bne.n	8002aba <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002aae:	4b52      	ldr	r3, [pc, #328]	; (8002bf8 <HAL_RCC_OscConfig+0x4d8>)
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab2:	4a51      	ldr	r2, [pc, #324]	; (8002bf8 <HAL_RCC_OscConfig+0x4d8>)
 8002ab4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ab8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	699b      	ldr	r3, [r3, #24]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	f000 8092 	beq.w	8002be8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ac4:	4b4c      	ldr	r3, [pc, #304]	; (8002bf8 <HAL_RCC_OscConfig+0x4d8>)
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f003 030c 	and.w	r3, r3, #12
 8002acc:	2b08      	cmp	r3, #8
 8002ace:	d05c      	beq.n	8002b8a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	699b      	ldr	r3, [r3, #24]
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d141      	bne.n	8002b5c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ad8:	4b48      	ldr	r3, [pc, #288]	; (8002bfc <HAL_RCC_OscConfig+0x4dc>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ade:	f7ff fb43 	bl	8002168 <HAL_GetTick>
 8002ae2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ae4:	e008      	b.n	8002af8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ae6:	f7ff fb3f 	bl	8002168 <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d901      	bls.n	8002af8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e078      	b.n	8002bea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002af8:	4b3f      	ldr	r3, [pc, #252]	; (8002bf8 <HAL_RCC_OscConfig+0x4d8>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d1f0      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	69da      	ldr	r2, [r3, #28]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a1b      	ldr	r3, [r3, #32]
 8002b0c:	431a      	orrs	r2, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b12:	019b      	lsls	r3, r3, #6
 8002b14:	431a      	orrs	r2, r3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b1a:	085b      	lsrs	r3, r3, #1
 8002b1c:	3b01      	subs	r3, #1
 8002b1e:	041b      	lsls	r3, r3, #16
 8002b20:	431a      	orrs	r2, r3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b26:	061b      	lsls	r3, r3, #24
 8002b28:	4933      	ldr	r1, [pc, #204]	; (8002bf8 <HAL_RCC_OscConfig+0x4d8>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b2e:	4b33      	ldr	r3, [pc, #204]	; (8002bfc <HAL_RCC_OscConfig+0x4dc>)
 8002b30:	2201      	movs	r2, #1
 8002b32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b34:	f7ff fb18 	bl	8002168 <HAL_GetTick>
 8002b38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b3a:	e008      	b.n	8002b4e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b3c:	f7ff fb14 	bl	8002168 <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d901      	bls.n	8002b4e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e04d      	b.n	8002bea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b4e:	4b2a      	ldr	r3, [pc, #168]	; (8002bf8 <HAL_RCC_OscConfig+0x4d8>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d0f0      	beq.n	8002b3c <HAL_RCC_OscConfig+0x41c>
 8002b5a:	e045      	b.n	8002be8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b5c:	4b27      	ldr	r3, [pc, #156]	; (8002bfc <HAL_RCC_OscConfig+0x4dc>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b62:	f7ff fb01 	bl	8002168 <HAL_GetTick>
 8002b66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b68:	e008      	b.n	8002b7c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b6a:	f7ff fafd 	bl	8002168 <HAL_GetTick>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	d901      	bls.n	8002b7c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	e036      	b.n	8002bea <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b7c:	4b1e      	ldr	r3, [pc, #120]	; (8002bf8 <HAL_RCC_OscConfig+0x4d8>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d1f0      	bne.n	8002b6a <HAL_RCC_OscConfig+0x44a>
 8002b88:	e02e      	b.n	8002be8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	699b      	ldr	r3, [r3, #24]
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d101      	bne.n	8002b96 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e029      	b.n	8002bea <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b96:	4b18      	ldr	r3, [pc, #96]	; (8002bf8 <HAL_RCC_OscConfig+0x4d8>)
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	69db      	ldr	r3, [r3, #28]
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	d11c      	bne.n	8002be4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d115      	bne.n	8002be4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002bb8:	68fa      	ldr	r2, [r7, #12]
 8002bba:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d10d      	bne.n	8002be4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d106      	bne.n	8002be4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d001      	beq.n	8002be8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e000      	b.n	8002bea <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002be8:	2300      	movs	r3, #0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3718      	adds	r7, #24
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	40007000 	.word	0x40007000
 8002bf8:	40023800 	.word	0x40023800
 8002bfc:	42470060 	.word	0x42470060

08002c00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d101      	bne.n	8002c14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e0cc      	b.n	8002dae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c14:	4b68      	ldr	r3, [pc, #416]	; (8002db8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 030f 	and.w	r3, r3, #15
 8002c1c:	683a      	ldr	r2, [r7, #0]
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d90c      	bls.n	8002c3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c22:	4b65      	ldr	r3, [pc, #404]	; (8002db8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c24:	683a      	ldr	r2, [r7, #0]
 8002c26:	b2d2      	uxtb	r2, r2
 8002c28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c2a:	4b63      	ldr	r3, [pc, #396]	; (8002db8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 030f 	and.w	r3, r3, #15
 8002c32:	683a      	ldr	r2, [r7, #0]
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d001      	beq.n	8002c3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e0b8      	b.n	8002dae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 0302 	and.w	r3, r3, #2
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d020      	beq.n	8002c8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0304 	and.w	r3, r3, #4
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d005      	beq.n	8002c60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c54:	4b59      	ldr	r3, [pc, #356]	; (8002dbc <HAL_RCC_ClockConfig+0x1bc>)
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	4a58      	ldr	r2, [pc, #352]	; (8002dbc <HAL_RCC_ClockConfig+0x1bc>)
 8002c5a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c5e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0308 	and.w	r3, r3, #8
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d005      	beq.n	8002c78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c6c:	4b53      	ldr	r3, [pc, #332]	; (8002dbc <HAL_RCC_ClockConfig+0x1bc>)
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	4a52      	ldr	r2, [pc, #328]	; (8002dbc <HAL_RCC_ClockConfig+0x1bc>)
 8002c72:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c78:	4b50      	ldr	r3, [pc, #320]	; (8002dbc <HAL_RCC_ClockConfig+0x1bc>)
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	494d      	ldr	r1, [pc, #308]	; (8002dbc <HAL_RCC_ClockConfig+0x1bc>)
 8002c86:	4313      	orrs	r3, r2
 8002c88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0301 	and.w	r3, r3, #1
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d044      	beq.n	8002d20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d107      	bne.n	8002cae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c9e:	4b47      	ldr	r3, [pc, #284]	; (8002dbc <HAL_RCC_ClockConfig+0x1bc>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d119      	bne.n	8002cde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e07f      	b.n	8002dae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d003      	beq.n	8002cbe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cba:	2b03      	cmp	r3, #3
 8002cbc:	d107      	bne.n	8002cce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cbe:	4b3f      	ldr	r3, [pc, #252]	; (8002dbc <HAL_RCC_ClockConfig+0x1bc>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d109      	bne.n	8002cde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e06f      	b.n	8002dae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cce:	4b3b      	ldr	r3, [pc, #236]	; (8002dbc <HAL_RCC_ClockConfig+0x1bc>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0302 	and.w	r3, r3, #2
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d101      	bne.n	8002cde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e067      	b.n	8002dae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cde:	4b37      	ldr	r3, [pc, #220]	; (8002dbc <HAL_RCC_ClockConfig+0x1bc>)
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f023 0203 	bic.w	r2, r3, #3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	4934      	ldr	r1, [pc, #208]	; (8002dbc <HAL_RCC_ClockConfig+0x1bc>)
 8002cec:	4313      	orrs	r3, r2
 8002cee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cf0:	f7ff fa3a 	bl	8002168 <HAL_GetTick>
 8002cf4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cf6:	e00a      	b.n	8002d0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cf8:	f7ff fa36 	bl	8002168 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d901      	bls.n	8002d0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e04f      	b.n	8002dae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d0e:	4b2b      	ldr	r3, [pc, #172]	; (8002dbc <HAL_RCC_ClockConfig+0x1bc>)
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f003 020c 	and.w	r2, r3, #12
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d1eb      	bne.n	8002cf8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d20:	4b25      	ldr	r3, [pc, #148]	; (8002db8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 030f 	and.w	r3, r3, #15
 8002d28:	683a      	ldr	r2, [r7, #0]
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d20c      	bcs.n	8002d48 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d2e:	4b22      	ldr	r3, [pc, #136]	; (8002db8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d30:	683a      	ldr	r2, [r7, #0]
 8002d32:	b2d2      	uxtb	r2, r2
 8002d34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d36:	4b20      	ldr	r3, [pc, #128]	; (8002db8 <HAL_RCC_ClockConfig+0x1b8>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 030f 	and.w	r3, r3, #15
 8002d3e:	683a      	ldr	r2, [r7, #0]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d001      	beq.n	8002d48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e032      	b.n	8002dae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0304 	and.w	r3, r3, #4
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d008      	beq.n	8002d66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d54:	4b19      	ldr	r3, [pc, #100]	; (8002dbc <HAL_RCC_ClockConfig+0x1bc>)
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	4916      	ldr	r1, [pc, #88]	; (8002dbc <HAL_RCC_ClockConfig+0x1bc>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0308 	and.w	r3, r3, #8
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d009      	beq.n	8002d86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d72:	4b12      	ldr	r3, [pc, #72]	; (8002dbc <HAL_RCC_ClockConfig+0x1bc>)
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	691b      	ldr	r3, [r3, #16]
 8002d7e:	00db      	lsls	r3, r3, #3
 8002d80:	490e      	ldr	r1, [pc, #56]	; (8002dbc <HAL_RCC_ClockConfig+0x1bc>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d86:	f000 f821 	bl	8002dcc <HAL_RCC_GetSysClockFreq>
 8002d8a:	4601      	mov	r1, r0
 8002d8c:	4b0b      	ldr	r3, [pc, #44]	; (8002dbc <HAL_RCC_ClockConfig+0x1bc>)
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	091b      	lsrs	r3, r3, #4
 8002d92:	f003 030f 	and.w	r3, r3, #15
 8002d96:	4a0a      	ldr	r2, [pc, #40]	; (8002dc0 <HAL_RCC_ClockConfig+0x1c0>)
 8002d98:	5cd3      	ldrb	r3, [r2, r3]
 8002d9a:	fa21 f303 	lsr.w	r3, r1, r3
 8002d9e:	4a09      	ldr	r2, [pc, #36]	; (8002dc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002da0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002da2:	4b09      	ldr	r3, [pc, #36]	; (8002dc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7ff f99a 	bl	80020e0 <HAL_InitTick>

  return HAL_OK;
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3710      	adds	r7, #16
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	40023c00 	.word	0x40023c00
 8002dbc:	40023800 	.word	0x40023800
 8002dc0:	080058a4 	.word	0x080058a4
 8002dc4:	2000004c 	.word	0x2000004c
 8002dc8:	20000050 	.word	0x20000050

08002dcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dce:	b085      	sub	sp, #20
 8002dd0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	607b      	str	r3, [r7, #4]
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	60fb      	str	r3, [r7, #12]
 8002dda:	2300      	movs	r3, #0
 8002ddc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002dde:	2300      	movs	r3, #0
 8002de0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002de2:	4b63      	ldr	r3, [pc, #396]	; (8002f70 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	f003 030c 	and.w	r3, r3, #12
 8002dea:	2b04      	cmp	r3, #4
 8002dec:	d007      	beq.n	8002dfe <HAL_RCC_GetSysClockFreq+0x32>
 8002dee:	2b08      	cmp	r3, #8
 8002df0:	d008      	beq.n	8002e04 <HAL_RCC_GetSysClockFreq+0x38>
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	f040 80b4 	bne.w	8002f60 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002df8:	4b5e      	ldr	r3, [pc, #376]	; (8002f74 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002dfa:	60bb      	str	r3, [r7, #8]
       break;
 8002dfc:	e0b3      	b.n	8002f66 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002dfe:	4b5e      	ldr	r3, [pc, #376]	; (8002f78 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002e00:	60bb      	str	r3, [r7, #8]
      break;
 8002e02:	e0b0      	b.n	8002f66 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e04:	4b5a      	ldr	r3, [pc, #360]	; (8002f70 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e0c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e0e:	4b58      	ldr	r3, [pc, #352]	; (8002f70 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d04a      	beq.n	8002eb0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e1a:	4b55      	ldr	r3, [pc, #340]	; (8002f70 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	099b      	lsrs	r3, r3, #6
 8002e20:	f04f 0400 	mov.w	r4, #0
 8002e24:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002e28:	f04f 0200 	mov.w	r2, #0
 8002e2c:	ea03 0501 	and.w	r5, r3, r1
 8002e30:	ea04 0602 	and.w	r6, r4, r2
 8002e34:	4629      	mov	r1, r5
 8002e36:	4632      	mov	r2, r6
 8002e38:	f04f 0300 	mov.w	r3, #0
 8002e3c:	f04f 0400 	mov.w	r4, #0
 8002e40:	0154      	lsls	r4, r2, #5
 8002e42:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002e46:	014b      	lsls	r3, r1, #5
 8002e48:	4619      	mov	r1, r3
 8002e4a:	4622      	mov	r2, r4
 8002e4c:	1b49      	subs	r1, r1, r5
 8002e4e:	eb62 0206 	sbc.w	r2, r2, r6
 8002e52:	f04f 0300 	mov.w	r3, #0
 8002e56:	f04f 0400 	mov.w	r4, #0
 8002e5a:	0194      	lsls	r4, r2, #6
 8002e5c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002e60:	018b      	lsls	r3, r1, #6
 8002e62:	1a5b      	subs	r3, r3, r1
 8002e64:	eb64 0402 	sbc.w	r4, r4, r2
 8002e68:	f04f 0100 	mov.w	r1, #0
 8002e6c:	f04f 0200 	mov.w	r2, #0
 8002e70:	00e2      	lsls	r2, r4, #3
 8002e72:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002e76:	00d9      	lsls	r1, r3, #3
 8002e78:	460b      	mov	r3, r1
 8002e7a:	4614      	mov	r4, r2
 8002e7c:	195b      	adds	r3, r3, r5
 8002e7e:	eb44 0406 	adc.w	r4, r4, r6
 8002e82:	f04f 0100 	mov.w	r1, #0
 8002e86:	f04f 0200 	mov.w	r2, #0
 8002e8a:	0262      	lsls	r2, r4, #9
 8002e8c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002e90:	0259      	lsls	r1, r3, #9
 8002e92:	460b      	mov	r3, r1
 8002e94:	4614      	mov	r4, r2
 8002e96:	4618      	mov	r0, r3
 8002e98:	4621      	mov	r1, r4
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f04f 0400 	mov.w	r4, #0
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	4623      	mov	r3, r4
 8002ea4:	f7fd f9f4 	bl	8000290 <__aeabi_uldivmod>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	460c      	mov	r4, r1
 8002eac:	60fb      	str	r3, [r7, #12]
 8002eae:	e049      	b.n	8002f44 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002eb0:	4b2f      	ldr	r3, [pc, #188]	; (8002f70 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	099b      	lsrs	r3, r3, #6
 8002eb6:	f04f 0400 	mov.w	r4, #0
 8002eba:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002ebe:	f04f 0200 	mov.w	r2, #0
 8002ec2:	ea03 0501 	and.w	r5, r3, r1
 8002ec6:	ea04 0602 	and.w	r6, r4, r2
 8002eca:	4629      	mov	r1, r5
 8002ecc:	4632      	mov	r2, r6
 8002ece:	f04f 0300 	mov.w	r3, #0
 8002ed2:	f04f 0400 	mov.w	r4, #0
 8002ed6:	0154      	lsls	r4, r2, #5
 8002ed8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002edc:	014b      	lsls	r3, r1, #5
 8002ede:	4619      	mov	r1, r3
 8002ee0:	4622      	mov	r2, r4
 8002ee2:	1b49      	subs	r1, r1, r5
 8002ee4:	eb62 0206 	sbc.w	r2, r2, r6
 8002ee8:	f04f 0300 	mov.w	r3, #0
 8002eec:	f04f 0400 	mov.w	r4, #0
 8002ef0:	0194      	lsls	r4, r2, #6
 8002ef2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002ef6:	018b      	lsls	r3, r1, #6
 8002ef8:	1a5b      	subs	r3, r3, r1
 8002efa:	eb64 0402 	sbc.w	r4, r4, r2
 8002efe:	f04f 0100 	mov.w	r1, #0
 8002f02:	f04f 0200 	mov.w	r2, #0
 8002f06:	00e2      	lsls	r2, r4, #3
 8002f08:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002f0c:	00d9      	lsls	r1, r3, #3
 8002f0e:	460b      	mov	r3, r1
 8002f10:	4614      	mov	r4, r2
 8002f12:	195b      	adds	r3, r3, r5
 8002f14:	eb44 0406 	adc.w	r4, r4, r6
 8002f18:	f04f 0100 	mov.w	r1, #0
 8002f1c:	f04f 0200 	mov.w	r2, #0
 8002f20:	02a2      	lsls	r2, r4, #10
 8002f22:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002f26:	0299      	lsls	r1, r3, #10
 8002f28:	460b      	mov	r3, r1
 8002f2a:	4614      	mov	r4, r2
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	4621      	mov	r1, r4
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f04f 0400 	mov.w	r4, #0
 8002f36:	461a      	mov	r2, r3
 8002f38:	4623      	mov	r3, r4
 8002f3a:	f7fd f9a9 	bl	8000290 <__aeabi_uldivmod>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	460c      	mov	r4, r1
 8002f42:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f44:	4b0a      	ldr	r3, [pc, #40]	; (8002f70 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	0c1b      	lsrs	r3, r3, #16
 8002f4a:	f003 0303 	and.w	r3, r3, #3
 8002f4e:	3301      	adds	r3, #1
 8002f50:	005b      	lsls	r3, r3, #1
 8002f52:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002f54:	68fa      	ldr	r2, [r7, #12]
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f5c:	60bb      	str	r3, [r7, #8]
      break;
 8002f5e:	e002      	b.n	8002f66 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f60:	4b04      	ldr	r3, [pc, #16]	; (8002f74 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002f62:	60bb      	str	r3, [r7, #8]
      break;
 8002f64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f66:	68bb      	ldr	r3, [r7, #8]
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3714      	adds	r7, #20
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f70:	40023800 	.word	0x40023800
 8002f74:	00f42400 	.word	0x00f42400
 8002f78:	007a1200 	.word	0x007a1200

08002f7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f80:	4b03      	ldr	r3, [pc, #12]	; (8002f90 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f82:	681b      	ldr	r3, [r3, #0]
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	2000004c 	.word	0x2000004c

08002f94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002f98:	f7ff fff0 	bl	8002f7c <HAL_RCC_GetHCLKFreq>
 8002f9c:	4601      	mov	r1, r0
 8002f9e:	4b05      	ldr	r3, [pc, #20]	; (8002fb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	0a9b      	lsrs	r3, r3, #10
 8002fa4:	f003 0307 	and.w	r3, r3, #7
 8002fa8:	4a03      	ldr	r2, [pc, #12]	; (8002fb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002faa:	5cd3      	ldrb	r3, [r2, r3]
 8002fac:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	40023800 	.word	0x40023800
 8002fb8:	080058b4 	.word	0x080058b4

08002fbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002fc0:	f7ff ffdc 	bl	8002f7c <HAL_RCC_GetHCLKFreq>
 8002fc4:	4601      	mov	r1, r0
 8002fc6:	4b05      	ldr	r3, [pc, #20]	; (8002fdc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	0b5b      	lsrs	r3, r3, #13
 8002fcc:	f003 0307 	and.w	r3, r3, #7
 8002fd0:	4a03      	ldr	r2, [pc, #12]	; (8002fe0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fd2:	5cd3      	ldrb	r3, [r2, r3]
 8002fd4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	40023800 	.word	0x40023800
 8002fe0:	080058b4 	.word	0x080058b4

08002fe4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e01d      	b.n	8003032 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d106      	bne.n	8003010 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f7fe fee6 	bl	8001ddc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2202      	movs	r2, #2
 8003014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	3304      	adds	r3, #4
 8003020:	4619      	mov	r1, r3
 8003022:	4610      	mov	r0, r2
 8003024:	f000 fb42 	bl	80036ac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003030:	2300      	movs	r3, #0
}
 8003032:	4618      	mov	r0, r3
 8003034:	3708      	adds	r7, #8
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}

0800303a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800303a:	b480      	push	{r7}
 800303c:	b085      	sub	sp, #20
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	68da      	ldr	r2, [r3, #12]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f042 0201 	orr.w	r2, r2, #1
 8003050:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	f003 0307 	and.w	r3, r3, #7
 800305c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2b06      	cmp	r3, #6
 8003062:	d007      	beq.n	8003074 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f042 0201 	orr.w	r2, r2, #1
 8003072:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003074:	2300      	movs	r3, #0
}
 8003076:	4618      	mov	r0, r3
 8003078:	3714      	adds	r7, #20
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr

08003082 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003082:	b580      	push	{r7, lr}
 8003084:	b082      	sub	sp, #8
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d101      	bne.n	8003094 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e01d      	b.n	80030d0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800309a:	b2db      	uxtb	r3, r3
 800309c:	2b00      	cmp	r3, #0
 800309e:	d106      	bne.n	80030ae <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f000 f815 	bl	80030d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2202      	movs	r2, #2
 80030b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	3304      	adds	r3, #4
 80030be:	4619      	mov	r1, r3
 80030c0:	4610      	mov	r0, r2
 80030c2:	f000 faf3 	bl	80036ac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2201      	movs	r2, #1
 80030ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030ce:	2300      	movs	r3, #0
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3708      	adds	r7, #8
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80030e0:	bf00      	nop
 80030e2:	370c      	adds	r7, #12
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr

080030ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2201      	movs	r2, #1
 80030fc:	6839      	ldr	r1, [r7, #0]
 80030fe:	4618      	mov	r0, r3
 8003100:	f000 fd7a 	bl	8003bf8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a10      	ldr	r2, [pc, #64]	; (800314c <HAL_TIM_PWM_Start+0x60>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d107      	bne.n	800311e <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800311c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	f003 0307 	and.w	r3, r3, #7
 8003128:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2b06      	cmp	r3, #6
 800312e:	d007      	beq.n	8003140 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f042 0201 	orr.w	r2, r2, #1
 800313e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3710      	adds	r7, #16
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	40010000 	.word	0x40010000

08003150 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	2b02      	cmp	r3, #2
 8003164:	d122      	bne.n	80031ac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	f003 0302 	and.w	r3, r3, #2
 8003170:	2b02      	cmp	r3, #2
 8003172:	d11b      	bne.n	80031ac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f06f 0202 	mvn.w	r2, #2
 800317c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2201      	movs	r2, #1
 8003182:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	699b      	ldr	r3, [r3, #24]
 800318a:	f003 0303 	and.w	r3, r3, #3
 800318e:	2b00      	cmp	r3, #0
 8003190:	d003      	beq.n	800319a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f000 fa6b 	bl	800366e <HAL_TIM_IC_CaptureCallback>
 8003198:	e005      	b.n	80031a6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 fa5d 	bl	800365a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f000 fa6e 	bl	8003682 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	691b      	ldr	r3, [r3, #16]
 80031b2:	f003 0304 	and.w	r3, r3, #4
 80031b6:	2b04      	cmp	r3, #4
 80031b8:	d122      	bne.n	8003200 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	f003 0304 	and.w	r3, r3, #4
 80031c4:	2b04      	cmp	r3, #4
 80031c6:	d11b      	bne.n	8003200 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f06f 0204 	mvn.w	r2, #4
 80031d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2202      	movs	r2, #2
 80031d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	699b      	ldr	r3, [r3, #24]
 80031de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d003      	beq.n	80031ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f000 fa41 	bl	800366e <HAL_TIM_IC_CaptureCallback>
 80031ec:	e005      	b.n	80031fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f000 fa33 	bl	800365a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f000 fa44 	bl	8003682 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	691b      	ldr	r3, [r3, #16]
 8003206:	f003 0308 	and.w	r3, r3, #8
 800320a:	2b08      	cmp	r3, #8
 800320c:	d122      	bne.n	8003254 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	f003 0308 	and.w	r3, r3, #8
 8003218:	2b08      	cmp	r3, #8
 800321a:	d11b      	bne.n	8003254 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f06f 0208 	mvn.w	r2, #8
 8003224:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2204      	movs	r2, #4
 800322a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	69db      	ldr	r3, [r3, #28]
 8003232:	f003 0303 	and.w	r3, r3, #3
 8003236:	2b00      	cmp	r3, #0
 8003238:	d003      	beq.n	8003242 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f000 fa17 	bl	800366e <HAL_TIM_IC_CaptureCallback>
 8003240:	e005      	b.n	800324e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f000 fa09 	bl	800365a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f000 fa1a 	bl	8003682 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	691b      	ldr	r3, [r3, #16]
 800325a:	f003 0310 	and.w	r3, r3, #16
 800325e:	2b10      	cmp	r3, #16
 8003260:	d122      	bne.n	80032a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	f003 0310 	and.w	r3, r3, #16
 800326c:	2b10      	cmp	r3, #16
 800326e:	d11b      	bne.n	80032a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f06f 0210 	mvn.w	r2, #16
 8003278:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2208      	movs	r2, #8
 800327e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	69db      	ldr	r3, [r3, #28]
 8003286:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800328a:	2b00      	cmp	r3, #0
 800328c:	d003      	beq.n	8003296 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f000 f9ed 	bl	800366e <HAL_TIM_IC_CaptureCallback>
 8003294:	e005      	b.n	80032a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 f9df 	bl	800365a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f000 f9f0 	bl	8003682 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	691b      	ldr	r3, [r3, #16]
 80032ae:	f003 0301 	and.w	r3, r3, #1
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d10e      	bne.n	80032d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	f003 0301 	and.w	r3, r3, #1
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d107      	bne.n	80032d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f06f 0201 	mvn.w	r2, #1
 80032cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f7fd fd52 	bl	8000d78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	691b      	ldr	r3, [r3, #16]
 80032da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032de:	2b80      	cmp	r3, #128	; 0x80
 80032e0:	d10e      	bne.n	8003300 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032ec:	2b80      	cmp	r3, #128	; 0x80
 80032ee:	d107      	bne.n	8003300 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80032f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f000 fd1a 	bl	8003d34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800330a:	2b40      	cmp	r3, #64	; 0x40
 800330c:	d10e      	bne.n	800332c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003318:	2b40      	cmp	r3, #64	; 0x40
 800331a:	d107      	bne.n	800332c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003324:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 f9b5 	bl	8003696 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	691b      	ldr	r3, [r3, #16]
 8003332:	f003 0320 	and.w	r3, r3, #32
 8003336:	2b20      	cmp	r3, #32
 8003338:	d10e      	bne.n	8003358 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	f003 0320 	and.w	r3, r3, #32
 8003344:	2b20      	cmp	r3, #32
 8003346:	d107      	bne.n	8003358 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f06f 0220 	mvn.w	r2, #32
 8003350:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f000 fce4 	bl	8003d20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003358:	bf00      	nop
 800335a:	3708      	adds	r7, #8
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}

08003360 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	60f8      	str	r0, [r7, #12]
 8003368:	60b9      	str	r1, [r7, #8]
 800336a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003372:	2b01      	cmp	r3, #1
 8003374:	d101      	bne.n	800337a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003376:	2302      	movs	r3, #2
 8003378:	e0b4      	b.n	80034e4 <HAL_TIM_PWM_ConfigChannel+0x184>
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2201      	movs	r2, #1
 800337e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2202      	movs	r2, #2
 8003386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2b0c      	cmp	r3, #12
 800338e:	f200 809f 	bhi.w	80034d0 <HAL_TIM_PWM_ConfigChannel+0x170>
 8003392:	a201      	add	r2, pc, #4	; (adr r2, 8003398 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003398:	080033cd 	.word	0x080033cd
 800339c:	080034d1 	.word	0x080034d1
 80033a0:	080034d1 	.word	0x080034d1
 80033a4:	080034d1 	.word	0x080034d1
 80033a8:	0800340d 	.word	0x0800340d
 80033ac:	080034d1 	.word	0x080034d1
 80033b0:	080034d1 	.word	0x080034d1
 80033b4:	080034d1 	.word	0x080034d1
 80033b8:	0800344f 	.word	0x0800344f
 80033bc:	080034d1 	.word	0x080034d1
 80033c0:	080034d1 	.word	0x080034d1
 80033c4:	080034d1 	.word	0x080034d1
 80033c8:	0800348f 	.word	0x0800348f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	68b9      	ldr	r1, [r7, #8]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f000 f9ea 	bl	80037ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	699a      	ldr	r2, [r3, #24]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f042 0208 	orr.w	r2, r2, #8
 80033e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	699a      	ldr	r2, [r3, #24]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f022 0204 	bic.w	r2, r2, #4
 80033f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	6999      	ldr	r1, [r3, #24]
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	691a      	ldr	r2, [r3, #16]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	430a      	orrs	r2, r1
 8003408:	619a      	str	r2, [r3, #24]
      break;
 800340a:	e062      	b.n	80034d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68b9      	ldr	r1, [r7, #8]
 8003412:	4618      	mov	r0, r3
 8003414:	f000 fa30 	bl	8003878 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	699a      	ldr	r2, [r3, #24]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003426:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	699a      	ldr	r2, [r3, #24]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003436:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	6999      	ldr	r1, [r3, #24]
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	021a      	lsls	r2, r3, #8
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	430a      	orrs	r2, r1
 800344a:	619a      	str	r2, [r3, #24]
      break;
 800344c:	e041      	b.n	80034d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68b9      	ldr	r1, [r7, #8]
 8003454:	4618      	mov	r0, r3
 8003456:	f000 fa7b 	bl	8003950 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	69da      	ldr	r2, [r3, #28]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f042 0208 	orr.w	r2, r2, #8
 8003468:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	69da      	ldr	r2, [r3, #28]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f022 0204 	bic.w	r2, r2, #4
 8003478:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	69d9      	ldr	r1, [r3, #28]
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	691a      	ldr	r2, [r3, #16]
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	430a      	orrs	r2, r1
 800348a:	61da      	str	r2, [r3, #28]
      break;
 800348c:	e021      	b.n	80034d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68b9      	ldr	r1, [r7, #8]
 8003494:	4618      	mov	r0, r3
 8003496:	f000 fac5 	bl	8003a24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	69da      	ldr	r2, [r3, #28]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	69da      	ldr	r2, [r3, #28]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	69d9      	ldr	r1, [r3, #28]
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	691b      	ldr	r3, [r3, #16]
 80034c4:	021a      	lsls	r2, r3, #8
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	430a      	orrs	r2, r1
 80034cc:	61da      	str	r2, [r3, #28]
      break;
 80034ce:	e000      	b.n	80034d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80034d0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2201      	movs	r2, #1
 80034d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034e2:	2300      	movs	r3, #0
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3710      	adds	r7, #16
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d101      	bne.n	8003504 <HAL_TIM_ConfigClockSource+0x18>
 8003500:	2302      	movs	r3, #2
 8003502:	e0a6      	b.n	8003652 <HAL_TIM_ConfigClockSource+0x166>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2202      	movs	r2, #2
 8003510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003522:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800352a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	68fa      	ldr	r2, [r7, #12]
 8003532:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2b40      	cmp	r3, #64	; 0x40
 800353a:	d067      	beq.n	800360c <HAL_TIM_ConfigClockSource+0x120>
 800353c:	2b40      	cmp	r3, #64	; 0x40
 800353e:	d80b      	bhi.n	8003558 <HAL_TIM_ConfigClockSource+0x6c>
 8003540:	2b10      	cmp	r3, #16
 8003542:	d073      	beq.n	800362c <HAL_TIM_ConfigClockSource+0x140>
 8003544:	2b10      	cmp	r3, #16
 8003546:	d802      	bhi.n	800354e <HAL_TIM_ConfigClockSource+0x62>
 8003548:	2b00      	cmp	r3, #0
 800354a:	d06f      	beq.n	800362c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800354c:	e078      	b.n	8003640 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800354e:	2b20      	cmp	r3, #32
 8003550:	d06c      	beq.n	800362c <HAL_TIM_ConfigClockSource+0x140>
 8003552:	2b30      	cmp	r3, #48	; 0x30
 8003554:	d06a      	beq.n	800362c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003556:	e073      	b.n	8003640 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003558:	2b70      	cmp	r3, #112	; 0x70
 800355a:	d00d      	beq.n	8003578 <HAL_TIM_ConfigClockSource+0x8c>
 800355c:	2b70      	cmp	r3, #112	; 0x70
 800355e:	d804      	bhi.n	800356a <HAL_TIM_ConfigClockSource+0x7e>
 8003560:	2b50      	cmp	r3, #80	; 0x50
 8003562:	d033      	beq.n	80035cc <HAL_TIM_ConfigClockSource+0xe0>
 8003564:	2b60      	cmp	r3, #96	; 0x60
 8003566:	d041      	beq.n	80035ec <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003568:	e06a      	b.n	8003640 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800356a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800356e:	d066      	beq.n	800363e <HAL_TIM_ConfigClockSource+0x152>
 8003570:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003574:	d017      	beq.n	80035a6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003576:	e063      	b.n	8003640 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6818      	ldr	r0, [r3, #0]
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	6899      	ldr	r1, [r3, #8]
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	685a      	ldr	r2, [r3, #4]
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	f000 fb16 	bl	8003bb8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800359a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	68fa      	ldr	r2, [r7, #12]
 80035a2:	609a      	str	r2, [r3, #8]
      break;
 80035a4:	e04c      	b.n	8003640 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6818      	ldr	r0, [r3, #0]
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	6899      	ldr	r1, [r3, #8]
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	685a      	ldr	r2, [r3, #4]
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	f000 faff 	bl	8003bb8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	689a      	ldr	r2, [r3, #8]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035c8:	609a      	str	r2, [r3, #8]
      break;
 80035ca:	e039      	b.n	8003640 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6818      	ldr	r0, [r3, #0]
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	6859      	ldr	r1, [r3, #4]
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	461a      	mov	r2, r3
 80035da:	f000 fa73 	bl	8003ac4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	2150      	movs	r1, #80	; 0x50
 80035e4:	4618      	mov	r0, r3
 80035e6:	f000 facc 	bl	8003b82 <TIM_ITRx_SetConfig>
      break;
 80035ea:	e029      	b.n	8003640 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6818      	ldr	r0, [r3, #0]
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	6859      	ldr	r1, [r3, #4]
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	461a      	mov	r2, r3
 80035fa:	f000 fa92 	bl	8003b22 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	2160      	movs	r1, #96	; 0x60
 8003604:	4618      	mov	r0, r3
 8003606:	f000 fabc 	bl	8003b82 <TIM_ITRx_SetConfig>
      break;
 800360a:	e019      	b.n	8003640 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6818      	ldr	r0, [r3, #0]
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	6859      	ldr	r1, [r3, #4]
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	461a      	mov	r2, r3
 800361a:	f000 fa53 	bl	8003ac4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2140      	movs	r1, #64	; 0x40
 8003624:	4618      	mov	r0, r3
 8003626:	f000 faac 	bl	8003b82 <TIM_ITRx_SetConfig>
      break;
 800362a:	e009      	b.n	8003640 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4619      	mov	r1, r3
 8003636:	4610      	mov	r0, r2
 8003638:	f000 faa3 	bl	8003b82 <TIM_ITRx_SetConfig>
      break;
 800363c:	e000      	b.n	8003640 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800363e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003650:	2300      	movs	r3, #0
}
 8003652:	4618      	mov	r0, r3
 8003654:	3710      	adds	r7, #16
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}

0800365a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800365a:	b480      	push	{r7}
 800365c:	b083      	sub	sp, #12
 800365e:	af00      	add	r7, sp, #0
 8003660:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003662:	bf00      	nop
 8003664:	370c      	adds	r7, #12
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr

0800366e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800366e:	b480      	push	{r7}
 8003670:	b083      	sub	sp, #12
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003676:	bf00      	nop
 8003678:	370c      	adds	r7, #12
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr

08003682 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003682:	b480      	push	{r7}
 8003684:	b083      	sub	sp, #12
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800368a:	bf00      	nop
 800368c:	370c      	adds	r7, #12
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr

08003696 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003696:	b480      	push	{r7}
 8003698:	b083      	sub	sp, #12
 800369a:	af00      	add	r7, sp, #0
 800369c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800369e:	bf00      	nop
 80036a0:	370c      	adds	r7, #12
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr
	...

080036ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b085      	sub	sp, #20
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	4a34      	ldr	r2, [pc, #208]	; (8003790 <TIM_Base_SetConfig+0xe4>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d00f      	beq.n	80036e4 <TIM_Base_SetConfig+0x38>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036ca:	d00b      	beq.n	80036e4 <TIM_Base_SetConfig+0x38>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	4a31      	ldr	r2, [pc, #196]	; (8003794 <TIM_Base_SetConfig+0xe8>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d007      	beq.n	80036e4 <TIM_Base_SetConfig+0x38>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	4a30      	ldr	r2, [pc, #192]	; (8003798 <TIM_Base_SetConfig+0xec>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d003      	beq.n	80036e4 <TIM_Base_SetConfig+0x38>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	4a2f      	ldr	r2, [pc, #188]	; (800379c <TIM_Base_SetConfig+0xf0>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d108      	bne.n	80036f6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	68fa      	ldr	r2, [r7, #12]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a25      	ldr	r2, [pc, #148]	; (8003790 <TIM_Base_SetConfig+0xe4>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d01b      	beq.n	8003736 <TIM_Base_SetConfig+0x8a>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003704:	d017      	beq.n	8003736 <TIM_Base_SetConfig+0x8a>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a22      	ldr	r2, [pc, #136]	; (8003794 <TIM_Base_SetConfig+0xe8>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d013      	beq.n	8003736 <TIM_Base_SetConfig+0x8a>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a21      	ldr	r2, [pc, #132]	; (8003798 <TIM_Base_SetConfig+0xec>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d00f      	beq.n	8003736 <TIM_Base_SetConfig+0x8a>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a20      	ldr	r2, [pc, #128]	; (800379c <TIM_Base_SetConfig+0xf0>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d00b      	beq.n	8003736 <TIM_Base_SetConfig+0x8a>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a1f      	ldr	r2, [pc, #124]	; (80037a0 <TIM_Base_SetConfig+0xf4>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d007      	beq.n	8003736 <TIM_Base_SetConfig+0x8a>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a1e      	ldr	r2, [pc, #120]	; (80037a4 <TIM_Base_SetConfig+0xf8>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d003      	beq.n	8003736 <TIM_Base_SetConfig+0x8a>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4a1d      	ldr	r2, [pc, #116]	; (80037a8 <TIM_Base_SetConfig+0xfc>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d108      	bne.n	8003748 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800373c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	68fa      	ldr	r2, [r7, #12]
 8003744:	4313      	orrs	r3, r2
 8003746:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	695b      	ldr	r3, [r3, #20]
 8003752:	4313      	orrs	r3, r2
 8003754:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	68fa      	ldr	r2, [r7, #12]
 800375a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	689a      	ldr	r2, [r3, #8]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	4a08      	ldr	r2, [pc, #32]	; (8003790 <TIM_Base_SetConfig+0xe4>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d103      	bne.n	800377c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	691a      	ldr	r2, [r3, #16]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	615a      	str	r2, [r3, #20]
}
 8003782:	bf00      	nop
 8003784:	3714      	adds	r7, #20
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	40010000 	.word	0x40010000
 8003794:	40000400 	.word	0x40000400
 8003798:	40000800 	.word	0x40000800
 800379c:	40000c00 	.word	0x40000c00
 80037a0:	40014000 	.word	0x40014000
 80037a4:	40014400 	.word	0x40014400
 80037a8:	40014800 	.word	0x40014800

080037ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b087      	sub	sp, #28
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a1b      	ldr	r3, [r3, #32]
 80037ba:	f023 0201 	bic.w	r2, r3, #1
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a1b      	ldr	r3, [r3, #32]
 80037c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	699b      	ldr	r3, [r3, #24]
 80037d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f023 0303 	bic.w	r3, r3, #3
 80037e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	68fa      	ldr	r2, [r7, #12]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	f023 0302 	bic.w	r3, r3, #2
 80037f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	697a      	ldr	r2, [r7, #20]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4a1c      	ldr	r2, [pc, #112]	; (8003874 <TIM_OC1_SetConfig+0xc8>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d10c      	bne.n	8003822 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	f023 0308 	bic.w	r3, r3, #8
 800380e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	697a      	ldr	r2, [r7, #20]
 8003816:	4313      	orrs	r3, r2
 8003818:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	f023 0304 	bic.w	r3, r3, #4
 8003820:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a13      	ldr	r2, [pc, #76]	; (8003874 <TIM_OC1_SetConfig+0xc8>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d111      	bne.n	800384e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003830:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003838:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	695b      	ldr	r3, [r3, #20]
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	4313      	orrs	r3, r2
 8003842:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	699b      	ldr	r3, [r3, #24]
 8003848:	693a      	ldr	r2, [r7, #16]
 800384a:	4313      	orrs	r3, r2
 800384c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	693a      	ldr	r2, [r7, #16]
 8003852:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	68fa      	ldr	r2, [r7, #12]
 8003858:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	685a      	ldr	r2, [r3, #4]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	697a      	ldr	r2, [r7, #20]
 8003866:	621a      	str	r2, [r3, #32]
}
 8003868:	bf00      	nop
 800386a:	371c      	adds	r7, #28
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr
 8003874:	40010000 	.word	0x40010000

08003878 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003878:	b480      	push	{r7}
 800387a:	b087      	sub	sp, #28
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a1b      	ldr	r3, [r3, #32]
 8003886:	f023 0210 	bic.w	r2, r3, #16
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a1b      	ldr	r3, [r3, #32]
 8003892:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	699b      	ldr	r3, [r3, #24]
 800389e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	021b      	lsls	r3, r3, #8
 80038b6:	68fa      	ldr	r2, [r7, #12]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	f023 0320 	bic.w	r3, r3, #32
 80038c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	011b      	lsls	r3, r3, #4
 80038ca:	697a      	ldr	r2, [r7, #20]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	4a1e      	ldr	r2, [pc, #120]	; (800394c <TIM_OC2_SetConfig+0xd4>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d10d      	bne.n	80038f4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	011b      	lsls	r3, r3, #4
 80038e6:	697a      	ldr	r2, [r7, #20]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	4a15      	ldr	r2, [pc, #84]	; (800394c <TIM_OC2_SetConfig+0xd4>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d113      	bne.n	8003924 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003902:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003904:	693b      	ldr	r3, [r7, #16]
 8003906:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800390a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	695b      	ldr	r3, [r3, #20]
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	693a      	ldr	r2, [r7, #16]
 8003914:	4313      	orrs	r3, r2
 8003916:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	693a      	ldr	r2, [r7, #16]
 8003920:	4313      	orrs	r3, r2
 8003922:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	693a      	ldr	r2, [r7, #16]
 8003928:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	68fa      	ldr	r2, [r7, #12]
 800392e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	685a      	ldr	r2, [r3, #4]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	697a      	ldr	r2, [r7, #20]
 800393c:	621a      	str	r2, [r3, #32]
}
 800393e:	bf00      	nop
 8003940:	371c      	adds	r7, #28
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr
 800394a:	bf00      	nop
 800394c:	40010000 	.word	0x40010000

08003950 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003950:	b480      	push	{r7}
 8003952:	b087      	sub	sp, #28
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a1b      	ldr	r3, [r3, #32]
 800395e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a1b      	ldr	r3, [r3, #32]
 800396a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	69db      	ldr	r3, [r3, #28]
 8003976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800397e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f023 0303 	bic.w	r3, r3, #3
 8003986:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	68fa      	ldr	r2, [r7, #12]
 800398e:	4313      	orrs	r3, r2
 8003990:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003998:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	021b      	lsls	r3, r3, #8
 80039a0:	697a      	ldr	r2, [r7, #20]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a1d      	ldr	r2, [pc, #116]	; (8003a20 <TIM_OC3_SetConfig+0xd0>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d10d      	bne.n	80039ca <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80039b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	021b      	lsls	r3, r3, #8
 80039bc:	697a      	ldr	r2, [r7, #20]
 80039be:	4313      	orrs	r3, r2
 80039c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80039c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a14      	ldr	r2, [pc, #80]	; (8003a20 <TIM_OC3_SetConfig+0xd0>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d113      	bne.n	80039fa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80039d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80039e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	695b      	ldr	r3, [r3, #20]
 80039e6:	011b      	lsls	r3, r3, #4
 80039e8:	693a      	ldr	r2, [r7, #16]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	699b      	ldr	r3, [r3, #24]
 80039f2:	011b      	lsls	r3, r3, #4
 80039f4:	693a      	ldr	r2, [r7, #16]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	693a      	ldr	r2, [r7, #16]
 80039fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	68fa      	ldr	r2, [r7, #12]
 8003a04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	685a      	ldr	r2, [r3, #4]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	697a      	ldr	r2, [r7, #20]
 8003a12:	621a      	str	r2, [r3, #32]
}
 8003a14:	bf00      	nop
 8003a16:	371c      	adds	r7, #28
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr
 8003a20:	40010000 	.word	0x40010000

08003a24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b087      	sub	sp, #28
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a1b      	ldr	r3, [r3, #32]
 8003a32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a1b      	ldr	r3, [r3, #32]
 8003a3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	69db      	ldr	r3, [r3, #28]
 8003a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	021b      	lsls	r3, r3, #8
 8003a62:	68fa      	ldr	r2, [r7, #12]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	031b      	lsls	r3, r3, #12
 8003a76:	693a      	ldr	r2, [r7, #16]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	4a10      	ldr	r2, [pc, #64]	; (8003ac0 <TIM_OC4_SetConfig+0x9c>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d109      	bne.n	8003a98 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a8a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	695b      	ldr	r3, [r3, #20]
 8003a90:	019b      	lsls	r3, r3, #6
 8003a92:	697a      	ldr	r2, [r7, #20]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	697a      	ldr	r2, [r7, #20]
 8003a9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	68fa      	ldr	r2, [r7, #12]
 8003aa2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	685a      	ldr	r2, [r3, #4]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	693a      	ldr	r2, [r7, #16]
 8003ab0:	621a      	str	r2, [r3, #32]
}
 8003ab2:	bf00      	nop
 8003ab4:	371c      	adds	r7, #28
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr
 8003abe:	bf00      	nop
 8003ac0:	40010000 	.word	0x40010000

08003ac4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b087      	sub	sp, #28
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	6a1b      	ldr	r3, [r3, #32]
 8003ad4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	6a1b      	ldr	r3, [r3, #32]
 8003ada:	f023 0201 	bic.w	r2, r3, #1
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	699b      	ldr	r3, [r3, #24]
 8003ae6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003aee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	011b      	lsls	r3, r3, #4
 8003af4:	693a      	ldr	r2, [r7, #16]
 8003af6:	4313      	orrs	r3, r2
 8003af8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	f023 030a 	bic.w	r3, r3, #10
 8003b00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b02:	697a      	ldr	r2, [r7, #20]
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	693a      	ldr	r2, [r7, #16]
 8003b0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	697a      	ldr	r2, [r7, #20]
 8003b14:	621a      	str	r2, [r3, #32]
}
 8003b16:	bf00      	nop
 8003b18:	371c      	adds	r7, #28
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr

08003b22 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b22:	b480      	push	{r7}
 8003b24:	b087      	sub	sp, #28
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	60f8      	str	r0, [r7, #12]
 8003b2a:	60b9      	str	r1, [r7, #8]
 8003b2c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	6a1b      	ldr	r3, [r3, #32]
 8003b32:	f023 0210 	bic.w	r2, r3, #16
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	699b      	ldr	r3, [r3, #24]
 8003b3e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	6a1b      	ldr	r3, [r3, #32]
 8003b44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b4c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	031b      	lsls	r3, r3, #12
 8003b52:	697a      	ldr	r2, [r7, #20]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b5e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	011b      	lsls	r3, r3, #4
 8003b64:	693a      	ldr	r2, [r7, #16]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	697a      	ldr	r2, [r7, #20]
 8003b6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	693a      	ldr	r2, [r7, #16]
 8003b74:	621a      	str	r2, [r3, #32]
}
 8003b76:	bf00      	nop
 8003b78:	371c      	adds	r7, #28
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr

08003b82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b82:	b480      	push	{r7}
 8003b84:	b085      	sub	sp, #20
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
 8003b8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b9a:	683a      	ldr	r2, [r7, #0]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	f043 0307 	orr.w	r3, r3, #7
 8003ba4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	68fa      	ldr	r2, [r7, #12]
 8003baa:	609a      	str	r2, [r3, #8]
}
 8003bac:	bf00      	nop
 8003bae:	3714      	adds	r7, #20
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr

08003bb8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b087      	sub	sp, #28
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	60b9      	str	r1, [r7, #8]
 8003bc2:	607a      	str	r2, [r7, #4]
 8003bc4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003bd2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	021a      	lsls	r2, r3, #8
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	431a      	orrs	r2, r3
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	697a      	ldr	r2, [r7, #20]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	697a      	ldr	r2, [r7, #20]
 8003bea:	609a      	str	r2, [r3, #8]
}
 8003bec:	bf00      	nop
 8003bee:	371c      	adds	r7, #28
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b087      	sub	sp, #28
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	f003 031f 	and.w	r3, r3, #31
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c10:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6a1a      	ldr	r2, [r3, #32]
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	43db      	mvns	r3, r3
 8003c1a:	401a      	ands	r2, r3
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6a1a      	ldr	r2, [r3, #32]
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	f003 031f 	and.w	r3, r3, #31
 8003c2a:	6879      	ldr	r1, [r7, #4]
 8003c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c30:	431a      	orrs	r2, r3
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	621a      	str	r2, [r3, #32]
}
 8003c36:	bf00      	nop
 8003c38:	371c      	adds	r7, #28
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
	...

08003c44 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b085      	sub	sp, #20
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d101      	bne.n	8003c5c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c58:	2302      	movs	r3, #2
 8003c5a:	e050      	b.n	8003cfe <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2202      	movs	r2, #2
 8003c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	68fa      	ldr	r2, [r7, #12]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68fa      	ldr	r2, [r7, #12]
 8003c94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a1c      	ldr	r2, [pc, #112]	; (8003d0c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d018      	beq.n	8003cd2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ca8:	d013      	beq.n	8003cd2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a18      	ldr	r2, [pc, #96]	; (8003d10 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d00e      	beq.n	8003cd2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a16      	ldr	r2, [pc, #88]	; (8003d14 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d009      	beq.n	8003cd2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a15      	ldr	r2, [pc, #84]	; (8003d18 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d004      	beq.n	8003cd2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a13      	ldr	r2, [pc, #76]	; (8003d1c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d10c      	bne.n	8003cec <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003cd8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	68ba      	ldr	r2, [r7, #8]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	68ba      	ldr	r2, [r7, #8]
 8003cea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003cfc:	2300      	movs	r3, #0
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3714      	adds	r7, #20
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	40010000 	.word	0x40010000
 8003d10:	40000400 	.word	0x40000400
 8003d14:	40000800 	.word	0x40000800
 8003d18:	40000c00 	.word	0x40000c00
 8003d1c:	40014000 	.word	0x40014000

08003d20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d28:	bf00      	nop
 8003d2a:	370c      	adds	r7, #12
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d3c:	bf00      	nop
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d101      	bne.n	8003d5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e03f      	b.n	8003dda <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d106      	bne.n	8003d74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f7fe f896 	bl	8001ea0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2224      	movs	r2, #36	; 0x24
 8003d78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	68da      	ldr	r2, [r3, #12]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f000 fb97 	bl	80044c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	691a      	ldr	r2, [r3, #16]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003da0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	695a      	ldr	r2, [r3, #20]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003db0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68da      	ldr	r2, [r3, #12]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003dc0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2220      	movs	r2, #32
 8003dcc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2220      	movs	r2, #32
 8003dd4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3708      	adds	r7, #8
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}

08003de2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003de2:	b580      	push	{r7, lr}
 8003de4:	b088      	sub	sp, #32
 8003de6:	af02      	add	r7, sp, #8
 8003de8:	60f8      	str	r0, [r7, #12]
 8003dea:	60b9      	str	r1, [r7, #8]
 8003dec:	603b      	str	r3, [r7, #0]
 8003dee:	4613      	mov	r3, r2
 8003df0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003df2:	2300      	movs	r3, #0
 8003df4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	2b20      	cmp	r3, #32
 8003e00:	f040 8083 	bne.w	8003f0a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d002      	beq.n	8003e10 <HAL_UART_Transmit+0x2e>
 8003e0a:	88fb      	ldrh	r3, [r7, #6]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d101      	bne.n	8003e14 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e07b      	b.n	8003f0c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d101      	bne.n	8003e22 <HAL_UART_Transmit+0x40>
 8003e1e:	2302      	movs	r3, #2
 8003e20:	e074      	b.n	8003f0c <HAL_UART_Transmit+0x12a>
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2201      	movs	r2, #1
 8003e26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2221      	movs	r2, #33	; 0x21
 8003e34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003e38:	f7fe f996 	bl	8002168 <HAL_GetTick>
 8003e3c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	88fa      	ldrh	r2, [r7, #6]
 8003e42:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	88fa      	ldrh	r2, [r7, #6]
 8003e48:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003e52:	e042      	b.n	8003eda <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	b29a      	uxth	r2, r3
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e6a:	d122      	bne.n	8003eb2 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	9300      	str	r3, [sp, #0]
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	2200      	movs	r2, #0
 8003e74:	2180      	movs	r1, #128	; 0x80
 8003e76:	68f8      	ldr	r0, [r7, #12]
 8003e78:	f000 f9b6 	bl	80041e8 <UART_WaitOnFlagUntilTimeout>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d001      	beq.n	8003e86 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e042      	b.n	8003f0c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	881b      	ldrh	r3, [r3, #0]
 8003e8e:	461a      	mov	r2, r3
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e98:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d103      	bne.n	8003eaa <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	3302      	adds	r3, #2
 8003ea6:	60bb      	str	r3, [r7, #8]
 8003ea8:	e017      	b.n	8003eda <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	3301      	adds	r3, #1
 8003eae:	60bb      	str	r3, [r7, #8]
 8003eb0:	e013      	b.n	8003eda <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	9300      	str	r3, [sp, #0]
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	2180      	movs	r1, #128	; 0x80
 8003ebc:	68f8      	ldr	r0, [r7, #12]
 8003ebe:	f000 f993 	bl	80041e8 <UART_WaitOnFlagUntilTimeout>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d001      	beq.n	8003ecc <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003ec8:	2303      	movs	r3, #3
 8003eca:	e01f      	b.n	8003f0c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	1c5a      	adds	r2, r3, #1
 8003ed0:	60ba      	str	r2, [r7, #8]
 8003ed2:	781a      	ldrb	r2, [r3, #0]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d1b7      	bne.n	8003e54 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	9300      	str	r3, [sp, #0]
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	2200      	movs	r2, #0
 8003eec:	2140      	movs	r1, #64	; 0x40
 8003eee:	68f8      	ldr	r0, [r7, #12]
 8003ef0:	f000 f97a 	bl	80041e8 <UART_WaitOnFlagUntilTimeout>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d001      	beq.n	8003efe <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	e006      	b.n	8003f0c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2220      	movs	r2, #32
 8003f02:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003f06:	2300      	movs	r3, #0
 8003f08:	e000      	b.n	8003f0c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003f0a:	2302      	movs	r3, #2
  }
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3718      	adds	r7, #24
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b085      	sub	sp, #20
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	60b9      	str	r1, [r7, #8]
 8003f1e:	4613      	mov	r3, r2
 8003f20:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	2b20      	cmp	r3, #32
 8003f2c:	d140      	bne.n	8003fb0 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d002      	beq.n	8003f3a <HAL_UART_Receive_IT+0x26>
 8003f34:	88fb      	ldrh	r3, [r7, #6]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d101      	bne.n	8003f3e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e039      	b.n	8003fb2 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d101      	bne.n	8003f4c <HAL_UART_Receive_IT+0x38>
 8003f48:	2302      	movs	r3, #2
 8003f4a:	e032      	b.n	8003fb2 <HAL_UART_Receive_IT+0x9e>
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	68ba      	ldr	r2, [r7, #8]
 8003f58:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	88fa      	ldrh	r2, [r7, #6]
 8003f5e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	88fa      	ldrh	r2, [r7, #6]
 8003f64:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2222      	movs	r2, #34	; 0x22
 8003f70:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	68da      	ldr	r2, [r3, #12]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f8a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	695a      	ldr	r2, [r3, #20]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f042 0201 	orr.w	r2, r2, #1
 8003f9a:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68da      	ldr	r2, [r3, #12]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f042 0220 	orr.w	r2, r2, #32
 8003faa:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003fac:	2300      	movs	r3, #0
 8003fae:	e000      	b.n	8003fb2 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003fb0:	2302      	movs	r3, #2
  }
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3714      	adds	r7, #20
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr
	...

08003fc0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b088      	sub	sp, #32
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	695b      	ldr	r3, [r3, #20]
 8003fde:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	f003 030f 	and.w	r3, r3, #15
 8003fee:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d10d      	bne.n	8004012 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	f003 0320 	and.w	r3, r3, #32
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d008      	beq.n	8004012 <HAL_UART_IRQHandler+0x52>
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	f003 0320 	and.w	r3, r3, #32
 8004006:	2b00      	cmp	r3, #0
 8004008:	d003      	beq.n	8004012 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f000 f9d6 	bl	80043bc <UART_Receive_IT>
      return;
 8004010:	e0d1      	b.n	80041b6 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	2b00      	cmp	r3, #0
 8004016:	f000 80b0 	beq.w	800417a <HAL_UART_IRQHandler+0x1ba>
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	f003 0301 	and.w	r3, r3, #1
 8004020:	2b00      	cmp	r3, #0
 8004022:	d105      	bne.n	8004030 <HAL_UART_IRQHandler+0x70>
 8004024:	69bb      	ldr	r3, [r7, #24]
 8004026:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800402a:	2b00      	cmp	r3, #0
 800402c:	f000 80a5 	beq.w	800417a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	f003 0301 	and.w	r3, r3, #1
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00a      	beq.n	8004050 <HAL_UART_IRQHandler+0x90>
 800403a:	69bb      	ldr	r3, [r7, #24]
 800403c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004040:	2b00      	cmp	r3, #0
 8004042:	d005      	beq.n	8004050 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004048:	f043 0201 	orr.w	r2, r3, #1
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004050:	69fb      	ldr	r3, [r7, #28]
 8004052:	f003 0304 	and.w	r3, r3, #4
 8004056:	2b00      	cmp	r3, #0
 8004058:	d00a      	beq.n	8004070 <HAL_UART_IRQHandler+0xb0>
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	f003 0301 	and.w	r3, r3, #1
 8004060:	2b00      	cmp	r3, #0
 8004062:	d005      	beq.n	8004070 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004068:	f043 0202 	orr.w	r2, r3, #2
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	f003 0302 	and.w	r3, r3, #2
 8004076:	2b00      	cmp	r3, #0
 8004078:	d00a      	beq.n	8004090 <HAL_UART_IRQHandler+0xd0>
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	f003 0301 	and.w	r3, r3, #1
 8004080:	2b00      	cmp	r3, #0
 8004082:	d005      	beq.n	8004090 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004088:	f043 0204 	orr.w	r2, r3, #4
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004090:	69fb      	ldr	r3, [r7, #28]
 8004092:	f003 0308 	and.w	r3, r3, #8
 8004096:	2b00      	cmp	r3, #0
 8004098:	d00f      	beq.n	80040ba <HAL_UART_IRQHandler+0xfa>
 800409a:	69bb      	ldr	r3, [r7, #24]
 800409c:	f003 0320 	and.w	r3, r3, #32
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d104      	bne.n	80040ae <HAL_UART_IRQHandler+0xee>
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	f003 0301 	and.w	r3, r3, #1
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d005      	beq.n	80040ba <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040b2:	f043 0208 	orr.w	r2, r3, #8
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d078      	beq.n	80041b4 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	f003 0320 	and.w	r3, r3, #32
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d007      	beq.n	80040dc <HAL_UART_IRQHandler+0x11c>
 80040cc:	69bb      	ldr	r3, [r7, #24]
 80040ce:	f003 0320 	and.w	r3, r3, #32
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d002      	beq.n	80040dc <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f000 f970 	bl	80043bc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	695b      	ldr	r3, [r3, #20]
 80040e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040e6:	2b40      	cmp	r3, #64	; 0x40
 80040e8:	bf0c      	ite	eq
 80040ea:	2301      	moveq	r3, #1
 80040ec:	2300      	movne	r3, #0
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040f6:	f003 0308 	and.w	r3, r3, #8
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d102      	bne.n	8004104 <HAL_UART_IRQHandler+0x144>
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d031      	beq.n	8004168 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f000 f8b9 	bl	800427c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	695b      	ldr	r3, [r3, #20]
 8004110:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004114:	2b40      	cmp	r3, #64	; 0x40
 8004116:	d123      	bne.n	8004160 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	695a      	ldr	r2, [r3, #20]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004126:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800412c:	2b00      	cmp	r3, #0
 800412e:	d013      	beq.n	8004158 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004134:	4a21      	ldr	r2, [pc, #132]	; (80041bc <HAL_UART_IRQHandler+0x1fc>)
 8004136:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800413c:	4618      	mov	r0, r3
 800413e:	f7fe f930 	bl	80023a2 <HAL_DMA_Abort_IT>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d016      	beq.n	8004176 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800414c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004152:	4610      	mov	r0, r2
 8004154:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004156:	e00e      	b.n	8004176 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f000 f83b 	bl	80041d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800415e:	e00a      	b.n	8004176 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f000 f837 	bl	80041d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004166:	e006      	b.n	8004176 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f000 f833 	bl	80041d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004174:	e01e      	b.n	80041b4 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004176:	bf00      	nop
    return;
 8004178:	e01c      	b.n	80041b4 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004180:	2b00      	cmp	r3, #0
 8004182:	d008      	beq.n	8004196 <HAL_UART_IRQHandler+0x1d6>
 8004184:	69bb      	ldr	r3, [r7, #24]
 8004186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800418a:	2b00      	cmp	r3, #0
 800418c:	d003      	beq.n	8004196 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f000 f8a6 	bl	80042e0 <UART_Transmit_IT>
    return;
 8004194:	e00f      	b.n	80041b6 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004196:	69fb      	ldr	r3, [r7, #28]
 8004198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800419c:	2b00      	cmp	r3, #0
 800419e:	d00a      	beq.n	80041b6 <HAL_UART_IRQHandler+0x1f6>
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d005      	beq.n	80041b6 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f000 f8ee 	bl	800438c <UART_EndTransmit_IT>
    return;
 80041b0:	bf00      	nop
 80041b2:	e000      	b.n	80041b6 <HAL_UART_IRQHandler+0x1f6>
    return;
 80041b4:	bf00      	nop
  }
}
 80041b6:	3720      	adds	r7, #32
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	080042b9 	.word	0x080042b9

080041c0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80041c8:	bf00      	nop
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80041dc:	bf00      	nop
 80041de:	370c      	adds	r7, #12
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr

080041e8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b084      	sub	sp, #16
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	603b      	str	r3, [r7, #0]
 80041f4:	4613      	mov	r3, r2
 80041f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041f8:	e02c      	b.n	8004254 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004200:	d028      	beq.n	8004254 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d007      	beq.n	8004218 <UART_WaitOnFlagUntilTimeout+0x30>
 8004208:	f7fd ffae 	bl	8002168 <HAL_GetTick>
 800420c:	4602      	mov	r2, r0
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	69ba      	ldr	r2, [r7, #24]
 8004214:	429a      	cmp	r2, r3
 8004216:	d21d      	bcs.n	8004254 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	68da      	ldr	r2, [r3, #12]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004226:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	695a      	ldr	r2, [r3, #20]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f022 0201 	bic.w	r2, r2, #1
 8004236:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2220      	movs	r2, #32
 800423c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2220      	movs	r2, #32
 8004244:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2200      	movs	r2, #0
 800424c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004250:	2303      	movs	r3, #3
 8004252:	e00f      	b.n	8004274 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	4013      	ands	r3, r2
 800425e:	68ba      	ldr	r2, [r7, #8]
 8004260:	429a      	cmp	r2, r3
 8004262:	bf0c      	ite	eq
 8004264:	2301      	moveq	r3, #1
 8004266:	2300      	movne	r3, #0
 8004268:	b2db      	uxtb	r3, r3
 800426a:	461a      	mov	r2, r3
 800426c:	79fb      	ldrb	r3, [r7, #7]
 800426e:	429a      	cmp	r2, r3
 8004270:	d0c3      	beq.n	80041fa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004272:	2300      	movs	r3, #0
}
 8004274:	4618      	mov	r0, r3
 8004276:	3710      	adds	r7, #16
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	68da      	ldr	r2, [r3, #12]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004292:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	695a      	ldr	r2, [r3, #20]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f022 0201 	bic.w	r2, r2, #1
 80042a2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2220      	movs	r2, #32
 80042a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80042ac:	bf00      	nop
 80042ae:	370c      	adds	r7, #12
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2200      	movs	r2, #0
 80042ca:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2200      	movs	r2, #0
 80042d0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80042d2:	68f8      	ldr	r0, [r7, #12]
 80042d4:	f7ff ff7e 	bl	80041d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042d8:	bf00      	nop
 80042da:	3710      	adds	r7, #16
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}

080042e0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b085      	sub	sp, #20
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	2b21      	cmp	r3, #33	; 0x21
 80042f2:	d144      	bne.n	800437e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042fc:	d11a      	bne.n	8004334 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a1b      	ldr	r3, [r3, #32]
 8004302:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	881b      	ldrh	r3, [r3, #0]
 8004308:	461a      	mov	r2, r3
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004312:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	691b      	ldr	r3, [r3, #16]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d105      	bne.n	8004328 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6a1b      	ldr	r3, [r3, #32]
 8004320:	1c9a      	adds	r2, r3, #2
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	621a      	str	r2, [r3, #32]
 8004326:	e00e      	b.n	8004346 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6a1b      	ldr	r3, [r3, #32]
 800432c:	1c5a      	adds	r2, r3, #1
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	621a      	str	r2, [r3, #32]
 8004332:	e008      	b.n	8004346 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6a1b      	ldr	r3, [r3, #32]
 8004338:	1c59      	adds	r1, r3, #1
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	6211      	str	r1, [r2, #32]
 800433e:	781a      	ldrb	r2, [r3, #0]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800434a:	b29b      	uxth	r3, r3
 800434c:	3b01      	subs	r3, #1
 800434e:	b29b      	uxth	r3, r3
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	4619      	mov	r1, r3
 8004354:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004356:	2b00      	cmp	r3, #0
 8004358:	d10f      	bne.n	800437a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	68da      	ldr	r2, [r3, #12]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004368:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	68da      	ldr	r2, [r3, #12]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004378:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800437a:	2300      	movs	r3, #0
 800437c:	e000      	b.n	8004380 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800437e:	2302      	movs	r3, #2
  }
}
 8004380:	4618      	mov	r0, r3
 8004382:	3714      	adds	r7, #20
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr

0800438c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b082      	sub	sp, #8
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	68da      	ldr	r2, [r3, #12]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043a2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2220      	movs	r2, #32
 80043a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f7ff ff07 	bl	80041c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80043b2:	2300      	movs	r3, #0
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3708      	adds	r7, #8
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}

080043bc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b084      	sub	sp, #16
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	2b22      	cmp	r3, #34	; 0x22
 80043ce:	d171      	bne.n	80044b4 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043d8:	d123      	bne.n	8004422 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043de:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	691b      	ldr	r3, [r3, #16]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d10e      	bne.n	8004406 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043f4:	b29a      	uxth	r2, r3
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043fe:	1c9a      	adds	r2, r3, #2
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	629a      	str	r2, [r3, #40]	; 0x28
 8004404:	e029      	b.n	800445a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	b29b      	uxth	r3, r3
 800440e:	b2db      	uxtb	r3, r3
 8004410:	b29a      	uxth	r2, r3
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800441a:	1c5a      	adds	r2, r3, #1
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	629a      	str	r2, [r3, #40]	; 0x28
 8004420:	e01b      	b.n	800445a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d10a      	bne.n	8004440 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	6858      	ldr	r0, [r3, #4]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004434:	1c59      	adds	r1, r3, #1
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	6291      	str	r1, [r2, #40]	; 0x28
 800443a:	b2c2      	uxtb	r2, r0
 800443c:	701a      	strb	r2, [r3, #0]
 800443e:	e00c      	b.n	800445a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	b2da      	uxtb	r2, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800444c:	1c58      	adds	r0, r3, #1
 800444e:	6879      	ldr	r1, [r7, #4]
 8004450:	6288      	str	r0, [r1, #40]	; 0x28
 8004452:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004456:	b2d2      	uxtb	r2, r2
 8004458:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800445e:	b29b      	uxth	r3, r3
 8004460:	3b01      	subs	r3, #1
 8004462:	b29b      	uxth	r3, r3
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	4619      	mov	r1, r3
 8004468:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800446a:	2b00      	cmp	r3, #0
 800446c:	d120      	bne.n	80044b0 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	68da      	ldr	r2, [r3, #12]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f022 0220 	bic.w	r2, r2, #32
 800447c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	68da      	ldr	r2, [r3, #12]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800448c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	695a      	ldr	r2, [r3, #20]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f022 0201 	bic.w	r2, r2, #1
 800449c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2220      	movs	r2, #32
 80044a2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	f7fc f872 	bl	8000590 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80044ac:	2300      	movs	r3, #0
 80044ae:	e002      	b.n	80044b6 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80044b0:	2300      	movs	r3, #0
 80044b2:	e000      	b.n	80044b6 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80044b4:	2302      	movs	r3, #2
  }
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3710      	adds	r7, #16
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
	...

080044c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044c4:	b085      	sub	sp, #20
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	691b      	ldr	r3, [r3, #16]
 80044d0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	68da      	ldr	r2, [r3, #12]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	430a      	orrs	r2, r1
 80044de:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	689a      	ldr	r2, [r3, #8]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	691b      	ldr	r3, [r3, #16]
 80044e8:	431a      	orrs	r2, r3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	695b      	ldr	r3, [r3, #20]
 80044ee:	431a      	orrs	r2, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	69db      	ldr	r3, [r3, #28]
 80044f4:	4313      	orrs	r3, r2
 80044f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004502:	f023 030c 	bic.w	r3, r3, #12
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	6812      	ldr	r2, [r2, #0]
 800450a:	68f9      	ldr	r1, [r7, #12]
 800450c:	430b      	orrs	r3, r1
 800450e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	695b      	ldr	r3, [r3, #20]
 8004516:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	699a      	ldr	r2, [r3, #24]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	430a      	orrs	r2, r1
 8004524:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	69db      	ldr	r3, [r3, #28]
 800452a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800452e:	f040 818b 	bne.w	8004848 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4ac1      	ldr	r2, [pc, #772]	; (800483c <UART_SetConfig+0x37c>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d005      	beq.n	8004548 <UART_SetConfig+0x88>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4abf      	ldr	r2, [pc, #764]	; (8004840 <UART_SetConfig+0x380>)
 8004542:	4293      	cmp	r3, r2
 8004544:	f040 80bd 	bne.w	80046c2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004548:	f7fe fd38 	bl	8002fbc <HAL_RCC_GetPCLK2Freq>
 800454c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	461d      	mov	r5, r3
 8004552:	f04f 0600 	mov.w	r6, #0
 8004556:	46a8      	mov	r8, r5
 8004558:	46b1      	mov	r9, r6
 800455a:	eb18 0308 	adds.w	r3, r8, r8
 800455e:	eb49 0409 	adc.w	r4, r9, r9
 8004562:	4698      	mov	r8, r3
 8004564:	46a1      	mov	r9, r4
 8004566:	eb18 0805 	adds.w	r8, r8, r5
 800456a:	eb49 0906 	adc.w	r9, r9, r6
 800456e:	f04f 0100 	mov.w	r1, #0
 8004572:	f04f 0200 	mov.w	r2, #0
 8004576:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800457a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800457e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004582:	4688      	mov	r8, r1
 8004584:	4691      	mov	r9, r2
 8004586:	eb18 0005 	adds.w	r0, r8, r5
 800458a:	eb49 0106 	adc.w	r1, r9, r6
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	461d      	mov	r5, r3
 8004594:	f04f 0600 	mov.w	r6, #0
 8004598:	196b      	adds	r3, r5, r5
 800459a:	eb46 0406 	adc.w	r4, r6, r6
 800459e:	461a      	mov	r2, r3
 80045a0:	4623      	mov	r3, r4
 80045a2:	f7fb fe75 	bl	8000290 <__aeabi_uldivmod>
 80045a6:	4603      	mov	r3, r0
 80045a8:	460c      	mov	r4, r1
 80045aa:	461a      	mov	r2, r3
 80045ac:	4ba5      	ldr	r3, [pc, #660]	; (8004844 <UART_SetConfig+0x384>)
 80045ae:	fba3 2302 	umull	r2, r3, r3, r2
 80045b2:	095b      	lsrs	r3, r3, #5
 80045b4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	461d      	mov	r5, r3
 80045bc:	f04f 0600 	mov.w	r6, #0
 80045c0:	46a9      	mov	r9, r5
 80045c2:	46b2      	mov	sl, r6
 80045c4:	eb19 0309 	adds.w	r3, r9, r9
 80045c8:	eb4a 040a 	adc.w	r4, sl, sl
 80045cc:	4699      	mov	r9, r3
 80045ce:	46a2      	mov	sl, r4
 80045d0:	eb19 0905 	adds.w	r9, r9, r5
 80045d4:	eb4a 0a06 	adc.w	sl, sl, r6
 80045d8:	f04f 0100 	mov.w	r1, #0
 80045dc:	f04f 0200 	mov.w	r2, #0
 80045e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80045e4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80045e8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80045ec:	4689      	mov	r9, r1
 80045ee:	4692      	mov	sl, r2
 80045f0:	eb19 0005 	adds.w	r0, r9, r5
 80045f4:	eb4a 0106 	adc.w	r1, sl, r6
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	461d      	mov	r5, r3
 80045fe:	f04f 0600 	mov.w	r6, #0
 8004602:	196b      	adds	r3, r5, r5
 8004604:	eb46 0406 	adc.w	r4, r6, r6
 8004608:	461a      	mov	r2, r3
 800460a:	4623      	mov	r3, r4
 800460c:	f7fb fe40 	bl	8000290 <__aeabi_uldivmod>
 8004610:	4603      	mov	r3, r0
 8004612:	460c      	mov	r4, r1
 8004614:	461a      	mov	r2, r3
 8004616:	4b8b      	ldr	r3, [pc, #556]	; (8004844 <UART_SetConfig+0x384>)
 8004618:	fba3 1302 	umull	r1, r3, r3, r2
 800461c:	095b      	lsrs	r3, r3, #5
 800461e:	2164      	movs	r1, #100	; 0x64
 8004620:	fb01 f303 	mul.w	r3, r1, r3
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	00db      	lsls	r3, r3, #3
 8004628:	3332      	adds	r3, #50	; 0x32
 800462a:	4a86      	ldr	r2, [pc, #536]	; (8004844 <UART_SetConfig+0x384>)
 800462c:	fba2 2303 	umull	r2, r3, r2, r3
 8004630:	095b      	lsrs	r3, r3, #5
 8004632:	005b      	lsls	r3, r3, #1
 8004634:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004638:	4498      	add	r8, r3
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	461d      	mov	r5, r3
 800463e:	f04f 0600 	mov.w	r6, #0
 8004642:	46a9      	mov	r9, r5
 8004644:	46b2      	mov	sl, r6
 8004646:	eb19 0309 	adds.w	r3, r9, r9
 800464a:	eb4a 040a 	adc.w	r4, sl, sl
 800464e:	4699      	mov	r9, r3
 8004650:	46a2      	mov	sl, r4
 8004652:	eb19 0905 	adds.w	r9, r9, r5
 8004656:	eb4a 0a06 	adc.w	sl, sl, r6
 800465a:	f04f 0100 	mov.w	r1, #0
 800465e:	f04f 0200 	mov.w	r2, #0
 8004662:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004666:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800466a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800466e:	4689      	mov	r9, r1
 8004670:	4692      	mov	sl, r2
 8004672:	eb19 0005 	adds.w	r0, r9, r5
 8004676:	eb4a 0106 	adc.w	r1, sl, r6
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	461d      	mov	r5, r3
 8004680:	f04f 0600 	mov.w	r6, #0
 8004684:	196b      	adds	r3, r5, r5
 8004686:	eb46 0406 	adc.w	r4, r6, r6
 800468a:	461a      	mov	r2, r3
 800468c:	4623      	mov	r3, r4
 800468e:	f7fb fdff 	bl	8000290 <__aeabi_uldivmod>
 8004692:	4603      	mov	r3, r0
 8004694:	460c      	mov	r4, r1
 8004696:	461a      	mov	r2, r3
 8004698:	4b6a      	ldr	r3, [pc, #424]	; (8004844 <UART_SetConfig+0x384>)
 800469a:	fba3 1302 	umull	r1, r3, r3, r2
 800469e:	095b      	lsrs	r3, r3, #5
 80046a0:	2164      	movs	r1, #100	; 0x64
 80046a2:	fb01 f303 	mul.w	r3, r1, r3
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	00db      	lsls	r3, r3, #3
 80046aa:	3332      	adds	r3, #50	; 0x32
 80046ac:	4a65      	ldr	r2, [pc, #404]	; (8004844 <UART_SetConfig+0x384>)
 80046ae:	fba2 2303 	umull	r2, r3, r2, r3
 80046b2:	095b      	lsrs	r3, r3, #5
 80046b4:	f003 0207 	and.w	r2, r3, #7
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4442      	add	r2, r8
 80046be:	609a      	str	r2, [r3, #8]
 80046c0:	e26f      	b.n	8004ba2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80046c2:	f7fe fc67 	bl	8002f94 <HAL_RCC_GetPCLK1Freq>
 80046c6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	461d      	mov	r5, r3
 80046cc:	f04f 0600 	mov.w	r6, #0
 80046d0:	46a8      	mov	r8, r5
 80046d2:	46b1      	mov	r9, r6
 80046d4:	eb18 0308 	adds.w	r3, r8, r8
 80046d8:	eb49 0409 	adc.w	r4, r9, r9
 80046dc:	4698      	mov	r8, r3
 80046de:	46a1      	mov	r9, r4
 80046e0:	eb18 0805 	adds.w	r8, r8, r5
 80046e4:	eb49 0906 	adc.w	r9, r9, r6
 80046e8:	f04f 0100 	mov.w	r1, #0
 80046ec:	f04f 0200 	mov.w	r2, #0
 80046f0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80046f4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80046f8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80046fc:	4688      	mov	r8, r1
 80046fe:	4691      	mov	r9, r2
 8004700:	eb18 0005 	adds.w	r0, r8, r5
 8004704:	eb49 0106 	adc.w	r1, r9, r6
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	461d      	mov	r5, r3
 800470e:	f04f 0600 	mov.w	r6, #0
 8004712:	196b      	adds	r3, r5, r5
 8004714:	eb46 0406 	adc.w	r4, r6, r6
 8004718:	461a      	mov	r2, r3
 800471a:	4623      	mov	r3, r4
 800471c:	f7fb fdb8 	bl	8000290 <__aeabi_uldivmod>
 8004720:	4603      	mov	r3, r0
 8004722:	460c      	mov	r4, r1
 8004724:	461a      	mov	r2, r3
 8004726:	4b47      	ldr	r3, [pc, #284]	; (8004844 <UART_SetConfig+0x384>)
 8004728:	fba3 2302 	umull	r2, r3, r3, r2
 800472c:	095b      	lsrs	r3, r3, #5
 800472e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	461d      	mov	r5, r3
 8004736:	f04f 0600 	mov.w	r6, #0
 800473a:	46a9      	mov	r9, r5
 800473c:	46b2      	mov	sl, r6
 800473e:	eb19 0309 	adds.w	r3, r9, r9
 8004742:	eb4a 040a 	adc.w	r4, sl, sl
 8004746:	4699      	mov	r9, r3
 8004748:	46a2      	mov	sl, r4
 800474a:	eb19 0905 	adds.w	r9, r9, r5
 800474e:	eb4a 0a06 	adc.w	sl, sl, r6
 8004752:	f04f 0100 	mov.w	r1, #0
 8004756:	f04f 0200 	mov.w	r2, #0
 800475a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800475e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004762:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004766:	4689      	mov	r9, r1
 8004768:	4692      	mov	sl, r2
 800476a:	eb19 0005 	adds.w	r0, r9, r5
 800476e:	eb4a 0106 	adc.w	r1, sl, r6
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	461d      	mov	r5, r3
 8004778:	f04f 0600 	mov.w	r6, #0
 800477c:	196b      	adds	r3, r5, r5
 800477e:	eb46 0406 	adc.w	r4, r6, r6
 8004782:	461a      	mov	r2, r3
 8004784:	4623      	mov	r3, r4
 8004786:	f7fb fd83 	bl	8000290 <__aeabi_uldivmod>
 800478a:	4603      	mov	r3, r0
 800478c:	460c      	mov	r4, r1
 800478e:	461a      	mov	r2, r3
 8004790:	4b2c      	ldr	r3, [pc, #176]	; (8004844 <UART_SetConfig+0x384>)
 8004792:	fba3 1302 	umull	r1, r3, r3, r2
 8004796:	095b      	lsrs	r3, r3, #5
 8004798:	2164      	movs	r1, #100	; 0x64
 800479a:	fb01 f303 	mul.w	r3, r1, r3
 800479e:	1ad3      	subs	r3, r2, r3
 80047a0:	00db      	lsls	r3, r3, #3
 80047a2:	3332      	adds	r3, #50	; 0x32
 80047a4:	4a27      	ldr	r2, [pc, #156]	; (8004844 <UART_SetConfig+0x384>)
 80047a6:	fba2 2303 	umull	r2, r3, r2, r3
 80047aa:	095b      	lsrs	r3, r3, #5
 80047ac:	005b      	lsls	r3, r3, #1
 80047ae:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80047b2:	4498      	add	r8, r3
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	461d      	mov	r5, r3
 80047b8:	f04f 0600 	mov.w	r6, #0
 80047bc:	46a9      	mov	r9, r5
 80047be:	46b2      	mov	sl, r6
 80047c0:	eb19 0309 	adds.w	r3, r9, r9
 80047c4:	eb4a 040a 	adc.w	r4, sl, sl
 80047c8:	4699      	mov	r9, r3
 80047ca:	46a2      	mov	sl, r4
 80047cc:	eb19 0905 	adds.w	r9, r9, r5
 80047d0:	eb4a 0a06 	adc.w	sl, sl, r6
 80047d4:	f04f 0100 	mov.w	r1, #0
 80047d8:	f04f 0200 	mov.w	r2, #0
 80047dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80047e0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80047e4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80047e8:	4689      	mov	r9, r1
 80047ea:	4692      	mov	sl, r2
 80047ec:	eb19 0005 	adds.w	r0, r9, r5
 80047f0:	eb4a 0106 	adc.w	r1, sl, r6
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	461d      	mov	r5, r3
 80047fa:	f04f 0600 	mov.w	r6, #0
 80047fe:	196b      	adds	r3, r5, r5
 8004800:	eb46 0406 	adc.w	r4, r6, r6
 8004804:	461a      	mov	r2, r3
 8004806:	4623      	mov	r3, r4
 8004808:	f7fb fd42 	bl	8000290 <__aeabi_uldivmod>
 800480c:	4603      	mov	r3, r0
 800480e:	460c      	mov	r4, r1
 8004810:	461a      	mov	r2, r3
 8004812:	4b0c      	ldr	r3, [pc, #48]	; (8004844 <UART_SetConfig+0x384>)
 8004814:	fba3 1302 	umull	r1, r3, r3, r2
 8004818:	095b      	lsrs	r3, r3, #5
 800481a:	2164      	movs	r1, #100	; 0x64
 800481c:	fb01 f303 	mul.w	r3, r1, r3
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	00db      	lsls	r3, r3, #3
 8004824:	3332      	adds	r3, #50	; 0x32
 8004826:	4a07      	ldr	r2, [pc, #28]	; (8004844 <UART_SetConfig+0x384>)
 8004828:	fba2 2303 	umull	r2, r3, r2, r3
 800482c:	095b      	lsrs	r3, r3, #5
 800482e:	f003 0207 	and.w	r2, r3, #7
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4442      	add	r2, r8
 8004838:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800483a:	e1b2      	b.n	8004ba2 <UART_SetConfig+0x6e2>
 800483c:	40011000 	.word	0x40011000
 8004840:	40011400 	.word	0x40011400
 8004844:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4ad7      	ldr	r2, [pc, #860]	; (8004bac <UART_SetConfig+0x6ec>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d005      	beq.n	800485e <UART_SetConfig+0x39e>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4ad6      	ldr	r2, [pc, #856]	; (8004bb0 <UART_SetConfig+0x6f0>)
 8004858:	4293      	cmp	r3, r2
 800485a:	f040 80d1 	bne.w	8004a00 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800485e:	f7fe fbad 	bl	8002fbc <HAL_RCC_GetPCLK2Freq>
 8004862:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	469a      	mov	sl, r3
 8004868:	f04f 0b00 	mov.w	fp, #0
 800486c:	46d0      	mov	r8, sl
 800486e:	46d9      	mov	r9, fp
 8004870:	eb18 0308 	adds.w	r3, r8, r8
 8004874:	eb49 0409 	adc.w	r4, r9, r9
 8004878:	4698      	mov	r8, r3
 800487a:	46a1      	mov	r9, r4
 800487c:	eb18 080a 	adds.w	r8, r8, sl
 8004880:	eb49 090b 	adc.w	r9, r9, fp
 8004884:	f04f 0100 	mov.w	r1, #0
 8004888:	f04f 0200 	mov.w	r2, #0
 800488c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004890:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004894:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004898:	4688      	mov	r8, r1
 800489a:	4691      	mov	r9, r2
 800489c:	eb1a 0508 	adds.w	r5, sl, r8
 80048a0:	eb4b 0609 	adc.w	r6, fp, r9
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	4619      	mov	r1, r3
 80048aa:	f04f 0200 	mov.w	r2, #0
 80048ae:	f04f 0300 	mov.w	r3, #0
 80048b2:	f04f 0400 	mov.w	r4, #0
 80048b6:	0094      	lsls	r4, r2, #2
 80048b8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80048bc:	008b      	lsls	r3, r1, #2
 80048be:	461a      	mov	r2, r3
 80048c0:	4623      	mov	r3, r4
 80048c2:	4628      	mov	r0, r5
 80048c4:	4631      	mov	r1, r6
 80048c6:	f7fb fce3 	bl	8000290 <__aeabi_uldivmod>
 80048ca:	4603      	mov	r3, r0
 80048cc:	460c      	mov	r4, r1
 80048ce:	461a      	mov	r2, r3
 80048d0:	4bb8      	ldr	r3, [pc, #736]	; (8004bb4 <UART_SetConfig+0x6f4>)
 80048d2:	fba3 2302 	umull	r2, r3, r3, r2
 80048d6:	095b      	lsrs	r3, r3, #5
 80048d8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	469b      	mov	fp, r3
 80048e0:	f04f 0c00 	mov.w	ip, #0
 80048e4:	46d9      	mov	r9, fp
 80048e6:	46e2      	mov	sl, ip
 80048e8:	eb19 0309 	adds.w	r3, r9, r9
 80048ec:	eb4a 040a 	adc.w	r4, sl, sl
 80048f0:	4699      	mov	r9, r3
 80048f2:	46a2      	mov	sl, r4
 80048f4:	eb19 090b 	adds.w	r9, r9, fp
 80048f8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80048fc:	f04f 0100 	mov.w	r1, #0
 8004900:	f04f 0200 	mov.w	r2, #0
 8004904:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004908:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800490c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004910:	4689      	mov	r9, r1
 8004912:	4692      	mov	sl, r2
 8004914:	eb1b 0509 	adds.w	r5, fp, r9
 8004918:	eb4c 060a 	adc.w	r6, ip, sl
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	4619      	mov	r1, r3
 8004922:	f04f 0200 	mov.w	r2, #0
 8004926:	f04f 0300 	mov.w	r3, #0
 800492a:	f04f 0400 	mov.w	r4, #0
 800492e:	0094      	lsls	r4, r2, #2
 8004930:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004934:	008b      	lsls	r3, r1, #2
 8004936:	461a      	mov	r2, r3
 8004938:	4623      	mov	r3, r4
 800493a:	4628      	mov	r0, r5
 800493c:	4631      	mov	r1, r6
 800493e:	f7fb fca7 	bl	8000290 <__aeabi_uldivmod>
 8004942:	4603      	mov	r3, r0
 8004944:	460c      	mov	r4, r1
 8004946:	461a      	mov	r2, r3
 8004948:	4b9a      	ldr	r3, [pc, #616]	; (8004bb4 <UART_SetConfig+0x6f4>)
 800494a:	fba3 1302 	umull	r1, r3, r3, r2
 800494e:	095b      	lsrs	r3, r3, #5
 8004950:	2164      	movs	r1, #100	; 0x64
 8004952:	fb01 f303 	mul.w	r3, r1, r3
 8004956:	1ad3      	subs	r3, r2, r3
 8004958:	011b      	lsls	r3, r3, #4
 800495a:	3332      	adds	r3, #50	; 0x32
 800495c:	4a95      	ldr	r2, [pc, #596]	; (8004bb4 <UART_SetConfig+0x6f4>)
 800495e:	fba2 2303 	umull	r2, r3, r2, r3
 8004962:	095b      	lsrs	r3, r3, #5
 8004964:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004968:	4498      	add	r8, r3
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	469b      	mov	fp, r3
 800496e:	f04f 0c00 	mov.w	ip, #0
 8004972:	46d9      	mov	r9, fp
 8004974:	46e2      	mov	sl, ip
 8004976:	eb19 0309 	adds.w	r3, r9, r9
 800497a:	eb4a 040a 	adc.w	r4, sl, sl
 800497e:	4699      	mov	r9, r3
 8004980:	46a2      	mov	sl, r4
 8004982:	eb19 090b 	adds.w	r9, r9, fp
 8004986:	eb4a 0a0c 	adc.w	sl, sl, ip
 800498a:	f04f 0100 	mov.w	r1, #0
 800498e:	f04f 0200 	mov.w	r2, #0
 8004992:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004996:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800499a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800499e:	4689      	mov	r9, r1
 80049a0:	4692      	mov	sl, r2
 80049a2:	eb1b 0509 	adds.w	r5, fp, r9
 80049a6:	eb4c 060a 	adc.w	r6, ip, sl
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	4619      	mov	r1, r3
 80049b0:	f04f 0200 	mov.w	r2, #0
 80049b4:	f04f 0300 	mov.w	r3, #0
 80049b8:	f04f 0400 	mov.w	r4, #0
 80049bc:	0094      	lsls	r4, r2, #2
 80049be:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80049c2:	008b      	lsls	r3, r1, #2
 80049c4:	461a      	mov	r2, r3
 80049c6:	4623      	mov	r3, r4
 80049c8:	4628      	mov	r0, r5
 80049ca:	4631      	mov	r1, r6
 80049cc:	f7fb fc60 	bl	8000290 <__aeabi_uldivmod>
 80049d0:	4603      	mov	r3, r0
 80049d2:	460c      	mov	r4, r1
 80049d4:	461a      	mov	r2, r3
 80049d6:	4b77      	ldr	r3, [pc, #476]	; (8004bb4 <UART_SetConfig+0x6f4>)
 80049d8:	fba3 1302 	umull	r1, r3, r3, r2
 80049dc:	095b      	lsrs	r3, r3, #5
 80049de:	2164      	movs	r1, #100	; 0x64
 80049e0:	fb01 f303 	mul.w	r3, r1, r3
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	011b      	lsls	r3, r3, #4
 80049e8:	3332      	adds	r3, #50	; 0x32
 80049ea:	4a72      	ldr	r2, [pc, #456]	; (8004bb4 <UART_SetConfig+0x6f4>)
 80049ec:	fba2 2303 	umull	r2, r3, r2, r3
 80049f0:	095b      	lsrs	r3, r3, #5
 80049f2:	f003 020f 	and.w	r2, r3, #15
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4442      	add	r2, r8
 80049fc:	609a      	str	r2, [r3, #8]
 80049fe:	e0d0      	b.n	8004ba2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a00:	f7fe fac8 	bl	8002f94 <HAL_RCC_GetPCLK1Freq>
 8004a04:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	469a      	mov	sl, r3
 8004a0a:	f04f 0b00 	mov.w	fp, #0
 8004a0e:	46d0      	mov	r8, sl
 8004a10:	46d9      	mov	r9, fp
 8004a12:	eb18 0308 	adds.w	r3, r8, r8
 8004a16:	eb49 0409 	adc.w	r4, r9, r9
 8004a1a:	4698      	mov	r8, r3
 8004a1c:	46a1      	mov	r9, r4
 8004a1e:	eb18 080a 	adds.w	r8, r8, sl
 8004a22:	eb49 090b 	adc.w	r9, r9, fp
 8004a26:	f04f 0100 	mov.w	r1, #0
 8004a2a:	f04f 0200 	mov.w	r2, #0
 8004a2e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004a32:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004a36:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004a3a:	4688      	mov	r8, r1
 8004a3c:	4691      	mov	r9, r2
 8004a3e:	eb1a 0508 	adds.w	r5, sl, r8
 8004a42:	eb4b 0609 	adc.w	r6, fp, r9
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	4619      	mov	r1, r3
 8004a4c:	f04f 0200 	mov.w	r2, #0
 8004a50:	f04f 0300 	mov.w	r3, #0
 8004a54:	f04f 0400 	mov.w	r4, #0
 8004a58:	0094      	lsls	r4, r2, #2
 8004a5a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004a5e:	008b      	lsls	r3, r1, #2
 8004a60:	461a      	mov	r2, r3
 8004a62:	4623      	mov	r3, r4
 8004a64:	4628      	mov	r0, r5
 8004a66:	4631      	mov	r1, r6
 8004a68:	f7fb fc12 	bl	8000290 <__aeabi_uldivmod>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	460c      	mov	r4, r1
 8004a70:	461a      	mov	r2, r3
 8004a72:	4b50      	ldr	r3, [pc, #320]	; (8004bb4 <UART_SetConfig+0x6f4>)
 8004a74:	fba3 2302 	umull	r2, r3, r3, r2
 8004a78:	095b      	lsrs	r3, r3, #5
 8004a7a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	469b      	mov	fp, r3
 8004a82:	f04f 0c00 	mov.w	ip, #0
 8004a86:	46d9      	mov	r9, fp
 8004a88:	46e2      	mov	sl, ip
 8004a8a:	eb19 0309 	adds.w	r3, r9, r9
 8004a8e:	eb4a 040a 	adc.w	r4, sl, sl
 8004a92:	4699      	mov	r9, r3
 8004a94:	46a2      	mov	sl, r4
 8004a96:	eb19 090b 	adds.w	r9, r9, fp
 8004a9a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004a9e:	f04f 0100 	mov.w	r1, #0
 8004aa2:	f04f 0200 	mov.w	r2, #0
 8004aa6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004aaa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004aae:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004ab2:	4689      	mov	r9, r1
 8004ab4:	4692      	mov	sl, r2
 8004ab6:	eb1b 0509 	adds.w	r5, fp, r9
 8004aba:	eb4c 060a 	adc.w	r6, ip, sl
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	4619      	mov	r1, r3
 8004ac4:	f04f 0200 	mov.w	r2, #0
 8004ac8:	f04f 0300 	mov.w	r3, #0
 8004acc:	f04f 0400 	mov.w	r4, #0
 8004ad0:	0094      	lsls	r4, r2, #2
 8004ad2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004ad6:	008b      	lsls	r3, r1, #2
 8004ad8:	461a      	mov	r2, r3
 8004ada:	4623      	mov	r3, r4
 8004adc:	4628      	mov	r0, r5
 8004ade:	4631      	mov	r1, r6
 8004ae0:	f7fb fbd6 	bl	8000290 <__aeabi_uldivmod>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	460c      	mov	r4, r1
 8004ae8:	461a      	mov	r2, r3
 8004aea:	4b32      	ldr	r3, [pc, #200]	; (8004bb4 <UART_SetConfig+0x6f4>)
 8004aec:	fba3 1302 	umull	r1, r3, r3, r2
 8004af0:	095b      	lsrs	r3, r3, #5
 8004af2:	2164      	movs	r1, #100	; 0x64
 8004af4:	fb01 f303 	mul.w	r3, r1, r3
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	011b      	lsls	r3, r3, #4
 8004afc:	3332      	adds	r3, #50	; 0x32
 8004afe:	4a2d      	ldr	r2, [pc, #180]	; (8004bb4 <UART_SetConfig+0x6f4>)
 8004b00:	fba2 2303 	umull	r2, r3, r2, r3
 8004b04:	095b      	lsrs	r3, r3, #5
 8004b06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b0a:	4498      	add	r8, r3
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	469b      	mov	fp, r3
 8004b10:	f04f 0c00 	mov.w	ip, #0
 8004b14:	46d9      	mov	r9, fp
 8004b16:	46e2      	mov	sl, ip
 8004b18:	eb19 0309 	adds.w	r3, r9, r9
 8004b1c:	eb4a 040a 	adc.w	r4, sl, sl
 8004b20:	4699      	mov	r9, r3
 8004b22:	46a2      	mov	sl, r4
 8004b24:	eb19 090b 	adds.w	r9, r9, fp
 8004b28:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004b2c:	f04f 0100 	mov.w	r1, #0
 8004b30:	f04f 0200 	mov.w	r2, #0
 8004b34:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004b38:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004b3c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004b40:	4689      	mov	r9, r1
 8004b42:	4692      	mov	sl, r2
 8004b44:	eb1b 0509 	adds.w	r5, fp, r9
 8004b48:	eb4c 060a 	adc.w	r6, ip, sl
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	4619      	mov	r1, r3
 8004b52:	f04f 0200 	mov.w	r2, #0
 8004b56:	f04f 0300 	mov.w	r3, #0
 8004b5a:	f04f 0400 	mov.w	r4, #0
 8004b5e:	0094      	lsls	r4, r2, #2
 8004b60:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004b64:	008b      	lsls	r3, r1, #2
 8004b66:	461a      	mov	r2, r3
 8004b68:	4623      	mov	r3, r4
 8004b6a:	4628      	mov	r0, r5
 8004b6c:	4631      	mov	r1, r6
 8004b6e:	f7fb fb8f 	bl	8000290 <__aeabi_uldivmod>
 8004b72:	4603      	mov	r3, r0
 8004b74:	460c      	mov	r4, r1
 8004b76:	461a      	mov	r2, r3
 8004b78:	4b0e      	ldr	r3, [pc, #56]	; (8004bb4 <UART_SetConfig+0x6f4>)
 8004b7a:	fba3 1302 	umull	r1, r3, r3, r2
 8004b7e:	095b      	lsrs	r3, r3, #5
 8004b80:	2164      	movs	r1, #100	; 0x64
 8004b82:	fb01 f303 	mul.w	r3, r1, r3
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	011b      	lsls	r3, r3, #4
 8004b8a:	3332      	adds	r3, #50	; 0x32
 8004b8c:	4a09      	ldr	r2, [pc, #36]	; (8004bb4 <UART_SetConfig+0x6f4>)
 8004b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b92:	095b      	lsrs	r3, r3, #5
 8004b94:	f003 020f 	and.w	r2, r3, #15
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4442      	add	r2, r8
 8004b9e:	609a      	str	r2, [r3, #8]
}
 8004ba0:	e7ff      	b.n	8004ba2 <UART_SetConfig+0x6e2>
 8004ba2:	bf00      	nop
 8004ba4:	3714      	adds	r7, #20
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bac:	40011000 	.word	0x40011000
 8004bb0:	40011400 	.word	0x40011400
 8004bb4:	51eb851f 	.word	0x51eb851f

08004bb8 <__errno>:
 8004bb8:	4b01      	ldr	r3, [pc, #4]	; (8004bc0 <__errno+0x8>)
 8004bba:	6818      	ldr	r0, [r3, #0]
 8004bbc:	4770      	bx	lr
 8004bbe:	bf00      	nop
 8004bc0:	20000058 	.word	0x20000058

08004bc4 <__libc_init_array>:
 8004bc4:	b570      	push	{r4, r5, r6, lr}
 8004bc6:	4e0d      	ldr	r6, [pc, #52]	; (8004bfc <__libc_init_array+0x38>)
 8004bc8:	4c0d      	ldr	r4, [pc, #52]	; (8004c00 <__libc_init_array+0x3c>)
 8004bca:	1ba4      	subs	r4, r4, r6
 8004bcc:	10a4      	asrs	r4, r4, #2
 8004bce:	2500      	movs	r5, #0
 8004bd0:	42a5      	cmp	r5, r4
 8004bd2:	d109      	bne.n	8004be8 <__libc_init_array+0x24>
 8004bd4:	4e0b      	ldr	r6, [pc, #44]	; (8004c04 <__libc_init_array+0x40>)
 8004bd6:	4c0c      	ldr	r4, [pc, #48]	; (8004c08 <__libc_init_array+0x44>)
 8004bd8:	f000 fc86 	bl	80054e8 <_init>
 8004bdc:	1ba4      	subs	r4, r4, r6
 8004bde:	10a4      	asrs	r4, r4, #2
 8004be0:	2500      	movs	r5, #0
 8004be2:	42a5      	cmp	r5, r4
 8004be4:	d105      	bne.n	8004bf2 <__libc_init_array+0x2e>
 8004be6:	bd70      	pop	{r4, r5, r6, pc}
 8004be8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004bec:	4798      	blx	r3
 8004bee:	3501      	adds	r5, #1
 8004bf0:	e7ee      	b.n	8004bd0 <__libc_init_array+0xc>
 8004bf2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004bf6:	4798      	blx	r3
 8004bf8:	3501      	adds	r5, #1
 8004bfa:	e7f2      	b.n	8004be2 <__libc_init_array+0x1e>
 8004bfc:	080058f8 	.word	0x080058f8
 8004c00:	080058f8 	.word	0x080058f8
 8004c04:	080058f8 	.word	0x080058f8
 8004c08:	080058fc 	.word	0x080058fc

08004c0c <memset>:
 8004c0c:	4402      	add	r2, r0
 8004c0e:	4603      	mov	r3, r0
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d100      	bne.n	8004c16 <memset+0xa>
 8004c14:	4770      	bx	lr
 8004c16:	f803 1b01 	strb.w	r1, [r3], #1
 8004c1a:	e7f9      	b.n	8004c10 <memset+0x4>

08004c1c <srand>:
 8004c1c:	b538      	push	{r3, r4, r5, lr}
 8004c1e:	4b0d      	ldr	r3, [pc, #52]	; (8004c54 <srand+0x38>)
 8004c20:	681c      	ldr	r4, [r3, #0]
 8004c22:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004c24:	4605      	mov	r5, r0
 8004c26:	b97b      	cbnz	r3, 8004c48 <srand+0x2c>
 8004c28:	2018      	movs	r0, #24
 8004c2a:	f000 f86f 	bl	8004d0c <malloc>
 8004c2e:	4a0a      	ldr	r2, [pc, #40]	; (8004c58 <srand+0x3c>)
 8004c30:	4b0a      	ldr	r3, [pc, #40]	; (8004c5c <srand+0x40>)
 8004c32:	63a0      	str	r0, [r4, #56]	; 0x38
 8004c34:	e9c0 2300 	strd	r2, r3, [r0]
 8004c38:	4b09      	ldr	r3, [pc, #36]	; (8004c60 <srand+0x44>)
 8004c3a:	6083      	str	r3, [r0, #8]
 8004c3c:	230b      	movs	r3, #11
 8004c3e:	8183      	strh	r3, [r0, #12]
 8004c40:	2201      	movs	r2, #1
 8004c42:	2300      	movs	r3, #0
 8004c44:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8004c48:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	611d      	str	r5, [r3, #16]
 8004c4e:	615a      	str	r2, [r3, #20]
 8004c50:	bd38      	pop	{r3, r4, r5, pc}
 8004c52:	bf00      	nop
 8004c54:	20000058 	.word	0x20000058
 8004c58:	abcd330e 	.word	0xabcd330e
 8004c5c:	e66d1234 	.word	0xe66d1234
 8004c60:	0005deec 	.word	0x0005deec

08004c64 <rand>:
 8004c64:	b538      	push	{r3, r4, r5, lr}
 8004c66:	4b13      	ldr	r3, [pc, #76]	; (8004cb4 <rand+0x50>)
 8004c68:	681c      	ldr	r4, [r3, #0]
 8004c6a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004c6c:	b97b      	cbnz	r3, 8004c8e <rand+0x2a>
 8004c6e:	2018      	movs	r0, #24
 8004c70:	f000 f84c 	bl	8004d0c <malloc>
 8004c74:	4a10      	ldr	r2, [pc, #64]	; (8004cb8 <rand+0x54>)
 8004c76:	4b11      	ldr	r3, [pc, #68]	; (8004cbc <rand+0x58>)
 8004c78:	63a0      	str	r0, [r4, #56]	; 0x38
 8004c7a:	e9c0 2300 	strd	r2, r3, [r0]
 8004c7e:	4b10      	ldr	r3, [pc, #64]	; (8004cc0 <rand+0x5c>)
 8004c80:	6083      	str	r3, [r0, #8]
 8004c82:	230b      	movs	r3, #11
 8004c84:	8183      	strh	r3, [r0, #12]
 8004c86:	2201      	movs	r2, #1
 8004c88:	2300      	movs	r3, #0
 8004c8a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8004c8e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004c90:	480c      	ldr	r0, [pc, #48]	; (8004cc4 <rand+0x60>)
 8004c92:	690a      	ldr	r2, [r1, #16]
 8004c94:	694b      	ldr	r3, [r1, #20]
 8004c96:	4c0c      	ldr	r4, [pc, #48]	; (8004cc8 <rand+0x64>)
 8004c98:	4350      	muls	r0, r2
 8004c9a:	fb04 0003 	mla	r0, r4, r3, r0
 8004c9e:	fba2 2304 	umull	r2, r3, r2, r4
 8004ca2:	4403      	add	r3, r0
 8004ca4:	1c54      	adds	r4, r2, #1
 8004ca6:	f143 0500 	adc.w	r5, r3, #0
 8004caa:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8004cae:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8004cb2:	bd38      	pop	{r3, r4, r5, pc}
 8004cb4:	20000058 	.word	0x20000058
 8004cb8:	abcd330e 	.word	0xabcd330e
 8004cbc:	e66d1234 	.word	0xe66d1234
 8004cc0:	0005deec 	.word	0x0005deec
 8004cc4:	5851f42d 	.word	0x5851f42d
 8004cc8:	4c957f2d 	.word	0x4c957f2d

08004ccc <siprintf>:
 8004ccc:	b40e      	push	{r1, r2, r3}
 8004cce:	b500      	push	{lr}
 8004cd0:	b09c      	sub	sp, #112	; 0x70
 8004cd2:	ab1d      	add	r3, sp, #116	; 0x74
 8004cd4:	9002      	str	r0, [sp, #8]
 8004cd6:	9006      	str	r0, [sp, #24]
 8004cd8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004cdc:	4809      	ldr	r0, [pc, #36]	; (8004d04 <siprintf+0x38>)
 8004cde:	9107      	str	r1, [sp, #28]
 8004ce0:	9104      	str	r1, [sp, #16]
 8004ce2:	4909      	ldr	r1, [pc, #36]	; (8004d08 <siprintf+0x3c>)
 8004ce4:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ce8:	9105      	str	r1, [sp, #20]
 8004cea:	6800      	ldr	r0, [r0, #0]
 8004cec:	9301      	str	r3, [sp, #4]
 8004cee:	a902      	add	r1, sp, #8
 8004cf0:	f000 f916 	bl	8004f20 <_svfiprintf_r>
 8004cf4:	9b02      	ldr	r3, [sp, #8]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	701a      	strb	r2, [r3, #0]
 8004cfa:	b01c      	add	sp, #112	; 0x70
 8004cfc:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d00:	b003      	add	sp, #12
 8004d02:	4770      	bx	lr
 8004d04:	20000058 	.word	0x20000058
 8004d08:	ffff0208 	.word	0xffff0208

08004d0c <malloc>:
 8004d0c:	4b02      	ldr	r3, [pc, #8]	; (8004d18 <malloc+0xc>)
 8004d0e:	4601      	mov	r1, r0
 8004d10:	6818      	ldr	r0, [r3, #0]
 8004d12:	f000 b851 	b.w	8004db8 <_malloc_r>
 8004d16:	bf00      	nop
 8004d18:	20000058 	.word	0x20000058

08004d1c <_free_r>:
 8004d1c:	b538      	push	{r3, r4, r5, lr}
 8004d1e:	4605      	mov	r5, r0
 8004d20:	2900      	cmp	r1, #0
 8004d22:	d045      	beq.n	8004db0 <_free_r+0x94>
 8004d24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d28:	1f0c      	subs	r4, r1, #4
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	bfb8      	it	lt
 8004d2e:	18e4      	addlt	r4, r4, r3
 8004d30:	f000 fbaa 	bl	8005488 <__malloc_lock>
 8004d34:	4a1f      	ldr	r2, [pc, #124]	; (8004db4 <_free_r+0x98>)
 8004d36:	6813      	ldr	r3, [r2, #0]
 8004d38:	4610      	mov	r0, r2
 8004d3a:	b933      	cbnz	r3, 8004d4a <_free_r+0x2e>
 8004d3c:	6063      	str	r3, [r4, #4]
 8004d3e:	6014      	str	r4, [r2, #0]
 8004d40:	4628      	mov	r0, r5
 8004d42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d46:	f000 bba0 	b.w	800548a <__malloc_unlock>
 8004d4a:	42a3      	cmp	r3, r4
 8004d4c:	d90c      	bls.n	8004d68 <_free_r+0x4c>
 8004d4e:	6821      	ldr	r1, [r4, #0]
 8004d50:	1862      	adds	r2, r4, r1
 8004d52:	4293      	cmp	r3, r2
 8004d54:	bf04      	itt	eq
 8004d56:	681a      	ldreq	r2, [r3, #0]
 8004d58:	685b      	ldreq	r3, [r3, #4]
 8004d5a:	6063      	str	r3, [r4, #4]
 8004d5c:	bf04      	itt	eq
 8004d5e:	1852      	addeq	r2, r2, r1
 8004d60:	6022      	streq	r2, [r4, #0]
 8004d62:	6004      	str	r4, [r0, #0]
 8004d64:	e7ec      	b.n	8004d40 <_free_r+0x24>
 8004d66:	4613      	mov	r3, r2
 8004d68:	685a      	ldr	r2, [r3, #4]
 8004d6a:	b10a      	cbz	r2, 8004d70 <_free_r+0x54>
 8004d6c:	42a2      	cmp	r2, r4
 8004d6e:	d9fa      	bls.n	8004d66 <_free_r+0x4a>
 8004d70:	6819      	ldr	r1, [r3, #0]
 8004d72:	1858      	adds	r0, r3, r1
 8004d74:	42a0      	cmp	r0, r4
 8004d76:	d10b      	bne.n	8004d90 <_free_r+0x74>
 8004d78:	6820      	ldr	r0, [r4, #0]
 8004d7a:	4401      	add	r1, r0
 8004d7c:	1858      	adds	r0, r3, r1
 8004d7e:	4282      	cmp	r2, r0
 8004d80:	6019      	str	r1, [r3, #0]
 8004d82:	d1dd      	bne.n	8004d40 <_free_r+0x24>
 8004d84:	6810      	ldr	r0, [r2, #0]
 8004d86:	6852      	ldr	r2, [r2, #4]
 8004d88:	605a      	str	r2, [r3, #4]
 8004d8a:	4401      	add	r1, r0
 8004d8c:	6019      	str	r1, [r3, #0]
 8004d8e:	e7d7      	b.n	8004d40 <_free_r+0x24>
 8004d90:	d902      	bls.n	8004d98 <_free_r+0x7c>
 8004d92:	230c      	movs	r3, #12
 8004d94:	602b      	str	r3, [r5, #0]
 8004d96:	e7d3      	b.n	8004d40 <_free_r+0x24>
 8004d98:	6820      	ldr	r0, [r4, #0]
 8004d9a:	1821      	adds	r1, r4, r0
 8004d9c:	428a      	cmp	r2, r1
 8004d9e:	bf04      	itt	eq
 8004da0:	6811      	ldreq	r1, [r2, #0]
 8004da2:	6852      	ldreq	r2, [r2, #4]
 8004da4:	6062      	str	r2, [r4, #4]
 8004da6:	bf04      	itt	eq
 8004da8:	1809      	addeq	r1, r1, r0
 8004daa:	6021      	streq	r1, [r4, #0]
 8004dac:	605c      	str	r4, [r3, #4]
 8004dae:	e7c7      	b.n	8004d40 <_free_r+0x24>
 8004db0:	bd38      	pop	{r3, r4, r5, pc}
 8004db2:	bf00      	nop
 8004db4:	200000ec 	.word	0x200000ec

08004db8 <_malloc_r>:
 8004db8:	b570      	push	{r4, r5, r6, lr}
 8004dba:	1ccd      	adds	r5, r1, #3
 8004dbc:	f025 0503 	bic.w	r5, r5, #3
 8004dc0:	3508      	adds	r5, #8
 8004dc2:	2d0c      	cmp	r5, #12
 8004dc4:	bf38      	it	cc
 8004dc6:	250c      	movcc	r5, #12
 8004dc8:	2d00      	cmp	r5, #0
 8004dca:	4606      	mov	r6, r0
 8004dcc:	db01      	blt.n	8004dd2 <_malloc_r+0x1a>
 8004dce:	42a9      	cmp	r1, r5
 8004dd0:	d903      	bls.n	8004dda <_malloc_r+0x22>
 8004dd2:	230c      	movs	r3, #12
 8004dd4:	6033      	str	r3, [r6, #0]
 8004dd6:	2000      	movs	r0, #0
 8004dd8:	bd70      	pop	{r4, r5, r6, pc}
 8004dda:	f000 fb55 	bl	8005488 <__malloc_lock>
 8004dde:	4a21      	ldr	r2, [pc, #132]	; (8004e64 <_malloc_r+0xac>)
 8004de0:	6814      	ldr	r4, [r2, #0]
 8004de2:	4621      	mov	r1, r4
 8004de4:	b991      	cbnz	r1, 8004e0c <_malloc_r+0x54>
 8004de6:	4c20      	ldr	r4, [pc, #128]	; (8004e68 <_malloc_r+0xb0>)
 8004de8:	6823      	ldr	r3, [r4, #0]
 8004dea:	b91b      	cbnz	r3, 8004df4 <_malloc_r+0x3c>
 8004dec:	4630      	mov	r0, r6
 8004dee:	f000 fb17 	bl	8005420 <_sbrk_r>
 8004df2:	6020      	str	r0, [r4, #0]
 8004df4:	4629      	mov	r1, r5
 8004df6:	4630      	mov	r0, r6
 8004df8:	f000 fb12 	bl	8005420 <_sbrk_r>
 8004dfc:	1c43      	adds	r3, r0, #1
 8004dfe:	d124      	bne.n	8004e4a <_malloc_r+0x92>
 8004e00:	230c      	movs	r3, #12
 8004e02:	6033      	str	r3, [r6, #0]
 8004e04:	4630      	mov	r0, r6
 8004e06:	f000 fb40 	bl	800548a <__malloc_unlock>
 8004e0a:	e7e4      	b.n	8004dd6 <_malloc_r+0x1e>
 8004e0c:	680b      	ldr	r3, [r1, #0]
 8004e0e:	1b5b      	subs	r3, r3, r5
 8004e10:	d418      	bmi.n	8004e44 <_malloc_r+0x8c>
 8004e12:	2b0b      	cmp	r3, #11
 8004e14:	d90f      	bls.n	8004e36 <_malloc_r+0x7e>
 8004e16:	600b      	str	r3, [r1, #0]
 8004e18:	50cd      	str	r5, [r1, r3]
 8004e1a:	18cc      	adds	r4, r1, r3
 8004e1c:	4630      	mov	r0, r6
 8004e1e:	f000 fb34 	bl	800548a <__malloc_unlock>
 8004e22:	f104 000b 	add.w	r0, r4, #11
 8004e26:	1d23      	adds	r3, r4, #4
 8004e28:	f020 0007 	bic.w	r0, r0, #7
 8004e2c:	1ac3      	subs	r3, r0, r3
 8004e2e:	d0d3      	beq.n	8004dd8 <_malloc_r+0x20>
 8004e30:	425a      	negs	r2, r3
 8004e32:	50e2      	str	r2, [r4, r3]
 8004e34:	e7d0      	b.n	8004dd8 <_malloc_r+0x20>
 8004e36:	428c      	cmp	r4, r1
 8004e38:	684b      	ldr	r3, [r1, #4]
 8004e3a:	bf16      	itet	ne
 8004e3c:	6063      	strne	r3, [r4, #4]
 8004e3e:	6013      	streq	r3, [r2, #0]
 8004e40:	460c      	movne	r4, r1
 8004e42:	e7eb      	b.n	8004e1c <_malloc_r+0x64>
 8004e44:	460c      	mov	r4, r1
 8004e46:	6849      	ldr	r1, [r1, #4]
 8004e48:	e7cc      	b.n	8004de4 <_malloc_r+0x2c>
 8004e4a:	1cc4      	adds	r4, r0, #3
 8004e4c:	f024 0403 	bic.w	r4, r4, #3
 8004e50:	42a0      	cmp	r0, r4
 8004e52:	d005      	beq.n	8004e60 <_malloc_r+0xa8>
 8004e54:	1a21      	subs	r1, r4, r0
 8004e56:	4630      	mov	r0, r6
 8004e58:	f000 fae2 	bl	8005420 <_sbrk_r>
 8004e5c:	3001      	adds	r0, #1
 8004e5e:	d0cf      	beq.n	8004e00 <_malloc_r+0x48>
 8004e60:	6025      	str	r5, [r4, #0]
 8004e62:	e7db      	b.n	8004e1c <_malloc_r+0x64>
 8004e64:	200000ec 	.word	0x200000ec
 8004e68:	200000f0 	.word	0x200000f0

08004e6c <__ssputs_r>:
 8004e6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e70:	688e      	ldr	r6, [r1, #8]
 8004e72:	429e      	cmp	r6, r3
 8004e74:	4682      	mov	sl, r0
 8004e76:	460c      	mov	r4, r1
 8004e78:	4690      	mov	r8, r2
 8004e7a:	4699      	mov	r9, r3
 8004e7c:	d837      	bhi.n	8004eee <__ssputs_r+0x82>
 8004e7e:	898a      	ldrh	r2, [r1, #12]
 8004e80:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004e84:	d031      	beq.n	8004eea <__ssputs_r+0x7e>
 8004e86:	6825      	ldr	r5, [r4, #0]
 8004e88:	6909      	ldr	r1, [r1, #16]
 8004e8a:	1a6f      	subs	r7, r5, r1
 8004e8c:	6965      	ldr	r5, [r4, #20]
 8004e8e:	2302      	movs	r3, #2
 8004e90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004e94:	fb95 f5f3 	sdiv	r5, r5, r3
 8004e98:	f109 0301 	add.w	r3, r9, #1
 8004e9c:	443b      	add	r3, r7
 8004e9e:	429d      	cmp	r5, r3
 8004ea0:	bf38      	it	cc
 8004ea2:	461d      	movcc	r5, r3
 8004ea4:	0553      	lsls	r3, r2, #21
 8004ea6:	d530      	bpl.n	8004f0a <__ssputs_r+0x9e>
 8004ea8:	4629      	mov	r1, r5
 8004eaa:	f7ff ff85 	bl	8004db8 <_malloc_r>
 8004eae:	4606      	mov	r6, r0
 8004eb0:	b950      	cbnz	r0, 8004ec8 <__ssputs_r+0x5c>
 8004eb2:	230c      	movs	r3, #12
 8004eb4:	f8ca 3000 	str.w	r3, [sl]
 8004eb8:	89a3      	ldrh	r3, [r4, #12]
 8004eba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ebe:	81a3      	strh	r3, [r4, #12]
 8004ec0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ec8:	463a      	mov	r2, r7
 8004eca:	6921      	ldr	r1, [r4, #16]
 8004ecc:	f000 fab8 	bl	8005440 <memcpy>
 8004ed0:	89a3      	ldrh	r3, [r4, #12]
 8004ed2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004ed6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004eda:	81a3      	strh	r3, [r4, #12]
 8004edc:	6126      	str	r6, [r4, #16]
 8004ede:	6165      	str	r5, [r4, #20]
 8004ee0:	443e      	add	r6, r7
 8004ee2:	1bed      	subs	r5, r5, r7
 8004ee4:	6026      	str	r6, [r4, #0]
 8004ee6:	60a5      	str	r5, [r4, #8]
 8004ee8:	464e      	mov	r6, r9
 8004eea:	454e      	cmp	r6, r9
 8004eec:	d900      	bls.n	8004ef0 <__ssputs_r+0x84>
 8004eee:	464e      	mov	r6, r9
 8004ef0:	4632      	mov	r2, r6
 8004ef2:	4641      	mov	r1, r8
 8004ef4:	6820      	ldr	r0, [r4, #0]
 8004ef6:	f000 faae 	bl	8005456 <memmove>
 8004efa:	68a3      	ldr	r3, [r4, #8]
 8004efc:	1b9b      	subs	r3, r3, r6
 8004efe:	60a3      	str	r3, [r4, #8]
 8004f00:	6823      	ldr	r3, [r4, #0]
 8004f02:	441e      	add	r6, r3
 8004f04:	6026      	str	r6, [r4, #0]
 8004f06:	2000      	movs	r0, #0
 8004f08:	e7dc      	b.n	8004ec4 <__ssputs_r+0x58>
 8004f0a:	462a      	mov	r2, r5
 8004f0c:	f000 fabe 	bl	800548c <_realloc_r>
 8004f10:	4606      	mov	r6, r0
 8004f12:	2800      	cmp	r0, #0
 8004f14:	d1e2      	bne.n	8004edc <__ssputs_r+0x70>
 8004f16:	6921      	ldr	r1, [r4, #16]
 8004f18:	4650      	mov	r0, sl
 8004f1a:	f7ff feff 	bl	8004d1c <_free_r>
 8004f1e:	e7c8      	b.n	8004eb2 <__ssputs_r+0x46>

08004f20 <_svfiprintf_r>:
 8004f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f24:	461d      	mov	r5, r3
 8004f26:	898b      	ldrh	r3, [r1, #12]
 8004f28:	061f      	lsls	r7, r3, #24
 8004f2a:	b09d      	sub	sp, #116	; 0x74
 8004f2c:	4680      	mov	r8, r0
 8004f2e:	460c      	mov	r4, r1
 8004f30:	4616      	mov	r6, r2
 8004f32:	d50f      	bpl.n	8004f54 <_svfiprintf_r+0x34>
 8004f34:	690b      	ldr	r3, [r1, #16]
 8004f36:	b96b      	cbnz	r3, 8004f54 <_svfiprintf_r+0x34>
 8004f38:	2140      	movs	r1, #64	; 0x40
 8004f3a:	f7ff ff3d 	bl	8004db8 <_malloc_r>
 8004f3e:	6020      	str	r0, [r4, #0]
 8004f40:	6120      	str	r0, [r4, #16]
 8004f42:	b928      	cbnz	r0, 8004f50 <_svfiprintf_r+0x30>
 8004f44:	230c      	movs	r3, #12
 8004f46:	f8c8 3000 	str.w	r3, [r8]
 8004f4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f4e:	e0c8      	b.n	80050e2 <_svfiprintf_r+0x1c2>
 8004f50:	2340      	movs	r3, #64	; 0x40
 8004f52:	6163      	str	r3, [r4, #20]
 8004f54:	2300      	movs	r3, #0
 8004f56:	9309      	str	r3, [sp, #36]	; 0x24
 8004f58:	2320      	movs	r3, #32
 8004f5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004f5e:	2330      	movs	r3, #48	; 0x30
 8004f60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004f64:	9503      	str	r5, [sp, #12]
 8004f66:	f04f 0b01 	mov.w	fp, #1
 8004f6a:	4637      	mov	r7, r6
 8004f6c:	463d      	mov	r5, r7
 8004f6e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004f72:	b10b      	cbz	r3, 8004f78 <_svfiprintf_r+0x58>
 8004f74:	2b25      	cmp	r3, #37	; 0x25
 8004f76:	d13e      	bne.n	8004ff6 <_svfiprintf_r+0xd6>
 8004f78:	ebb7 0a06 	subs.w	sl, r7, r6
 8004f7c:	d00b      	beq.n	8004f96 <_svfiprintf_r+0x76>
 8004f7e:	4653      	mov	r3, sl
 8004f80:	4632      	mov	r2, r6
 8004f82:	4621      	mov	r1, r4
 8004f84:	4640      	mov	r0, r8
 8004f86:	f7ff ff71 	bl	8004e6c <__ssputs_r>
 8004f8a:	3001      	adds	r0, #1
 8004f8c:	f000 80a4 	beq.w	80050d8 <_svfiprintf_r+0x1b8>
 8004f90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f92:	4453      	add	r3, sl
 8004f94:	9309      	str	r3, [sp, #36]	; 0x24
 8004f96:	783b      	ldrb	r3, [r7, #0]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	f000 809d 	beq.w	80050d8 <_svfiprintf_r+0x1b8>
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004fa4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004fa8:	9304      	str	r3, [sp, #16]
 8004faa:	9307      	str	r3, [sp, #28]
 8004fac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004fb0:	931a      	str	r3, [sp, #104]	; 0x68
 8004fb2:	462f      	mov	r7, r5
 8004fb4:	2205      	movs	r2, #5
 8004fb6:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004fba:	4850      	ldr	r0, [pc, #320]	; (80050fc <_svfiprintf_r+0x1dc>)
 8004fbc:	f7fb f918 	bl	80001f0 <memchr>
 8004fc0:	9b04      	ldr	r3, [sp, #16]
 8004fc2:	b9d0      	cbnz	r0, 8004ffa <_svfiprintf_r+0xda>
 8004fc4:	06d9      	lsls	r1, r3, #27
 8004fc6:	bf44      	itt	mi
 8004fc8:	2220      	movmi	r2, #32
 8004fca:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004fce:	071a      	lsls	r2, r3, #28
 8004fd0:	bf44      	itt	mi
 8004fd2:	222b      	movmi	r2, #43	; 0x2b
 8004fd4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004fd8:	782a      	ldrb	r2, [r5, #0]
 8004fda:	2a2a      	cmp	r2, #42	; 0x2a
 8004fdc:	d015      	beq.n	800500a <_svfiprintf_r+0xea>
 8004fde:	9a07      	ldr	r2, [sp, #28]
 8004fe0:	462f      	mov	r7, r5
 8004fe2:	2000      	movs	r0, #0
 8004fe4:	250a      	movs	r5, #10
 8004fe6:	4639      	mov	r1, r7
 8004fe8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004fec:	3b30      	subs	r3, #48	; 0x30
 8004fee:	2b09      	cmp	r3, #9
 8004ff0:	d94d      	bls.n	800508e <_svfiprintf_r+0x16e>
 8004ff2:	b1b8      	cbz	r0, 8005024 <_svfiprintf_r+0x104>
 8004ff4:	e00f      	b.n	8005016 <_svfiprintf_r+0xf6>
 8004ff6:	462f      	mov	r7, r5
 8004ff8:	e7b8      	b.n	8004f6c <_svfiprintf_r+0x4c>
 8004ffa:	4a40      	ldr	r2, [pc, #256]	; (80050fc <_svfiprintf_r+0x1dc>)
 8004ffc:	1a80      	subs	r0, r0, r2
 8004ffe:	fa0b f000 	lsl.w	r0, fp, r0
 8005002:	4318      	orrs	r0, r3
 8005004:	9004      	str	r0, [sp, #16]
 8005006:	463d      	mov	r5, r7
 8005008:	e7d3      	b.n	8004fb2 <_svfiprintf_r+0x92>
 800500a:	9a03      	ldr	r2, [sp, #12]
 800500c:	1d11      	adds	r1, r2, #4
 800500e:	6812      	ldr	r2, [r2, #0]
 8005010:	9103      	str	r1, [sp, #12]
 8005012:	2a00      	cmp	r2, #0
 8005014:	db01      	blt.n	800501a <_svfiprintf_r+0xfa>
 8005016:	9207      	str	r2, [sp, #28]
 8005018:	e004      	b.n	8005024 <_svfiprintf_r+0x104>
 800501a:	4252      	negs	r2, r2
 800501c:	f043 0302 	orr.w	r3, r3, #2
 8005020:	9207      	str	r2, [sp, #28]
 8005022:	9304      	str	r3, [sp, #16]
 8005024:	783b      	ldrb	r3, [r7, #0]
 8005026:	2b2e      	cmp	r3, #46	; 0x2e
 8005028:	d10c      	bne.n	8005044 <_svfiprintf_r+0x124>
 800502a:	787b      	ldrb	r3, [r7, #1]
 800502c:	2b2a      	cmp	r3, #42	; 0x2a
 800502e:	d133      	bne.n	8005098 <_svfiprintf_r+0x178>
 8005030:	9b03      	ldr	r3, [sp, #12]
 8005032:	1d1a      	adds	r2, r3, #4
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	9203      	str	r2, [sp, #12]
 8005038:	2b00      	cmp	r3, #0
 800503a:	bfb8      	it	lt
 800503c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005040:	3702      	adds	r7, #2
 8005042:	9305      	str	r3, [sp, #20]
 8005044:	4d2e      	ldr	r5, [pc, #184]	; (8005100 <_svfiprintf_r+0x1e0>)
 8005046:	7839      	ldrb	r1, [r7, #0]
 8005048:	2203      	movs	r2, #3
 800504a:	4628      	mov	r0, r5
 800504c:	f7fb f8d0 	bl	80001f0 <memchr>
 8005050:	b138      	cbz	r0, 8005062 <_svfiprintf_r+0x142>
 8005052:	2340      	movs	r3, #64	; 0x40
 8005054:	1b40      	subs	r0, r0, r5
 8005056:	fa03 f000 	lsl.w	r0, r3, r0
 800505a:	9b04      	ldr	r3, [sp, #16]
 800505c:	4303      	orrs	r3, r0
 800505e:	3701      	adds	r7, #1
 8005060:	9304      	str	r3, [sp, #16]
 8005062:	7839      	ldrb	r1, [r7, #0]
 8005064:	4827      	ldr	r0, [pc, #156]	; (8005104 <_svfiprintf_r+0x1e4>)
 8005066:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800506a:	2206      	movs	r2, #6
 800506c:	1c7e      	adds	r6, r7, #1
 800506e:	f7fb f8bf 	bl	80001f0 <memchr>
 8005072:	2800      	cmp	r0, #0
 8005074:	d038      	beq.n	80050e8 <_svfiprintf_r+0x1c8>
 8005076:	4b24      	ldr	r3, [pc, #144]	; (8005108 <_svfiprintf_r+0x1e8>)
 8005078:	bb13      	cbnz	r3, 80050c0 <_svfiprintf_r+0x1a0>
 800507a:	9b03      	ldr	r3, [sp, #12]
 800507c:	3307      	adds	r3, #7
 800507e:	f023 0307 	bic.w	r3, r3, #7
 8005082:	3308      	adds	r3, #8
 8005084:	9303      	str	r3, [sp, #12]
 8005086:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005088:	444b      	add	r3, r9
 800508a:	9309      	str	r3, [sp, #36]	; 0x24
 800508c:	e76d      	b.n	8004f6a <_svfiprintf_r+0x4a>
 800508e:	fb05 3202 	mla	r2, r5, r2, r3
 8005092:	2001      	movs	r0, #1
 8005094:	460f      	mov	r7, r1
 8005096:	e7a6      	b.n	8004fe6 <_svfiprintf_r+0xc6>
 8005098:	2300      	movs	r3, #0
 800509a:	3701      	adds	r7, #1
 800509c:	9305      	str	r3, [sp, #20]
 800509e:	4619      	mov	r1, r3
 80050a0:	250a      	movs	r5, #10
 80050a2:	4638      	mov	r0, r7
 80050a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80050a8:	3a30      	subs	r2, #48	; 0x30
 80050aa:	2a09      	cmp	r2, #9
 80050ac:	d903      	bls.n	80050b6 <_svfiprintf_r+0x196>
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d0c8      	beq.n	8005044 <_svfiprintf_r+0x124>
 80050b2:	9105      	str	r1, [sp, #20]
 80050b4:	e7c6      	b.n	8005044 <_svfiprintf_r+0x124>
 80050b6:	fb05 2101 	mla	r1, r5, r1, r2
 80050ba:	2301      	movs	r3, #1
 80050bc:	4607      	mov	r7, r0
 80050be:	e7f0      	b.n	80050a2 <_svfiprintf_r+0x182>
 80050c0:	ab03      	add	r3, sp, #12
 80050c2:	9300      	str	r3, [sp, #0]
 80050c4:	4622      	mov	r2, r4
 80050c6:	4b11      	ldr	r3, [pc, #68]	; (800510c <_svfiprintf_r+0x1ec>)
 80050c8:	a904      	add	r1, sp, #16
 80050ca:	4640      	mov	r0, r8
 80050cc:	f3af 8000 	nop.w
 80050d0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80050d4:	4681      	mov	r9, r0
 80050d6:	d1d6      	bne.n	8005086 <_svfiprintf_r+0x166>
 80050d8:	89a3      	ldrh	r3, [r4, #12]
 80050da:	065b      	lsls	r3, r3, #25
 80050dc:	f53f af35 	bmi.w	8004f4a <_svfiprintf_r+0x2a>
 80050e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80050e2:	b01d      	add	sp, #116	; 0x74
 80050e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050e8:	ab03      	add	r3, sp, #12
 80050ea:	9300      	str	r3, [sp, #0]
 80050ec:	4622      	mov	r2, r4
 80050ee:	4b07      	ldr	r3, [pc, #28]	; (800510c <_svfiprintf_r+0x1ec>)
 80050f0:	a904      	add	r1, sp, #16
 80050f2:	4640      	mov	r0, r8
 80050f4:	f000 f882 	bl	80051fc <_printf_i>
 80050f8:	e7ea      	b.n	80050d0 <_svfiprintf_r+0x1b0>
 80050fa:	bf00      	nop
 80050fc:	080058bc 	.word	0x080058bc
 8005100:	080058c2 	.word	0x080058c2
 8005104:	080058c6 	.word	0x080058c6
 8005108:	00000000 	.word	0x00000000
 800510c:	08004e6d 	.word	0x08004e6d

08005110 <_printf_common>:
 8005110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005114:	4691      	mov	r9, r2
 8005116:	461f      	mov	r7, r3
 8005118:	688a      	ldr	r2, [r1, #8]
 800511a:	690b      	ldr	r3, [r1, #16]
 800511c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005120:	4293      	cmp	r3, r2
 8005122:	bfb8      	it	lt
 8005124:	4613      	movlt	r3, r2
 8005126:	f8c9 3000 	str.w	r3, [r9]
 800512a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800512e:	4606      	mov	r6, r0
 8005130:	460c      	mov	r4, r1
 8005132:	b112      	cbz	r2, 800513a <_printf_common+0x2a>
 8005134:	3301      	adds	r3, #1
 8005136:	f8c9 3000 	str.w	r3, [r9]
 800513a:	6823      	ldr	r3, [r4, #0]
 800513c:	0699      	lsls	r1, r3, #26
 800513e:	bf42      	ittt	mi
 8005140:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005144:	3302      	addmi	r3, #2
 8005146:	f8c9 3000 	strmi.w	r3, [r9]
 800514a:	6825      	ldr	r5, [r4, #0]
 800514c:	f015 0506 	ands.w	r5, r5, #6
 8005150:	d107      	bne.n	8005162 <_printf_common+0x52>
 8005152:	f104 0a19 	add.w	sl, r4, #25
 8005156:	68e3      	ldr	r3, [r4, #12]
 8005158:	f8d9 2000 	ldr.w	r2, [r9]
 800515c:	1a9b      	subs	r3, r3, r2
 800515e:	42ab      	cmp	r3, r5
 8005160:	dc28      	bgt.n	80051b4 <_printf_common+0xa4>
 8005162:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005166:	6822      	ldr	r2, [r4, #0]
 8005168:	3300      	adds	r3, #0
 800516a:	bf18      	it	ne
 800516c:	2301      	movne	r3, #1
 800516e:	0692      	lsls	r2, r2, #26
 8005170:	d42d      	bmi.n	80051ce <_printf_common+0xbe>
 8005172:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005176:	4639      	mov	r1, r7
 8005178:	4630      	mov	r0, r6
 800517a:	47c0      	blx	r8
 800517c:	3001      	adds	r0, #1
 800517e:	d020      	beq.n	80051c2 <_printf_common+0xb2>
 8005180:	6823      	ldr	r3, [r4, #0]
 8005182:	68e5      	ldr	r5, [r4, #12]
 8005184:	f8d9 2000 	ldr.w	r2, [r9]
 8005188:	f003 0306 	and.w	r3, r3, #6
 800518c:	2b04      	cmp	r3, #4
 800518e:	bf08      	it	eq
 8005190:	1aad      	subeq	r5, r5, r2
 8005192:	68a3      	ldr	r3, [r4, #8]
 8005194:	6922      	ldr	r2, [r4, #16]
 8005196:	bf0c      	ite	eq
 8005198:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800519c:	2500      	movne	r5, #0
 800519e:	4293      	cmp	r3, r2
 80051a0:	bfc4      	itt	gt
 80051a2:	1a9b      	subgt	r3, r3, r2
 80051a4:	18ed      	addgt	r5, r5, r3
 80051a6:	f04f 0900 	mov.w	r9, #0
 80051aa:	341a      	adds	r4, #26
 80051ac:	454d      	cmp	r5, r9
 80051ae:	d11a      	bne.n	80051e6 <_printf_common+0xd6>
 80051b0:	2000      	movs	r0, #0
 80051b2:	e008      	b.n	80051c6 <_printf_common+0xb6>
 80051b4:	2301      	movs	r3, #1
 80051b6:	4652      	mov	r2, sl
 80051b8:	4639      	mov	r1, r7
 80051ba:	4630      	mov	r0, r6
 80051bc:	47c0      	blx	r8
 80051be:	3001      	adds	r0, #1
 80051c0:	d103      	bne.n	80051ca <_printf_common+0xba>
 80051c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80051c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051ca:	3501      	adds	r5, #1
 80051cc:	e7c3      	b.n	8005156 <_printf_common+0x46>
 80051ce:	18e1      	adds	r1, r4, r3
 80051d0:	1c5a      	adds	r2, r3, #1
 80051d2:	2030      	movs	r0, #48	; 0x30
 80051d4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80051d8:	4422      	add	r2, r4
 80051da:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80051de:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80051e2:	3302      	adds	r3, #2
 80051e4:	e7c5      	b.n	8005172 <_printf_common+0x62>
 80051e6:	2301      	movs	r3, #1
 80051e8:	4622      	mov	r2, r4
 80051ea:	4639      	mov	r1, r7
 80051ec:	4630      	mov	r0, r6
 80051ee:	47c0      	blx	r8
 80051f0:	3001      	adds	r0, #1
 80051f2:	d0e6      	beq.n	80051c2 <_printf_common+0xb2>
 80051f4:	f109 0901 	add.w	r9, r9, #1
 80051f8:	e7d8      	b.n	80051ac <_printf_common+0x9c>
	...

080051fc <_printf_i>:
 80051fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005200:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005204:	460c      	mov	r4, r1
 8005206:	7e09      	ldrb	r1, [r1, #24]
 8005208:	b085      	sub	sp, #20
 800520a:	296e      	cmp	r1, #110	; 0x6e
 800520c:	4617      	mov	r7, r2
 800520e:	4606      	mov	r6, r0
 8005210:	4698      	mov	r8, r3
 8005212:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005214:	f000 80b3 	beq.w	800537e <_printf_i+0x182>
 8005218:	d822      	bhi.n	8005260 <_printf_i+0x64>
 800521a:	2963      	cmp	r1, #99	; 0x63
 800521c:	d036      	beq.n	800528c <_printf_i+0x90>
 800521e:	d80a      	bhi.n	8005236 <_printf_i+0x3a>
 8005220:	2900      	cmp	r1, #0
 8005222:	f000 80b9 	beq.w	8005398 <_printf_i+0x19c>
 8005226:	2958      	cmp	r1, #88	; 0x58
 8005228:	f000 8083 	beq.w	8005332 <_printf_i+0x136>
 800522c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005230:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005234:	e032      	b.n	800529c <_printf_i+0xa0>
 8005236:	2964      	cmp	r1, #100	; 0x64
 8005238:	d001      	beq.n	800523e <_printf_i+0x42>
 800523a:	2969      	cmp	r1, #105	; 0x69
 800523c:	d1f6      	bne.n	800522c <_printf_i+0x30>
 800523e:	6820      	ldr	r0, [r4, #0]
 8005240:	6813      	ldr	r3, [r2, #0]
 8005242:	0605      	lsls	r5, r0, #24
 8005244:	f103 0104 	add.w	r1, r3, #4
 8005248:	d52a      	bpl.n	80052a0 <_printf_i+0xa4>
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	6011      	str	r1, [r2, #0]
 800524e:	2b00      	cmp	r3, #0
 8005250:	da03      	bge.n	800525a <_printf_i+0x5e>
 8005252:	222d      	movs	r2, #45	; 0x2d
 8005254:	425b      	negs	r3, r3
 8005256:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800525a:	486f      	ldr	r0, [pc, #444]	; (8005418 <_printf_i+0x21c>)
 800525c:	220a      	movs	r2, #10
 800525e:	e039      	b.n	80052d4 <_printf_i+0xd8>
 8005260:	2973      	cmp	r1, #115	; 0x73
 8005262:	f000 809d 	beq.w	80053a0 <_printf_i+0x1a4>
 8005266:	d808      	bhi.n	800527a <_printf_i+0x7e>
 8005268:	296f      	cmp	r1, #111	; 0x6f
 800526a:	d020      	beq.n	80052ae <_printf_i+0xb2>
 800526c:	2970      	cmp	r1, #112	; 0x70
 800526e:	d1dd      	bne.n	800522c <_printf_i+0x30>
 8005270:	6823      	ldr	r3, [r4, #0]
 8005272:	f043 0320 	orr.w	r3, r3, #32
 8005276:	6023      	str	r3, [r4, #0]
 8005278:	e003      	b.n	8005282 <_printf_i+0x86>
 800527a:	2975      	cmp	r1, #117	; 0x75
 800527c:	d017      	beq.n	80052ae <_printf_i+0xb2>
 800527e:	2978      	cmp	r1, #120	; 0x78
 8005280:	d1d4      	bne.n	800522c <_printf_i+0x30>
 8005282:	2378      	movs	r3, #120	; 0x78
 8005284:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005288:	4864      	ldr	r0, [pc, #400]	; (800541c <_printf_i+0x220>)
 800528a:	e055      	b.n	8005338 <_printf_i+0x13c>
 800528c:	6813      	ldr	r3, [r2, #0]
 800528e:	1d19      	adds	r1, r3, #4
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	6011      	str	r1, [r2, #0]
 8005294:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005298:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800529c:	2301      	movs	r3, #1
 800529e:	e08c      	b.n	80053ba <_printf_i+0x1be>
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	6011      	str	r1, [r2, #0]
 80052a4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80052a8:	bf18      	it	ne
 80052aa:	b21b      	sxthne	r3, r3
 80052ac:	e7cf      	b.n	800524e <_printf_i+0x52>
 80052ae:	6813      	ldr	r3, [r2, #0]
 80052b0:	6825      	ldr	r5, [r4, #0]
 80052b2:	1d18      	adds	r0, r3, #4
 80052b4:	6010      	str	r0, [r2, #0]
 80052b6:	0628      	lsls	r0, r5, #24
 80052b8:	d501      	bpl.n	80052be <_printf_i+0xc2>
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	e002      	b.n	80052c4 <_printf_i+0xc8>
 80052be:	0668      	lsls	r0, r5, #25
 80052c0:	d5fb      	bpl.n	80052ba <_printf_i+0xbe>
 80052c2:	881b      	ldrh	r3, [r3, #0]
 80052c4:	4854      	ldr	r0, [pc, #336]	; (8005418 <_printf_i+0x21c>)
 80052c6:	296f      	cmp	r1, #111	; 0x6f
 80052c8:	bf14      	ite	ne
 80052ca:	220a      	movne	r2, #10
 80052cc:	2208      	moveq	r2, #8
 80052ce:	2100      	movs	r1, #0
 80052d0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80052d4:	6865      	ldr	r5, [r4, #4]
 80052d6:	60a5      	str	r5, [r4, #8]
 80052d8:	2d00      	cmp	r5, #0
 80052da:	f2c0 8095 	blt.w	8005408 <_printf_i+0x20c>
 80052de:	6821      	ldr	r1, [r4, #0]
 80052e0:	f021 0104 	bic.w	r1, r1, #4
 80052e4:	6021      	str	r1, [r4, #0]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d13d      	bne.n	8005366 <_printf_i+0x16a>
 80052ea:	2d00      	cmp	r5, #0
 80052ec:	f040 808e 	bne.w	800540c <_printf_i+0x210>
 80052f0:	4665      	mov	r5, ip
 80052f2:	2a08      	cmp	r2, #8
 80052f4:	d10b      	bne.n	800530e <_printf_i+0x112>
 80052f6:	6823      	ldr	r3, [r4, #0]
 80052f8:	07db      	lsls	r3, r3, #31
 80052fa:	d508      	bpl.n	800530e <_printf_i+0x112>
 80052fc:	6923      	ldr	r3, [r4, #16]
 80052fe:	6862      	ldr	r2, [r4, #4]
 8005300:	429a      	cmp	r2, r3
 8005302:	bfde      	ittt	le
 8005304:	2330      	movle	r3, #48	; 0x30
 8005306:	f805 3c01 	strble.w	r3, [r5, #-1]
 800530a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800530e:	ebac 0305 	sub.w	r3, ip, r5
 8005312:	6123      	str	r3, [r4, #16]
 8005314:	f8cd 8000 	str.w	r8, [sp]
 8005318:	463b      	mov	r3, r7
 800531a:	aa03      	add	r2, sp, #12
 800531c:	4621      	mov	r1, r4
 800531e:	4630      	mov	r0, r6
 8005320:	f7ff fef6 	bl	8005110 <_printf_common>
 8005324:	3001      	adds	r0, #1
 8005326:	d14d      	bne.n	80053c4 <_printf_i+0x1c8>
 8005328:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800532c:	b005      	add	sp, #20
 800532e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005332:	4839      	ldr	r0, [pc, #228]	; (8005418 <_printf_i+0x21c>)
 8005334:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005338:	6813      	ldr	r3, [r2, #0]
 800533a:	6821      	ldr	r1, [r4, #0]
 800533c:	1d1d      	adds	r5, r3, #4
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	6015      	str	r5, [r2, #0]
 8005342:	060a      	lsls	r2, r1, #24
 8005344:	d50b      	bpl.n	800535e <_printf_i+0x162>
 8005346:	07ca      	lsls	r2, r1, #31
 8005348:	bf44      	itt	mi
 800534a:	f041 0120 	orrmi.w	r1, r1, #32
 800534e:	6021      	strmi	r1, [r4, #0]
 8005350:	b91b      	cbnz	r3, 800535a <_printf_i+0x15e>
 8005352:	6822      	ldr	r2, [r4, #0]
 8005354:	f022 0220 	bic.w	r2, r2, #32
 8005358:	6022      	str	r2, [r4, #0]
 800535a:	2210      	movs	r2, #16
 800535c:	e7b7      	b.n	80052ce <_printf_i+0xd2>
 800535e:	064d      	lsls	r5, r1, #25
 8005360:	bf48      	it	mi
 8005362:	b29b      	uxthmi	r3, r3
 8005364:	e7ef      	b.n	8005346 <_printf_i+0x14a>
 8005366:	4665      	mov	r5, ip
 8005368:	fbb3 f1f2 	udiv	r1, r3, r2
 800536c:	fb02 3311 	mls	r3, r2, r1, r3
 8005370:	5cc3      	ldrb	r3, [r0, r3]
 8005372:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005376:	460b      	mov	r3, r1
 8005378:	2900      	cmp	r1, #0
 800537a:	d1f5      	bne.n	8005368 <_printf_i+0x16c>
 800537c:	e7b9      	b.n	80052f2 <_printf_i+0xf6>
 800537e:	6813      	ldr	r3, [r2, #0]
 8005380:	6825      	ldr	r5, [r4, #0]
 8005382:	6961      	ldr	r1, [r4, #20]
 8005384:	1d18      	adds	r0, r3, #4
 8005386:	6010      	str	r0, [r2, #0]
 8005388:	0628      	lsls	r0, r5, #24
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	d501      	bpl.n	8005392 <_printf_i+0x196>
 800538e:	6019      	str	r1, [r3, #0]
 8005390:	e002      	b.n	8005398 <_printf_i+0x19c>
 8005392:	066a      	lsls	r2, r5, #25
 8005394:	d5fb      	bpl.n	800538e <_printf_i+0x192>
 8005396:	8019      	strh	r1, [r3, #0]
 8005398:	2300      	movs	r3, #0
 800539a:	6123      	str	r3, [r4, #16]
 800539c:	4665      	mov	r5, ip
 800539e:	e7b9      	b.n	8005314 <_printf_i+0x118>
 80053a0:	6813      	ldr	r3, [r2, #0]
 80053a2:	1d19      	adds	r1, r3, #4
 80053a4:	6011      	str	r1, [r2, #0]
 80053a6:	681d      	ldr	r5, [r3, #0]
 80053a8:	6862      	ldr	r2, [r4, #4]
 80053aa:	2100      	movs	r1, #0
 80053ac:	4628      	mov	r0, r5
 80053ae:	f7fa ff1f 	bl	80001f0 <memchr>
 80053b2:	b108      	cbz	r0, 80053b8 <_printf_i+0x1bc>
 80053b4:	1b40      	subs	r0, r0, r5
 80053b6:	6060      	str	r0, [r4, #4]
 80053b8:	6863      	ldr	r3, [r4, #4]
 80053ba:	6123      	str	r3, [r4, #16]
 80053bc:	2300      	movs	r3, #0
 80053be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053c2:	e7a7      	b.n	8005314 <_printf_i+0x118>
 80053c4:	6923      	ldr	r3, [r4, #16]
 80053c6:	462a      	mov	r2, r5
 80053c8:	4639      	mov	r1, r7
 80053ca:	4630      	mov	r0, r6
 80053cc:	47c0      	blx	r8
 80053ce:	3001      	adds	r0, #1
 80053d0:	d0aa      	beq.n	8005328 <_printf_i+0x12c>
 80053d2:	6823      	ldr	r3, [r4, #0]
 80053d4:	079b      	lsls	r3, r3, #30
 80053d6:	d413      	bmi.n	8005400 <_printf_i+0x204>
 80053d8:	68e0      	ldr	r0, [r4, #12]
 80053da:	9b03      	ldr	r3, [sp, #12]
 80053dc:	4298      	cmp	r0, r3
 80053de:	bfb8      	it	lt
 80053e0:	4618      	movlt	r0, r3
 80053e2:	e7a3      	b.n	800532c <_printf_i+0x130>
 80053e4:	2301      	movs	r3, #1
 80053e6:	464a      	mov	r2, r9
 80053e8:	4639      	mov	r1, r7
 80053ea:	4630      	mov	r0, r6
 80053ec:	47c0      	blx	r8
 80053ee:	3001      	adds	r0, #1
 80053f0:	d09a      	beq.n	8005328 <_printf_i+0x12c>
 80053f2:	3501      	adds	r5, #1
 80053f4:	68e3      	ldr	r3, [r4, #12]
 80053f6:	9a03      	ldr	r2, [sp, #12]
 80053f8:	1a9b      	subs	r3, r3, r2
 80053fa:	42ab      	cmp	r3, r5
 80053fc:	dcf2      	bgt.n	80053e4 <_printf_i+0x1e8>
 80053fe:	e7eb      	b.n	80053d8 <_printf_i+0x1dc>
 8005400:	2500      	movs	r5, #0
 8005402:	f104 0919 	add.w	r9, r4, #25
 8005406:	e7f5      	b.n	80053f4 <_printf_i+0x1f8>
 8005408:	2b00      	cmp	r3, #0
 800540a:	d1ac      	bne.n	8005366 <_printf_i+0x16a>
 800540c:	7803      	ldrb	r3, [r0, #0]
 800540e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005412:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005416:	e76c      	b.n	80052f2 <_printf_i+0xf6>
 8005418:	080058cd 	.word	0x080058cd
 800541c:	080058de 	.word	0x080058de

08005420 <_sbrk_r>:
 8005420:	b538      	push	{r3, r4, r5, lr}
 8005422:	4c06      	ldr	r4, [pc, #24]	; (800543c <_sbrk_r+0x1c>)
 8005424:	2300      	movs	r3, #0
 8005426:	4605      	mov	r5, r0
 8005428:	4608      	mov	r0, r1
 800542a:	6023      	str	r3, [r4, #0]
 800542c:	f7fc fdca 	bl	8001fc4 <_sbrk>
 8005430:	1c43      	adds	r3, r0, #1
 8005432:	d102      	bne.n	800543a <_sbrk_r+0x1a>
 8005434:	6823      	ldr	r3, [r4, #0]
 8005436:	b103      	cbz	r3, 800543a <_sbrk_r+0x1a>
 8005438:	602b      	str	r3, [r5, #0]
 800543a:	bd38      	pop	{r3, r4, r5, pc}
 800543c:	20000184 	.word	0x20000184

08005440 <memcpy>:
 8005440:	b510      	push	{r4, lr}
 8005442:	1e43      	subs	r3, r0, #1
 8005444:	440a      	add	r2, r1
 8005446:	4291      	cmp	r1, r2
 8005448:	d100      	bne.n	800544c <memcpy+0xc>
 800544a:	bd10      	pop	{r4, pc}
 800544c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005450:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005454:	e7f7      	b.n	8005446 <memcpy+0x6>

08005456 <memmove>:
 8005456:	4288      	cmp	r0, r1
 8005458:	b510      	push	{r4, lr}
 800545a:	eb01 0302 	add.w	r3, r1, r2
 800545e:	d807      	bhi.n	8005470 <memmove+0x1a>
 8005460:	1e42      	subs	r2, r0, #1
 8005462:	4299      	cmp	r1, r3
 8005464:	d00a      	beq.n	800547c <memmove+0x26>
 8005466:	f811 4b01 	ldrb.w	r4, [r1], #1
 800546a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800546e:	e7f8      	b.n	8005462 <memmove+0xc>
 8005470:	4283      	cmp	r3, r0
 8005472:	d9f5      	bls.n	8005460 <memmove+0xa>
 8005474:	1881      	adds	r1, r0, r2
 8005476:	1ad2      	subs	r2, r2, r3
 8005478:	42d3      	cmn	r3, r2
 800547a:	d100      	bne.n	800547e <memmove+0x28>
 800547c:	bd10      	pop	{r4, pc}
 800547e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005482:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005486:	e7f7      	b.n	8005478 <memmove+0x22>

08005488 <__malloc_lock>:
 8005488:	4770      	bx	lr

0800548a <__malloc_unlock>:
 800548a:	4770      	bx	lr

0800548c <_realloc_r>:
 800548c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800548e:	4607      	mov	r7, r0
 8005490:	4614      	mov	r4, r2
 8005492:	460e      	mov	r6, r1
 8005494:	b921      	cbnz	r1, 80054a0 <_realloc_r+0x14>
 8005496:	4611      	mov	r1, r2
 8005498:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800549c:	f7ff bc8c 	b.w	8004db8 <_malloc_r>
 80054a0:	b922      	cbnz	r2, 80054ac <_realloc_r+0x20>
 80054a2:	f7ff fc3b 	bl	8004d1c <_free_r>
 80054a6:	4625      	mov	r5, r4
 80054a8:	4628      	mov	r0, r5
 80054aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054ac:	f000 f814 	bl	80054d8 <_malloc_usable_size_r>
 80054b0:	42a0      	cmp	r0, r4
 80054b2:	d20f      	bcs.n	80054d4 <_realloc_r+0x48>
 80054b4:	4621      	mov	r1, r4
 80054b6:	4638      	mov	r0, r7
 80054b8:	f7ff fc7e 	bl	8004db8 <_malloc_r>
 80054bc:	4605      	mov	r5, r0
 80054be:	2800      	cmp	r0, #0
 80054c0:	d0f2      	beq.n	80054a8 <_realloc_r+0x1c>
 80054c2:	4631      	mov	r1, r6
 80054c4:	4622      	mov	r2, r4
 80054c6:	f7ff ffbb 	bl	8005440 <memcpy>
 80054ca:	4631      	mov	r1, r6
 80054cc:	4638      	mov	r0, r7
 80054ce:	f7ff fc25 	bl	8004d1c <_free_r>
 80054d2:	e7e9      	b.n	80054a8 <_realloc_r+0x1c>
 80054d4:	4635      	mov	r5, r6
 80054d6:	e7e7      	b.n	80054a8 <_realloc_r+0x1c>

080054d8 <_malloc_usable_size_r>:
 80054d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054dc:	1f18      	subs	r0, r3, #4
 80054de:	2b00      	cmp	r3, #0
 80054e0:	bfbc      	itt	lt
 80054e2:	580b      	ldrlt	r3, [r1, r0]
 80054e4:	18c0      	addlt	r0, r0, r3
 80054e6:	4770      	bx	lr

080054e8 <_init>:
 80054e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ea:	bf00      	nop
 80054ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054ee:	bc08      	pop	{r3}
 80054f0:	469e      	mov	lr, r3
 80054f2:	4770      	bx	lr

080054f4 <_fini>:
 80054f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054f6:	bf00      	nop
 80054f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054fa:	bc08      	pop	{r3}
 80054fc:	469e      	mov	lr, r3
 80054fe:	4770      	bx	lr
